
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005550  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080056d8  080056d8  000066d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005720  08005720  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005728  08005728  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005730  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  2000000c  0800573c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  0800573c  00007148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001540e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a54  00000000  00000000  0001c44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0001eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fae  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028547  00000000  00000000  0002125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015860  00000000  00000000  000497a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103c96  00000000  00000000  0005f005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162c9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005694  00000000  00000000  00162ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00168374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056c0 	.word	0x080056c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056c0 	.word	0x080056c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc8d 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82b 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9b1 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f989 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f957 	bl	80007bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800050e:	f000 f875 	bl	80005fc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_DAC1_Init>
  MX_TIM6_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <main+0x50>)
 800051c:	f004 f9ec 	bl	80048f8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, BUFFER_SIZE);
 8000520:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000524:	4908      	ldr	r1, [pc, #32]	@ (8000548 <main+0x54>)
 8000526:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x58>)
 8000528:	f001 f83c 	bl	80015a4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000534:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4806      	ldr	r0, [pc, #24]	@ (8000554 <main+0x60>)
 800053a:	f002 f80f 	bl	800255c <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	bf00      	nop
 8000540:	e7fd      	b.n	800053e <main+0x4a>
 8000542:	bf00      	nop
 8000544:	20000130 	.word	0x20000130
 8000548:	20000204 	.word	0x20000204
 800054c:	20000028 	.word	0x20000028
 8000550:	200011a4 	.word	0x200011a4
 8000554:	200000d4 	.word	0x200000d4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	@ 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	@ 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f87d 	bl	8005666 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f002 fe51 	bl	8003224 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fa1a 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe88 	bl	80032d0 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 f9fb 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fa50 	bl	8003a88 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f9e7 	bl	80009c0 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	@ 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061e:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000620:	4a30      	ldr	r2, [pc, #192]	@ (80006e4 <MX_ADC1_Init+0xe8>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800063e:	2204      	movs	r2, #4
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000650:	2201      	movs	r2, #1
 8000652:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800065e:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800066e:	2201      	movs	r2, #1
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000682:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000684:	f000 fe3e 	bl	8001304 <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800068e:	f000 f997 	bl	80009c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800069e:	f001 fd79 	bl	8002194 <HAL_ADCEx_MultiModeConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 f98a 	bl	80009c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_ADC1_Init+0xec>)
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b8:	237f      	movs	r3, #127	@ 0x7f
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006bc:	2304      	movs	r3, #4
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 80006ca:	f001 f831 	bl	8001730 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006d4:	f000 f974 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000028 	.word	0x20000028
 80006e4:	50040000 	.word	0x50040000
 80006e8:	14f00020 	.word	0x14f00020

080006ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	@ 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 ffb4 	bl	8005666 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f001 ff06 	bl	8002516 <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 f956 	bl	80009c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000718:	2304      	movs	r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f001 fffe 	bl	8002730 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f941 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d4 	.word	0x200000d4
 800074c:	40007400 	.word	0x40007400

08000750 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <MX_TIM6_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000768:	224f      	movs	r2, #79	@ 0x4f
 800076a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000774:	2231      	movs	r2, #49	@ 0x31
 8000776:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000780:	f004 f862 	bl	8004848 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800078a:	f000 f919 	bl	80009c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800078e:	2320      	movs	r3, #32
 8000790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800079c:	f004 f9ba 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007a6:	f000 f90b 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000130 	.word	0x20000130
 80007b8:	40001000 	.word	0x40001000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f004 fa10 	bl	8004c24 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8d9 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000017c 	.word	0x2000017c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_DMA_Init+0x48>)
 8000824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000826:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <MX_DMA_Init+0x48>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6493      	str	r3, [r2, #72]	@ 0x48
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <MX_DMA_Init+0x48>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200b      	movs	r0, #11
 8000840:	f001 fe33 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000844:	200b      	movs	r0, #11
 8000846:	f001 fe4c 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200d      	movs	r0, #13
 8000850:	f001 fe2b 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000854:	200d      	movs	r0, #13
 8000856:	f001 fe44 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xc4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f002 fc77 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0xc8>)
 8000902:	f002 fabf 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000906:	2320      	movs	r3, #32
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f002 fab0 	bl	8002e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <processBuffer>:

/* USER CODE BEGIN 4 */
void processBuffer(uint16_t *inBuffer, uint16_t *outBuffer, uint16_t size) {
 8000934:	b480      	push	{r7}
 8000936:	b087      	sub	sp, #28
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	4613      	mov	r3, r2
 8000940:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i < size; i++){
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e00c      	b.n	8000962 <processBuffer+0x2e>
		outBuffer[i] = inBuffer[i];
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	441a      	add	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	440b      	add	r3, r1
 8000958:	8812      	ldrh	r2, [r2, #0]
 800095a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	429a      	cmp	r2, r3
 8000968:	dbee      	blt.n	8000948 <processBuffer+0x14>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	processBuffer(&adc_buffer[0],&dac_buffer[0], BUFFER_HALFSIZE);
 8000980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000984:	4903      	ldr	r1, [pc, #12]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000988:	f7ff ffd4 	bl	8000934 <processBuffer>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200011a4 	.word	0x200011a4
 8000998:	20000204 	.word	0x20000204

0800099c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	processBuffer(&adc_buffer[BUFFER_HALFSIZE],&dac_buffer[BUFFER_HALFSIZE], BUFFER_HALFSIZE);
 80009a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a8:	4903      	ldr	r1, [pc, #12]	@ (80009b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009aa:	4804      	ldr	r0, [pc, #16]	@ (80009bc <HAL_ADC_ConvCpltCallback+0x20>)
 80009ac:	f7ff ffc2 	bl	8000934 <processBuffer>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20001974 	.word	0x20001974
 80009bc:	200009d4 	.word	0x200009d4

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ac      	sub	sp, #176	@ 0xb0
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2288      	movs	r2, #136	@ 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fe16 	bl	8005666 <memset>
  if(hadc->Instance==ADC1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b34 <HAL_ADC_MspInit+0x120>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d172      	bne.n	8000b2a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fa2b 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a80:	f7ff ff9e 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a84:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	4a2b      	ldr	r2, [pc, #172]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000a8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	4a25      	ldr	r2, [pc, #148]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa8:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <HAL_ADC_MspInit+0x124>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aba:	230b      	movs	r3, #11
 8000abc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad0:	f002 f9d8 	bl	8002e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b40 <HAL_ADC_MspInit+0x12c>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000af4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000b10:	f001 ffc0 	bl	8002a94 <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000b1a:	f7ff ff51 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000b22:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b24:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <HAL_ADC_MspInit+0x128>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b2a:	bf00      	nop
 8000b2c:	37b0      	adds	r7, #176	@ 0xb0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	50040000 	.word	0x50040000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	40020008 	.word	0x40020008

08000b44 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a2b      	ldr	r2, [pc, #172]	@ (8000c10 <HAL_DAC_MspInit+0xcc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d14f      	bne.n	8000c06 <HAL_DAC_MspInit+0xc2>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a24      	ldr	r2, [pc, #144]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <HAL_DAC_MspInit+0xd0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f002 f96a 	bl	8002e84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c1c <HAL_DAC_MspInit+0xd8>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bb8:	2206      	movs	r2, #6
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000be0:	2220      	movs	r2, #32
 8000be2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000bea:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bec:	f001 ff52 	bl	8002a94 <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000bf6:	f7ff fee3 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <HAL_DAC_MspInit+0xd4>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40007400 	.word	0x40007400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	200000e8 	.word	0x200000e8
 8000c1c:	40020030 	.word	0x40020030

08000c20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_TIM_Base_MspInit+0x38>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10b      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40001000 	.word	0x40001000
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ac      	sub	sp, #176	@ 0xb0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2288      	movs	r2, #136	@ 0x88
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fcf0 	bl	8005666 <memset>
  if(huart->Instance==USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <HAL_UART_MspInit+0xb0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d13b      	bne.n	8000d08 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f917 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca8:	f7ff fe8a 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb0:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0xb4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d04:	f002 f8be 	bl	8002e84 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d08:	bf00      	nop
 8000d0a:	37b0      	adds	r7, #176	@ 0xb0
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f8af 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <DMA1_Channel1_IRQHandler+0x10>)
 8000d7e:	f001 ffa1 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000008c 	.word	0x2000008c

08000d8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DMA1_Channel3_IRQHandler+0x10>)
 8000d92:	f001 ff97 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000e8 	.word	0x200000e8

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f004 fc41 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fb7d 	bl	80004f4 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	08005730 	.word	0x08005730
  ldr r2, =_sbss
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e10:	20002148 	.word	0x20002148

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_Init+0x3c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <HAL_Init+0x3c>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f001 fb30 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f80f 	bl	8000e58 <HAL_InitTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	e001      	b.n	8000e4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e46:	f7ff fdc1 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_InitTick+0x6c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d023      	beq.n	8000eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_InitTick+0x70>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fb3b 	bl	80024fe <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10f      	bne.n	8000eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d809      	bhi.n	8000ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e9c:	f001 fb05 	bl	80024aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_InitTick+0x74>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e004      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e001      	b.n	8000eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20002144 	.word	0x20002144

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002144 	.word	0x20002144

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	609a      	str	r2, [r3, #8]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	609a      	str	r2, [r3, #8]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3360      	adds	r3, #96	@ 0x60
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <LL_ADC_SetOffset+0x44>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ff8:	bf00      	nop
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	03fff000 	.word	0x03fff000

08001008 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3360      	adds	r3, #96	@ 0x60
 8001016:	461a      	mov	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3360      	adds	r3, #96	@ 0x60
 8001044:	461a      	mov	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3330      	adds	r3, #48	@ 0x30
 80010a0:	461a      	mov	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	211f      	movs	r1, #31
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	0e9b      	lsrs	r3, r3, #26
 80010c8:	f003 011f 	and.w	r1, r3, #31
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3314      	adds	r3, #20
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0e5b      	lsrs	r3, r3, #25
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	0d1b      	lsrs	r3, r3, #20
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	2107      	movs	r1, #7
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	401a      	ands	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	0d1b      	lsrs	r3, r3, #20
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0318 	and.w	r3, r3, #24
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001164:	40d9      	lsrs	r1, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	400b      	ands	r3, r1
 800116a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800116e:	431a      	orrs	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	0007ffff 	.word	0x0007ffff

08001188 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 031f 	and.w	r3, r3, #31
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001204:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800122c:	d101      	bne.n	8001232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <LL_ADC_IsEnabled+0x18>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <LL_ADC_IsEnabled+0x1a>
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800129e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a2:	f043 0204 	orr.w	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d101      	bne.n	80012ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d101      	bne.n	80012f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e130      	b.n	8001580 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d109      	bne.n	8001340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fb71 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff3f 	bl	80011c8 <LL_ADC_IsDeepPowerDownEnabled>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff25 	bl	80011a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff5a 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d115      	bne.n	8001396 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff3e 	bl	80011f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001374:	4b84      	ldr	r3, [pc, #528]	@ (8001588 <HAL_ADC_Init+0x284>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	4a84      	ldr	r2, [pc, #528]	@ (800158c <HAL_ADC_Init+0x288>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	3301      	adds	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3b01      	subs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff3c 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10d      	bne.n	80013c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff75 	bl	80012b6 <LL_ADC_REG_IsConversionOngoing>
 80013cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80c9 	bne.w	800156e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80c5 	bne.w	800156e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013ec:	f043 0202 	orr.w	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff35 	bl	8001268 <LL_ADC_IsEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d115      	bne.n	8001430 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001404:	4862      	ldr	r0, [pc, #392]	@ (8001590 <HAL_ADC_Init+0x28c>)
 8001406:	f7ff ff2f 	bl	8001268 <LL_ADC_IsEnabled>
 800140a:	4604      	mov	r4, r0
 800140c:	4861      	ldr	r0, [pc, #388]	@ (8001594 <HAL_ADC_Init+0x290>)
 800140e:	f7ff ff2b 	bl	8001268 <LL_ADC_IsEnabled>
 8001412:	4603      	mov	r3, r0
 8001414:	431c      	orrs	r4, r3
 8001416:	4860      	ldr	r0, [pc, #384]	@ (8001598 <HAL_ADC_Init+0x294>)
 8001418:	f7ff ff26 	bl	8001268 <LL_ADC_IsEnabled>
 800141c:	4603      	mov	r3, r0
 800141e:	4323      	orrs	r3, r4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4619      	mov	r1, r3
 800142a:	485c      	ldr	r0, [pc, #368]	@ (800159c <HAL_ADC_Init+0x298>)
 800142c:	f7ff fd94 	bl	8000f58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e5b      	ldrb	r3, [r3, #25]
 8001434:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800143a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001440:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001446:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d106      	bne.n	800146c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	3b01      	subs	r3, #1
 8001464:	045b      	lsls	r3, r3, #17
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	2b00      	cmp	r3, #0
 8001472:	d009      	beq.n	8001488 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001478:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001480:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_ADC_Init+0x29c>)
 8001490:	4013      	ands	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	430b      	orrs	r3, r1
 800149a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff1b 	bl	80012dc <LL_ADC_INJ_IsConversionOngoing>
 80014a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13d      	bne.n	800152a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d13a      	bne.n	800152a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014d0:	f023 0302 	bic.w	r3, r3, #2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	69b9      	ldr	r1, [r7, #24]
 80014da:	430b      	orrs	r3, r1
 80014dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d118      	bne.n	800151a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001504:	4311      	orrs	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800150a:	430a      	orrs	r2, r1
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	e007      	b.n	800152a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10c      	bne.n	800154c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	f023 010f 	bic.w	r1, r3, #15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30
 800154a:	e007      	b.n	800155c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 020f 	bic.w	r2, r2, #15
 800155a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001560:	f023 0303 	bic.w	r3, r3, #3
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	@ 0x54
 800156c:	e007      	b.n	800157e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001572:	f043 0210 	orr.w	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800157e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3724      	adds	r7, #36	@ 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	053e2d63 	.word	0x053e2d63
 8001590:	50040000 	.word	0x50040000
 8001594:	50040100 	.word	0x50040100
 8001598:	50040200 	.word	0x50040200
 800159c:	50040300 	.word	0x50040300
 80015a0:	fff0c007 	.word	0xfff0c007

080015a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b0:	4853      	ldr	r0, [pc, #332]	@ (8001700 <HAL_ADC_Start_DMA+0x15c>)
 80015b2:	f7ff fde9 	bl	8001188 <LL_ADC_GetMultimode>
 80015b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe7a 	bl	80012b6 <LL_ADC_REG_IsConversionOngoing>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 8093 	bne.w	80016f0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x34>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e08e      	b.n	80016f6 <HAL_ADC_Start_DMA+0x152>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a47      	ldr	r2, [pc, #284]	@ (8001704 <HAL_ADC_Start_DMA+0x160>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d008      	beq.n	80015fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d002      	beq.n	80015fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b09      	cmp	r3, #9
 80015fa:	d172      	bne.n	80016e2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fc89 	bl	8001f14 <ADC_Enable>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d165      	bne.n	80016d8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HAL_ADC_Start_DMA+0x164>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d002      	beq.n	8001630 <HAL_ADC_Start_DMA+0x8c>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	e000      	b.n	8001632 <HAL_ADC_Start_DMA+0x8e>
 8001630:	4b36      	ldr	r3, [pc, #216]	@ (800170c <HAL_ADC_Start_DMA+0x168>)
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4293      	cmp	r3, r2
 8001638:	d002      	beq.n	8001640 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	659a      	str	r2, [r3, #88]	@ 0x58
 8001664:	e002      	b.n	800166c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001670:	4a27      	ldr	r2, [pc, #156]	@ (8001710 <HAL_ADC_Start_DMA+0x16c>)
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <HAL_ADC_Start_DMA+0x170>)
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	4a25      	ldr	r2, [pc, #148]	@ (8001718 <HAL_ADC_Start_DMA+0x174>)
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	221c      	movs	r2, #28
 800168a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3340      	adds	r3, #64	@ 0x40
 80016be:	4619      	mov	r1, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f001 fa9e 	bl	8002c04 <HAL_DMA_Start_IT>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fddc 	bl	800128e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016d6:	e00d      	b.n	80016f4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80016e0:	e008      	b.n	80016f4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016ee:	e001      	b.n	80016f4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	50040300 	.word	0x50040300
 8001704:	50040200 	.word	0x50040200
 8001708:	50040100 	.word	0x50040100
 800170c:	50040000 	.word	0x50040000
 8001710:	08002021 	.word	0x08002021
 8001714:	080020f9 	.word	0x080020f9
 8001718:	08002115 	.word	0x08002115

0800171c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0b6      	sub	sp, #216	@ 0xd8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x22>
 800174e:	2302      	movs	r3, #2
 8001750:	e3c9      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x7b6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fda9 	bl	80012b6 <LL_ADC_REG_IsConversionOngoing>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 83aa 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3b02      	subs	r3, #2
 8001782:	2b03      	cmp	r3, #3
 8001784:	d81b      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x8e>
 8001786:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <HAL_ADC_ConfigChannel+0x5c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017a5 	.word	0x080017a5
 8001794:	080017ad 	.word	0x080017ad
 8001798:	080017b5 	.word	0x080017b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017a2:	e010      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017a4:	2312      	movs	r3, #18
 80017a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017aa:	e00c      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017ac:	2318      	movs	r3, #24
 80017ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017b2:	e008      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017bc:	e003      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80017d4:	f7ff fc5c 	bl	8001090 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fd6a 	bl	80012b6 <LL_ADC_REG_IsConversionOngoing>
 80017e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd76 	bl	80012dc <LL_ADC_INJ_IsConversionOngoing>
 80017f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 81a4 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 819f 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	461a      	mov	r2, r3
 8001816:	f7ff fc67 	bl	80010e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00a      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6919      	ldr	r1, [r3, #16]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800184c:	f7ff fbb8 	bl	8000fc0 <LL_ADC_SetOffset>
 8001850:	e179      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fbd5 	bl	8001008 <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_ADC_ConfigChannel+0x14e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fbca 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	e01e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x18c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fbbf 	bl	8001008 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800189c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80018b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1a4>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	e018      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80018e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80018f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001906:	429a      	cmp	r2, r3
 8001908:	d106      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb8e 	bl	8001034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fb72 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x214>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fb67 	bl	8001008 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	e01e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x252>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb5c 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800196a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_ConfigChannel+0x26a>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	e018      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80019b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80019c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb2b 	bl	8001034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb0f 	bl	8001008 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x2da>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb04 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	e01e      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x318>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff faf9 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x330>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	e014      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff facc 	bl	8001034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fab0 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x398>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff faa5 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e017      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x3c8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa9a 	bl	8001008 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ae2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x3e0>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b20:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fa77 	bl	8001034 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fb8c 	bl	8001268 <LL_ADC_IsEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8140 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff faeb 	bl	8001140 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001dac <HAL_ADC_ConfigChannel+0x67c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 8131 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x46e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	bf94      	ite	ls
 8001b96:	2301      	movls	r3, #1
 8001b98:	2300      	movhi	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x4a2>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d079      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x4c2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	3301      	adds	r3, #1
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf0:	e015      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x4ee>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	069b      	lsls	r3, r3, #26
 8001c1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x50e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	e017      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x53e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x564>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x596>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	e081      	b.n	8001dce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x5b6>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce4:	e015      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x5e2>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e003      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x602>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	e017      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x632>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x65e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x69c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e006      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x688>
 8001daa:	bf00      	nop
 8001dac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff f988 	bl	80010e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d07a      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	4843      	ldr	r0, [pc, #268]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001de6:	f7ff f8dd 	bl	8000fa4 <LL_ADC_GetCommonPathInternalCh>
 8001dea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a41      	ldr	r2, [pc, #260]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d12c      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d126      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3c      	ldr	r2, [pc, #240]	@ (8001efc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x6e8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3b      	ldr	r2, [pc, #236]	@ (8001f00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d15d      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e20:	4619      	mov	r1, r3
 8001e22:	4834      	ldr	r0, [pc, #208]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e24:	f7ff f8ab 	bl	8000f7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e42:	e002      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e50:	e040      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d118      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x74c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12d      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e84:	4619      	mov	r1, r3
 8001e86:	481b      	ldr	r0, [pc, #108]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e88:	f7ff f879 	bl	8000f7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e8c:	e024      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d120      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11a      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_ADC_ConfigChannel+0x7cc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d115      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001eba:	f7ff f860 	bl	8000f7e <LL_ADC_SetCommonPathInternalCh>
 8001ebe:	e00c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	f043 0220 	orr.w	r2, r3, #32
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001ed2:	e002      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed4:	bf00      	nop
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	37d8      	adds	r7, #216	@ 0xd8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	80080000 	.word	0x80080000
 8001ef4:	50040300 	.word	0x50040300
 8001ef8:	c7520000 	.word	0xc7520000
 8001efc:	50040000 	.word	0x50040000
 8001f00:	50040200 	.word	0x50040200
 8001f04:	20000000 	.word	0x20000000
 8001f08:	053e2d63 	.word	0x053e2d63
 8001f0c:	cb840000 	.word	0xcb840000
 8001f10:	80000001 	.word	0x80000001

08001f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f99f 	bl	8001268 <LL_ADC_IsEnabled>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d169      	bne.n	8002004 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <ADC_Enable+0xfc>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e055      	b.n	8002006 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f96e 	bl	8001240 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f64:	482b      	ldr	r0, [pc, #172]	@ (8002014 <ADC_Enable+0x100>)
 8001f66:	f7ff f81d 	bl	8000fa4 <LL_ADC_GetCommonPathInternalCh>
 8001f6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f74:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <ADC_Enable+0x104>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	4a28      	ldr	r2, [pc, #160]	@ (800201c <ADC_Enable+0x108>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f8e:	e002      	b.n	8001f96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe ffac 	bl	8000ef8 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa2:	e028      	b.n	8001ff6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f95d 	bl	8001268 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f941 	bl	8001240 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fbe:	f7fe ff9b 	bl	8000ef8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d914      	bls.n	8001ff6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d00d      	beq.n	8001ff6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d1cf      	bne.n	8001fa4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	8000003f 	.word	0x8000003f
 8002014:	50040300 	.word	0x50040300
 8002018:	20000000 	.word	0x20000000
 800201c:	053e2d63 	.word	0x053e2d63

08002020 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002036:	2b00      	cmp	r3, #0
 8002038:	d14b      	bne.n	80020d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d021      	beq.n	8002098 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f806 	bl	800106a <LL_ADC_REG_IsTriggerSourceSWStart>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d032      	beq.n	80020ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12b      	bne.n	80020ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002076:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11f      	bne.n	80020ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
 8002096:	e018      	b.n	80020ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d111      	bne.n	80020ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7fe fc66 	bl	800099c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020d0:	e00e      	b.n	80020f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fb1c 	bl	800171c <HAL_ADC_ErrorCallback>
}
 80020e4:	e004      	b.n	80020f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7fe fc36 	bl	8000978 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff faee 	bl	800171c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <LL_ADC_IsEnabled>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <LL_ADC_IsEnabled+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_IsEnabled+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_REG_IsConversionOngoing>:
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d101      	bne.n	8002186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b09f      	sub	sp, #124	@ 0x7c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e093      	b.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021ba:	2300      	movs	r3, #0
 80021bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021be:	2300      	movs	r3, #0
 80021c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021cc:	4b46      	ldr	r3, [pc, #280]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	e001      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e072      	b.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffb9 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 80021fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ffb3 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d154      	bne.n	80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800220e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002210:	2b00      	cmp	r3, #0
 8002212:	d151      	bne.n	80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002214:	4b35      	ldr	r3, [pc, #212]	@ (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002216:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02c      	beq.n	800227a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002232:	035b      	lsls	r3, r3, #13
 8002234:	430b      	orrs	r3, r1
 8002236:	431a      	orrs	r2, r3
 8002238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800223a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800223c:	4829      	ldr	r0, [pc, #164]	@ (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800223e:	f7ff ff83 	bl	8002148 <LL_ADC_IsEnabled>
 8002242:	4604      	mov	r4, r0
 8002244:	4828      	ldr	r0, [pc, #160]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002246:	f7ff ff7f 	bl	8002148 <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	431c      	orrs	r4, r3
 800224e:	4828      	ldr	r0, [pc, #160]	@ (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002250:	f7ff ff7a 	bl	8002148 <LL_ADC_IsEnabled>
 8002254:	4603      	mov	r3, r0
 8002256:	4323      	orrs	r3, r4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d137      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800225c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002264:	f023 030f 	bic.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	6811      	ldr	r1, [r2, #0]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	6892      	ldr	r2, [r2, #8]
 8002270:	430a      	orrs	r2, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002276:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002278:	e028      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800227a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002284:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002286:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002288:	f7ff ff5e 	bl	8002148 <LL_ADC_IsEnabled>
 800228c:	4604      	mov	r4, r0
 800228e:	4816      	ldr	r0, [pc, #88]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002290:	f7ff ff5a 	bl	8002148 <LL_ADC_IsEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	431c      	orrs	r4, r3
 8002298:	4815      	ldr	r0, [pc, #84]	@ (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800229a:	f7ff ff55 	bl	8002148 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	4323      	orrs	r3, r4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d112      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022ae:	f023 030f 	bic.w	r3, r3, #15
 80022b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022b6:	e009      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80022ca:	e000      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80022da:	4618      	mov	r0, r3
 80022dc:	377c      	adds	r7, #124	@ 0x7c
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	50040000 	.word	0x50040000
 80022e8:	50040100 	.word	0x50040100
 80022ec:	50040300 	.word	0x50040300
 80022f0:	50040200 	.word	0x50040200

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e014      	b.n	8002552 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe fb03 	bl	8000b44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	795b      	ldrb	r3, [r3, #5]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_DAC_Start_DMA+0x1e>
 8002576:	2302      	movs	r3, #2
 8002578:	e0ab      	b.n	80026d2 <HAL_DAC_Start_DMA+0x176>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2202      	movs	r2, #2
 8002584:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d12f      	bne.n	80025ec <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_DAC_Start_DMA+0x180>)
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_DAC_Start_DMA+0x184>)
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_DAC_Start_DMA+0x188>)
 80025a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d013      	beq.n	80025e2 <HAL_DAC_Start_DMA+0x86>
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d845      	bhi.n	800264c <HAL_DAC_Start_DMA+0xf0>
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_DAC_Start_DMA+0x72>
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d005      	beq.n	80025d8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80025cc:	e03e      	b.n	800264c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3308      	adds	r3, #8
 80025d4:	613b      	str	r3, [r7, #16]
        break;
 80025d6:	e03c      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	613b      	str	r3, [r7, #16]
        break;
 80025e0:	e037      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3310      	adds	r3, #16
 80025e8:	613b      	str	r3, [r7, #16]
        break;
 80025ea:	e032      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a3d      	ldr	r2, [pc, #244]	@ (80026e8 <HAL_DAC_Start_DMA+0x18c>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a3c      	ldr	r2, [pc, #240]	@ (80026ec <HAL_DAC_Start_DMA+0x190>)
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_DAC_Start_DMA+0x194>)
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002612:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d013      	beq.n	8002642 <HAL_DAC_Start_DMA+0xe6>
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d817      	bhi.n	8002650 <HAL_DAC_Start_DMA+0xf4>
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DAC_Start_DMA+0xd2>
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d005      	beq.n	8002638 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800262c:	e010      	b.n	8002650 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3314      	adds	r3, #20
 8002634:	613b      	str	r3, [r7, #16]
        break;
 8002636:	e00c      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3318      	adds	r3, #24
 800263e:	613b      	str	r3, [r7, #16]
        break;
 8002640:	e007      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	331c      	adds	r3, #28
 8002648:	613b      	str	r3, [r7, #16]
        break;
 800264a:	e002      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002650:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002666:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6898      	ldr	r0, [r3, #8]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	f000 fac7 	bl	8002c04 <HAL_DMA_Start_IT>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
 800267a:	e010      	b.n	800269e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800268a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68d8      	ldr	r0, [r3, #12]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	f000 fab5 	bl	8002c04 <HAL_DMA_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e005      	b.n	80026d0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	0800297f 	.word	0x0800297f
 80026e0:	080029a1 	.word	0x080029a1
 80026e4:	080029bd 	.word	0x080029bd
 80026e8:	08002a27 	.word	0x08002a27
 80026ec:	08002a49 	.word	0x08002a49
 80026f0:	08002a65 	.word	0x08002a65

080026f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	795b      	ldrb	r3, [r3, #5]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_DAC_ConfigChannel+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e114      	b.n	8002976 <HAL_DAC_ConfigChannel+0x246>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b04      	cmp	r3, #4
 800275e:	f040 8081 	bne.w	8002864 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002762:	f7fe fbc9 	bl	8000ef8 <HAL_GetTick>
 8002766:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d140      	bne.n	80027f0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800276e:	e018      	b.n	80027a2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002770:	f7fe fbc2 	bl	8000ef8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d911      	bls.n	80027a2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f043 0208 	orr.w	r2, r3, #8
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2203      	movs	r2, #3
 800279c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0e9      	b.n	8002976 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1df      	bne.n	8002770 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7fe fbad 	bl	8000f10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	6992      	ldr	r2, [r2, #24]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
 80027c0:	e023      	b.n	800280a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027c2:	f7fe fb99 	bl	8000ef8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d90f      	bls.n	80027f0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da0a      	bge.n	80027f0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f043 0208 	orr.w	r2, r3, #8
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2203      	movs	r2, #3
 80027ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0c2      	b.n	8002976 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	dbe3      	blt.n	80027c2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe fb88 	bl	8000f10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	6992      	ldr	r2, [r2, #24]
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	ea02 0103 	and.w	r1, r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	21ff      	movs	r1, #255	@ 0xff
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	ea02 0103 	and.w	r1, r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d11d      	bne.n	80028a8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	221f      	movs	r2, #31
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2207      	movs	r2, #7
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43da      	mvns	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	22c0      	movs	r2, #192	@ 0xc0
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff feb1 	bl	80026f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	711a      	strb	r2, [r3, #4]
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff feaa 	bl	8002708 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fea0 	bl	800271c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	711a      	strb	r2, [r3, #4]
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff ffd8 	bl	80029ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	711a      	strb	r2, [r3, #4]
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff ffd1 	bl	80029fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ffc7 	bl	8002a12 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	711a      	strb	r2, [r3, #4]
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e098      	b.n	8002bd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <HAL_DMA_Init+0x150>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d80f      	bhi.n	8002ad2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <HAL_DMA_Init+0x154>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bec <HAL_DMA_Init+0x158>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a48      	ldr	r2, [pc, #288]	@ (8002bf0 <HAL_DMA_Init+0x15c>)
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad0:	e00e      	b.n	8002af0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <HAL_DMA_Init+0x160>)
 8002ada:	4413      	add	r3, r2
 8002adc:	4a43      	ldr	r2, [pc, #268]	@ (8002bec <HAL_DMA_Init+0x158>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a42      	ldr	r2, [pc, #264]	@ (8002bf8 <HAL_DMA_Init+0x164>)
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b4a:	d039      	beq.n	8002bc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_DMA_Init+0x15c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11a      	bne.n	8002b8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_DMA_Init+0x168>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f003 031c 	and.w	r3, r3, #28
 8002b62:	210f      	movs	r1, #15
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4924      	ldr	r1, [pc, #144]	@ (8002bfc <HAL_DMA_Init+0x168>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_DMA_Init+0x168>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	f003 031c 	and.w	r3, r3, #28
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	491d      	ldr	r1, [pc, #116]	@ (8002bfc <HAL_DMA_Init+0x168>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
 8002b8a:	e019      	b.n	8002bc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <HAL_DMA_Init+0x16c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b94:	f003 031c 	and.w	r3, r3, #28
 8002b98:	210f      	movs	r1, #15
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4917      	ldr	r1, [pc, #92]	@ (8002c00 <HAL_DMA_Init+0x16c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ba6:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <HAL_DMA_Init+0x16c>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f003 031c 	and.w	r3, r3, #28
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	4911      	ldr	r1, [pc, #68]	@ (8002c00 <HAL_DMA_Init+0x16c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40020407 	.word	0x40020407
 8002be8:	bffdfff8 	.word	0xbffdfff8
 8002bec:	cccccccd 	.word	0xcccccccd
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	bffdfbf8 	.word	0xbffdfbf8
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	400200a8 	.word	0x400200a8
 8002c00:	400204a8 	.word	0x400204a8

08002c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_Start_IT+0x20>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e04b      	b.n	8002cbc <HAL_DMA_Start_IT+0xb8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d13a      	bne.n	8002cae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f8e0 	bl	8002e22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 020e 	orr.w	r2, r2, #14
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00f      	b.n	8002c9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 020a 	orr.w	r2, r2, #10
 8002c9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e005      	b.n	8002cba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	f003 031c 	and.w	r3, r3, #28
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d026      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x7a>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2104      	movs	r1, #4
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d071      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d3c:	e06c      	b.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f003 031c 	and.w	r3, r3, #28
 8002d46:	2202      	movs	r2, #2
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xec>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d029      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 020a 	bic.w	r2, r2, #10
 8002d78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 021c 	and.w	r2, r3, #28
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2102      	movs	r1, #2
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d038      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002dae:	e033      	b.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f003 031c 	and.w	r3, r3, #28
 8002db8:	2208      	movs	r2, #8
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02a      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d025      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020e 	bic.w	r2, r2, #14
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
}
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	f003 021c 	and.w	r2, r3, #28
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d108      	bne.n	8002e66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e64:	e007      	b.n	8002e76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	e17f      	b.n	8003194 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8171 	beq.w	800318e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <HAL_GPIO_Init+0x40>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d118      	bne.n	8002f64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0201 	and.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d017      	beq.n	8002fa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d123      	bne.n	8002ff4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ac 	beq.w	800318e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <HAL_GPIO_Init+0x330>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	4a5e      	ldr	r2, [pc, #376]	@ (80031b4 <HAL_GPIO_Init+0x330>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6613      	str	r3, [r2, #96]	@ 0x60
 8003042:	4b5c      	ldr	r3, [pc, #368]	@ (80031b4 <HAL_GPIO_Init+0x330>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304e:	4a5a      	ldr	r2, [pc, #360]	@ (80031b8 <HAL_GPIO_Init+0x334>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x242>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	@ (80031bc <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x23e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4e      	ldr	r2, [pc, #312]	@ (80031c0 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x23a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4d      	ldr	r2, [pc, #308]	@ (80031c4 <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x236>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4c      	ldr	r2, [pc, #304]	@ (80031c8 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x232>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4b      	ldr	r2, [pc, #300]	@ (80031cc <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x22e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x22a>
 80030aa:	2306      	movs	r3, #6
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c6:	2300      	movs	r3, #0
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d8:	4937      	ldr	r1, [pc, #220]	@ (80031b8 <HAL_GPIO_Init+0x334>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310a:	4a32      	ldr	r2, [pc, #200]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003110:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003134:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800313a:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315e:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003188:	4a12      	ldr	r2, [pc, #72]	@ (80031d4 <HAL_GPIO_Init+0x350>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f ae78 	bne.w	8002e94 <HAL_GPIO_Init+0x10>
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010000 	.word	0x40010000
 80031bc:	48000400 	.word	0x48000400
 80031c0:	48000800 	.word	0x48000800
 80031c4:	48000c00 	.word	0x48000c00
 80031c8:	48001000 	.word	0x48001000
 80031cc:	48001400 	.word	0x48001400
 80031d0:	48001800 	.word	0x48001800
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_PWREx_GetVoltageRange+0x18>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003232:	d130      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003234:	4b23      	ldr	r3, [pc, #140]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800323c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003240:	d038      	beq.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324a:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2232      	movs	r2, #50	@ 0x32
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0c9b      	lsrs	r3, r3, #18
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003268:	e002      	b.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327c:	d102      	bne.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f2      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003290:	d110      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e00f      	b.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a2:	d007      	beq.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a4:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032ac:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000
 80032c8:	20000000 	.word	0x20000000
 80032cc:	431bde83 	.word	0x431bde83

080032d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e3ca      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e2:	4b97      	ldr	r3, [pc, #604]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ec:	4b94      	ldr	r3, [pc, #592]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80e4 	beq.w	80034cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_RCC_OscConfig+0x4a>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	f040 808b 	bne.w	8003428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 8087 	bne.w	8003428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800331a:	4b89      	ldr	r3, [pc, #548]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e3a2      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	4b82      	ldr	r3, [pc, #520]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_RCC_OscConfig+0x7c>
 8003342:	4b7f      	ldr	r3, [pc, #508]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800334a:	e005      	b.n	8003358 <HAL_RCC_OscConfig+0x88>
 800334c:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003358:	4293      	cmp	r3, r2
 800335a:	d223      	bcs.n	80033a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fd55 	bl	8003e10 <RCC_SetFlashLatencyFromMSIRange>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e383      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003370:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a72      	ldr	r2, [pc, #456]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b70      	ldr	r3, [pc, #448]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	496d      	ldr	r1, [pc, #436]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338e:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4968      	ldr	r1, [pc, #416]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
 80033a2:	e025      	b.n	80033f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a4:	4b66      	ldr	r3, [pc, #408]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a65      	ldr	r2, [pc, #404]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033aa:	f043 0308 	orr.w	r3, r3, #8
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b63      	ldr	r3, [pc, #396]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4960      	ldr	r1, [pc, #384]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	495b      	ldr	r1, [pc, #364]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd15 	bl	8003e10 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e343      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f0:	f000 fc4a 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b52      	ldr	r3, [pc, #328]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	4950      	ldr	r1, [pc, #320]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	4a4e      	ldr	r2, [pc, #312]	@ (8003548 <HAL_RCC_OscConfig+0x278>)
 800340e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003410:	4b4e      	ldr	r3, [pc, #312]	@ (800354c <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fd1f 	bl	8000e58 <HAL_InitTick>
 800341a:	4603      	mov	r3, r0
 800341c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d052      	beq.n	80034ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	e327      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003430:	4b43      	ldr	r3, [pc, #268]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800343c:	f7fd fd5c 	bl	8000ef8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003444:	f7fd fd58 	bl	8000ef8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e310      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003456:	4b3a      	ldr	r3, [pc, #232]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003462:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a36      	ldr	r2, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4931      	ldr	r1, [pc, #196]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003480:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	492c      	ldr	r1, [pc, #176]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	e01a      	b.n	80034cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003496:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a29      	ldr	r2, [pc, #164]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a2:	f7fd fd29 	bl	8000ef8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034aa:	f7fd fd25 	bl	8000ef8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e2dd      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034bc:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x1da>
 80034c8:	e000      	b.n	80034cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d074      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x21a>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d10e      	bne.n	8003502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d10b      	bne.n	8003502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d064      	beq.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d160      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e2ba      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x24a>
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0b      	ldr	r2, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e026      	b.n	8003568 <HAL_RCC_OscConfig+0x298>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003522:	d115      	bne.n	8003550 <HAL_RCC_OscConfig+0x280>
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800352a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a02      	ldr	r2, [pc, #8]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x298>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	080056d8 	.word	0x080056d8
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004
 8003550:	4ba0      	ldr	r3, [pc, #640]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a9f      	ldr	r2, [pc, #636]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b9d      	ldr	r3, [pc, #628]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a9c      	ldr	r2, [pc, #624]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fcc2 	bl	8000ef8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fd fcbe 	bl	8000ef8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e276      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358a:	4b92      	ldr	r3, [pc, #584]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x2a8>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fcae 	bl	8000ef8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fd fcaa 	bl	8000ef8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e262      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b2:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x2d0>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d060      	beq.n	8003690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x310>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d119      	bne.n	800360e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d116      	bne.n	800360e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e0:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x328>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e23f      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	4973      	ldr	r1, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	e040      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d023      	beq.n	800365e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003616:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6e      	ldr	r2, [pc, #440]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fc69 	bl	8000ef8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362a:	f7fd fc65 	bl	8000ef8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e21d      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4b65      	ldr	r3, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b62      	ldr	r3, [pc, #392]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	495f      	ldr	r1, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365e:	4b5d      	ldr	r3, [pc, #372]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd fc45 	bl	8000ef8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fd fc41 	bl	8000ef8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1f9      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003684:	4b53      	ldr	r3, [pc, #332]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03c      	beq.n	8003716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01c      	beq.n	80036de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a4:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036aa:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fc20 	bl	8000ef8 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fd fc1c 	bl	8000ef8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1d4      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ce:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCC_OscConfig+0x3ec>
 80036dc:	e01b      	b.n	8003716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	4b3d      	ldr	r3, [pc, #244]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e4:	4a3b      	ldr	r2, [pc, #236]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd fc03 	bl	8000ef8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fd fbff 	bl	8000ef8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1b7      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003708:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ef      	bne.n	80036f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003728:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003740:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003750:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d118      	bne.n	800378e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800375c:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003768:	f7fd fbc6 	bl	8000ef8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fd fbc2 	bl	8000ef8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e17a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4d8>
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a6:	e029      	b.n	80037fc <HAL_RCC_OscConfig+0x52c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_OscConfig+0x50c>
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	4a07      	ldr	r2, [pc, #28]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c0:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	4a03      	ldr	r2, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d0:	e014      	b.n	80037fc <HAL_RCC_OscConfig+0x52c>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
 80037dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a9b      	ldr	r2, [pc, #620]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b98      	ldr	r3, [pc, #608]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a97      	ldr	r2, [pc, #604]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fd fb78 	bl	8000ef8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fd fb74 	bl	8000ef8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e12a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	4b8b      	ldr	r3, [pc, #556]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ed      	beq.n	800380c <HAL_RCC_OscConfig+0x53c>
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fb61 	bl	8000ef8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fd fb5d 	bl	8000ef8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e113      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003850:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ed      	bne.n	800383a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7ffb      	ldrb	r3, [r7, #31]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b7a      	ldr	r3, [pc, #488]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	4a79      	ldr	r2, [pc, #484]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80fe 	beq.w	8003a76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	2b02      	cmp	r3, #2
 8003880:	f040 80d0 	bne.w	8003a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003884:	4b72      	ldr	r3, [pc, #456]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d130      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	3b01      	subs	r3, #1
 80038a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d127      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11f      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038c4:	2a07      	cmp	r2, #7
 80038c6:	bf14      	ite	ne
 80038c8:	2201      	movne	r2, #1
 80038ca:	2200      	moveq	r2, #0
 80038cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d113      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d06e      	beq.n	80039d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d069      	beq.n	80039d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800390c:	4b50      	ldr	r3, [pc, #320]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0ad      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800391c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a4b      	ldr	r2, [pc, #300]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003928:	f7fd fae6 	bl	8000ef8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd fae2 	bl	8000ef8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e09a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003942:	4b43      	ldr	r3, [pc, #268]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394e:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	4b40      	ldr	r3, [pc, #256]	@ (8003a54 <HAL_RCC_OscConfig+0x784>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800395e:	3a01      	subs	r2, #1
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003968:	0212      	lsls	r2, r2, #8
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	0852      	lsrs	r2, r2, #1
 8003972:	3a01      	subs	r2, #1
 8003974:	0552      	lsls	r2, r2, #21
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0652      	lsls	r2, r2, #25
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003988:	0912      	lsrs	r2, r2, #4
 800398a:	0452      	lsls	r2, r2, #17
 800398c:	430a      	orrs	r2, r1
 800398e:	4930      	ldr	r1, [pc, #192]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003994:	4b2e      	ldr	r3, [pc, #184]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ac:	f7fd faa4 	bl	8000ef8 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd faa0 	bl	8000ef8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e058      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d2:	e050      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e04f      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d148      	bne.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f0:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a16      	ldr	r2, [pc, #88]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fc:	f7fd fa7c 	bl	8000ef8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fa78 	bl	8000ef8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e030      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x734>
 8003a22:	e028      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a08      	ldr	r2, [pc, #32]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fa5f 	bl	8000ef8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fa5b 	bl	8000ef8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d905      	bls.n	8003a58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e013      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ec      	bne.n	8003a3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a64:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	4905      	ldr	r1, [pc, #20]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_OscConfig+0x7b4>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60cb      	str	r3, [r1, #12]
 8003a70:	e001      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	feeefffc 	.word	0xfeeefffc

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0e7      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b75      	ldr	r3, [pc, #468]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b72      	ldr	r3, [pc, #456]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4970      	ldr	r1, [pc, #448]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b6e      	ldr	r3, [pc, #440]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0cf      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d908      	bls.n	8003afa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4960      	ldr	r1, [pc, #384]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d04c      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d121      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0a6      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b26:	4b54      	ldr	r3, [pc, #336]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e09a      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e08e      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e086      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4943      	ldr	r1, [pc, #268]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd f9c2 	bl	8000ef8 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fd f9be 	bl	8000ef8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e06e      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d208      	bcs.n	8003bce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	492b      	ldr	r1, [pc, #172]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bce:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d210      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 0207 	bic.w	r2, r3, #7
 8003be4:	4923      	ldr	r1, [pc, #140]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bec:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e036      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4918      	ldr	r1, [pc, #96]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4910      	ldr	r1, [pc, #64]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3c:	f000 f824 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	490b      	ldr	r1, [pc, #44]	@ (8003c7c <HAL_RCC_ClockConfig+0x1f4>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1f8>)
 8003c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1fc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd f8f9 	bl	8000e58 <HAL_InitTick>
 8003c66:	4603      	mov	r3, r0
 8003c68:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080056d8 	.word	0x080056d8
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c96:	4b3e      	ldr	r3, [pc, #248]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d121      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d11e      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cbc:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d00:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	e004      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d0c:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d134      	bne.n	8003d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d16:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xac>
 8003d2c:	e005      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d30:	617b      	str	r3, [r7, #20]
      break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d36:	617b      	str	r3, [r7, #20]
      break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d40:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	fb03 f202 	mul.w	r2, r3, r2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	0e5b      	lsrs	r3, r3, #25
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	3301      	adds	r3, #1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d80:	69bb      	ldr	r3, [r7, #24]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	080056f0 	.word	0x080056f0
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000000 	.word	0x20000000

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	080056e8 	.word	0x080056e8

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de8:	f7ff ffda 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0adb      	lsrs	r3, r3, #11
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	080056e8 	.word	0x080056e8

08003e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e28:	f7ff f9ee 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003e2c:	6178      	str	r0, [r7, #20]
 8003e2e:	e014      	b.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	4a24      	ldr	r2, [pc, #144]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3c:	4b22      	ldr	r3, [pc, #136]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e48:	f7ff f9de 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e60:	d10b      	bne.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b80      	cmp	r3, #128	@ 0x80
 8003e66:	d919      	bls.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e6c:	d902      	bls.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6e:	2302      	movs	r3, #2
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e013      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e74:	2301      	movs	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	e010      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d902      	bls.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e80:	2303      	movs	r3, #3
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e00a      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d102      	bne.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	e004      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d101      	bne.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0207 	bic.w	r2, r3, #7
 8003ea4:	4909      	ldr	r1, [pc, #36]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eac:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40022000 	.word	0x40022000

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003edc:	2300      	movs	r3, #0
 8003ede:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d041      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ef4:	d02a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003efa:	d824      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003efc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f00:	d008      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f06:	d81e      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f10:	d010      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f12:	e018      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f14:	4b86      	ldr	r3, [pc, #536]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a85      	ldr	r2, [pc, #532]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f20:	e015      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fabb 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f32:	e00c      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3320      	adds	r3, #32
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fba6 	bl	800468c <RCCEx_PLLSAI2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	74fb      	strb	r3, [r7, #19]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f54:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f62:	4973      	ldr	r1, [pc, #460]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d041      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f84:	d02a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f96:	d81e      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa4:	4b62      	ldr	r3, [pc, #392]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb0:	e015      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fa73 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc2:	e00c      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3320      	adds	r3, #32
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb5e 	bl	800468c <RCCEx_PLLSAI2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe4:	4b52      	ldr	r3, [pc, #328]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff2:	494f      	ldr	r1, [pc, #316]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ffa:	e001      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80a0 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	4a40      	ldr	r2, [pc, #256]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004032:	6593      	str	r3, [r2, #88]	@ 0x58
 8004034:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004040:	2301      	movs	r3, #1
 8004042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3a      	ldr	r2, [pc, #232]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004050:	f7fc ff52 	bl	8000ef8 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fc ff4e 	bl	8000ef8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	74fb      	strb	r3, [r7, #19]
        break;
 800406a:	e005      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406c:	4b31      	ldr	r3, [pc, #196]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ef      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d15c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407e:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	429a      	cmp	r2, r3
 800409a:	d019      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	4a1c      	ldr	r2, [pc, #112]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fc ff0d 	bl	8000ef8 <HAL_GetTick>
 80040de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e0:	e00b      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fc ff09 	bl	8000ef8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d902      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	74fb      	strb	r3, [r7, #19]
            break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ec      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411e:	4904      	ldr	r1, [pc, #16]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004126:	e009      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b9e      	ldr	r3, [pc, #632]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	4a9d      	ldr	r2, [pc, #628]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4b98      	ldr	r3, [pc, #608]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	4994      	ldr	r1, [pc, #592]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b8f      	ldr	r3, [pc, #572]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	498c      	ldr	r1, [pc, #560]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b87      	ldr	r3, [pc, #540]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	4983      	ldr	r1, [pc, #524]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b7e      	ldr	r3, [pc, #504]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	497b      	ldr	r1, [pc, #492]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f0:	4972      	ldr	r1, [pc, #456]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004204:	4b6d      	ldr	r3, [pc, #436]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004212:	496a      	ldr	r1, [pc, #424]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	4961      	ldr	r1, [pc, #388]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004248:	4b5c      	ldr	r3, [pc, #368]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	4959      	ldr	r1, [pc, #356]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426a:	4b54      	ldr	r3, [pc, #336]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004278:	4950      	ldr	r1, [pc, #320]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800428c:	4b4b      	ldr	r3, [pc, #300]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	4948      	ldr	r1, [pc, #288]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ae:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	493f      	ldr	r1, [pc, #252]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d028      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d0:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042de:	4937      	ldr	r1, [pc, #220]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ee:	d106      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b32      	ldr	r3, [pc, #200]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a31      	ldr	r2, [pc, #196]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	e011      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004306:	d10c      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f8c8 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800432e:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	491f      	ldr	r1, [pc, #124]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800434c:	d106      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434e:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004358:	60d3      	str	r3, [r2, #12]
 800435a:	e011      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f899 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	4908      	ldr	r1, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043aa:	d109      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a02      	ldr	r2, [pc, #8]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e014      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f867 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02f      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043fe:	4928      	ldr	r1, [pc, #160]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800440e:	d10d      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f844 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d014      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3320      	adds	r3, #32
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f925 	bl	800468c <RCCEx_PLLSAI2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800445c:	4b10      	ldr	r3, [pc, #64]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446a:	490d      	ldr	r1, [pc, #52]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447e:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	4904      	ldr	r1, [pc, #16]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004496:	7cbb      	ldrb	r3, [r7, #18]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000

080044a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b2:	4b75      	ldr	r3, [pc, #468]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0203 	and.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d10d      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
       ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
       ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d047      	beq.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e044      	b.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d018      	beq.n	800452a <RCCEx_PLLSAI1_Config+0x86>
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d825      	bhi.n	8004548 <RCCEx_PLLSAI1_Config+0xa4>
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d002      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0x62>
 8004500:	2b02      	cmp	r3, #2
 8004502:	d009      	beq.n	8004518 <RCCEx_PLLSAI1_Config+0x74>
 8004504:	e020      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004506:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11d      	bne.n	800454e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004516:	e01a      	b.n	800454e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004518:	4b5b      	ldr	r3, [pc, #364]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004528:	e013      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452a:	4b57      	ldr	r3, [pc, #348]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004536:	4b54      	ldr	r3, [pc, #336]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004546:	e006      	b.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      break;
 800454c:	e004      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004556:	bf00      	nop
    }

    if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800455e:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	430b      	orrs	r3, r1
 8004574:	4944      	ldr	r1, [pc, #272]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d17d      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004580:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a40      	ldr	r2, [pc, #256]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fc fcb4 	bl	8000ef8 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fc fcb0 	bl	8000ef8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
        break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a8:	4b37      	ldr	r3, [pc, #220]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ef      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d160      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c0:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6892      	ldr	r2, [r2, #8]
 80045d0:	0211      	lsls	r1, r2, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68d2      	ldr	r2, [r2, #12]
 80045d6:	0912      	lsrs	r2, r2, #4
 80045d8:	0452      	lsls	r2, r2, #17
 80045da:	430a      	orrs	r2, r1
 80045dc:	492a      	ldr	r1, [pc, #168]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	610b      	str	r3, [r1, #16]
 80045e2:	e027      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d112      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ea:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	0211      	lsls	r1, r2, #8
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6912      	ldr	r2, [r2, #16]
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	3a01      	subs	r2, #1
 8004604:	0552      	lsls	r2, r2, #21
 8004606:	430a      	orrs	r2, r1
 8004608:	491f      	ldr	r1, [pc, #124]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
 800460e:	e011      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6892      	ldr	r2, [r2, #8]
 8004620:	0211      	lsls	r1, r2, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6952      	ldr	r2, [r2, #20]
 8004626:	0852      	lsrs	r2, r2, #1
 8004628:	3a01      	subs	r2, #1
 800462a:	0652      	lsls	r2, r2, #25
 800462c:	430a      	orrs	r2, r1
 800462e:	4916      	ldr	r1, [pc, #88]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800463e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc fc5a 	bl	8000ef8 <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004648:	f7fc fc56 	bl	8000ef8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
          break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ef      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	4904      	ldr	r1, [pc, #16]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000

0800468c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800469a:	4b6a      	ldr	r3, [pc, #424]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046a6:	4b67      	ldr	r3, [pc, #412]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0203 	and.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d10d      	bne.n	80046d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
       ||
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046be:	4b61      	ldr	r3, [pc, #388]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
       ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d047      	beq.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e044      	b.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d018      	beq.n	8004712 <RCCEx_PLLSAI2_Config+0x86>
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d825      	bhi.n	8004730 <RCCEx_PLLSAI2_Config+0xa4>
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d002      	beq.n	80046ee <RCCEx_PLLSAI2_Config+0x62>
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d009      	beq.n	8004700 <RCCEx_PLLSAI2_Config+0x74>
 80046ec:	e020      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ee:	4b55      	ldr	r3, [pc, #340]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11d      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fe:	e01a      	b.n	8004736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004700:	4b50      	ldr	r3, [pc, #320]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e013      	b.n	800473a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004712:	4b4c      	ldr	r3, [pc, #304]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471e:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800472e:	e006      	b.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      break;
 8004734:	e004      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004746:	4b3f      	ldr	r3, [pc, #252]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	430b      	orrs	r3, r1
 800475c:	4939      	ldr	r1, [pc, #228]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d167      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a35      	ldr	r2, [pc, #212]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004774:	f7fc fbc0 	bl	8000ef8 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800477a:	e009      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800477c:	f7fc fbbc 	bl	8000ef8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d902      	bls.n	8004790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	73fb      	strb	r3, [r7, #15]
        break;
 800478e:	e005      	b.n	800479c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004790:	4b2c      	ldr	r3, [pc, #176]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ef      	bne.n	800477c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d14a      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d111      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a8:	4b26      	ldr	r3, [pc, #152]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	0211      	lsls	r1, r2, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68d2      	ldr	r2, [r2, #12]
 80047be:	0912      	lsrs	r2, r2, #4
 80047c0:	0452      	lsls	r2, r2, #17
 80047c2:	430a      	orrs	r2, r1
 80047c4:	491f      	ldr	r1, [pc, #124]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	614b      	str	r3, [r1, #20]
 80047ca:	e011      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	0211      	lsls	r1, r2, #8
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6912      	ldr	r2, [r2, #16]
 80047e2:	0852      	lsrs	r2, r2, #1
 80047e4:	3a01      	subs	r2, #1
 80047e6:	0652      	lsls	r2, r2, #25
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4916      	ldr	r1, [pc, #88]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047f0:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fc fb7c 	bl	8000ef8 <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004802:	e009      	b.n	8004818 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004804:	f7fc fb78 	bl	8000ef8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d902      	bls.n	8004818 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	73fb      	strb	r3, [r7, #15]
          break;
 8004816:	e005      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ef      	beq.n	8004804 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4904      	ldr	r1, [pc, #16]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e049      	b.n	80048ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc f9d6 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 f89e 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e047      	b.n	80049a0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	@ (80049ac <HAL_TIM_Base_Start+0xb4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492a:	d018      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <HAL_TIM_Base_Start+0xb8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <HAL_TIM_Base_Start+0xbc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1c      	ldr	r2, [pc, #112]	@ (80049b8 <HAL_TIM_Base_Start+0xc0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_TIM_Base_Start+0xc4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_TIM_Base_Start+0x66>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	@ (80049c0 <HAL_TIM_Base_Start+0xc8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d115      	bne.n	800498a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	4b17      	ldr	r3, [pc, #92]	@ (80049c4 <HAL_TIM_Base_Start+0xcc>)
 8004966:	4013      	ands	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d015      	beq.n	800499c <HAL_TIM_Base_Start+0xa4>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004976:	d011      	beq.n	800499c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	e008      	b.n	800499c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e000      	b.n	800499e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	00010007 	.word	0x00010007

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a46      	ldr	r2, [pc, #280]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d00f      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a43      	ldr	r2, [pc, #268]	@ (8004af8 <TIM_Base_SetConfig+0x130>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a42      	ldr	r2, [pc, #264]	@ (8004afc <TIM_Base_SetConfig+0x134>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a41      	ldr	r2, [pc, #260]	@ (8004b00 <TIM_Base_SetConfig+0x138>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a35      	ldr	r2, [pc, #212]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a28:	d01b      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a32      	ldr	r2, [pc, #200]	@ (8004af8 <TIM_Base_SetConfig+0x130>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d017      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a31      	ldr	r2, [pc, #196]	@ (8004afc <TIM_Base_SetConfig+0x134>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a30      	ldr	r2, [pc, #192]	@ (8004b00 <TIM_Base_SetConfig+0x138>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b08 <TIM_Base_SetConfig+0x140>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <TIM_Base_SetConfig+0x144>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <TIM_Base_SetConfig+0x148>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	@ (8004b08 <TIM_Base_SetConfig+0x140>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a16      	ldr	r2, [pc, #88]	@ (8004b0c <TIM_Base_SetConfig+0x144>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a15      	ldr	r2, [pc, #84]	@ (8004b10 <TIM_Base_SetConfig+0x148>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e068      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e040      	b.n	8004cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc f80a 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	@ 0x24
 8004c50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fae0 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f825 	bl	8004cc0 <UART_SetConfig>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e01b      	b.n	8004cb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fb5f 	bl	8005374 <UART_CheckIdleState>
 8004cb6:	4603      	mov	r3, r0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b08a      	sub	sp, #40	@ 0x28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4ba4      	ldr	r3, [pc, #656]	@ (8004f80 <UART_SetConfig+0x2c0>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a99      	ldr	r2, [pc, #612]	@ (8004f84 <UART_SetConfig+0x2c4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a90      	ldr	r2, [pc, #576]	@ (8004f88 <UART_SetConfig+0x2c8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d126      	bne.n	8004d98 <UART_SetConfig+0xd8>
 8004d4a:	4b90      	ldr	r3, [pc, #576]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0xd0>
 8004d58:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <UART_SetConfig+0xa0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e116      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7e:	e112      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d86:	e10e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8e:	e10a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d96:	e106      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f90 <UART_SetConfig+0x2d0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d138      	bne.n	8004e14 <UART_SetConfig+0x154>
 8004da2:	4b7a      	ldr	r3, [pc, #488]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d82d      	bhi.n	8004e0c <UART_SetConfig+0x14c>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0xf8>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004e0d 	.word	0x08004e0d
 8004dc4:	08004e0d 	.word	0x08004e0d
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e0d 	.word	0x08004e0d
 8004dd0:	08004e0d 	.word	0x08004e0d
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004e0d 	.word	0x08004e0d
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df2:	e0d8      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfa:	e0d4      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e02:	e0d0      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e0cc      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e0c8      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5e      	ldr	r2, [pc, #376]	@ (8004f94 <UART_SetConfig+0x2d4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d125      	bne.n	8004e6a <UART_SetConfig+0x1aa>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d016      	beq.n	8004e5a <UART_SetConfig+0x19a>
 8004e2c:	2b30      	cmp	r3, #48	@ 0x30
 8004e2e:	d818      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d00a      	beq.n	8004e4a <UART_SetConfig+0x18a>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d814      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <UART_SetConfig+0x182>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d008      	beq.n	8004e52 <UART_SetConfig+0x192>
 8004e40:	e00f      	b.n	8004e62 <UART_SetConfig+0x1a2>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e48:	e0ad      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e50:	e0a9      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e52:	2304      	movs	r3, #4
 8004e54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e58:	e0a5      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e60:	e0a1      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e62:	2310      	movs	r3, #16
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e68:	e09d      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f98 <UART_SetConfig+0x2d8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0x200>
 8004e74:	4b45      	ldr	r3, [pc, #276]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e80:	d016      	beq.n	8004eb0 <UART_SetConfig+0x1f0>
 8004e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e84:	d818      	bhi.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d00a      	beq.n	8004ea0 <UART_SetConfig+0x1e0>
 8004e8a:	2b80      	cmp	r3, #128	@ 0x80
 8004e8c:	d814      	bhi.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <UART_SetConfig+0x1d8>
 8004e92:	2b40      	cmp	r3, #64	@ 0x40
 8004e94:	d008      	beq.n	8004ea8 <UART_SetConfig+0x1e8>
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x1f8>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9e:	e082      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea6:	e07e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e07a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb6:	e076      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	e072      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a35      	ldr	r2, [pc, #212]	@ (8004f9c <UART_SetConfig+0x2dc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d12a      	bne.n	8004f20 <UART_SetConfig+0x260>
 8004eca:	4b30      	ldr	r3, [pc, #192]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed8:	d01a      	beq.n	8004f10 <UART_SetConfig+0x250>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ede:	d81b      	bhi.n	8004f18 <UART_SetConfig+0x258>
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee4:	d00c      	beq.n	8004f00 <UART_SetConfig+0x240>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eea:	d815      	bhi.n	8004f18 <UART_SetConfig+0x258>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <UART_SetConfig+0x238>
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef4:	d008      	beq.n	8004f08 <UART_SetConfig+0x248>
 8004ef6:	e00f      	b.n	8004f18 <UART_SetConfig+0x258>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e052      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e04e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e04a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e046      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e042      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a17      	ldr	r2, [pc, #92]	@ (8004f84 <UART_SetConfig+0x2c4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d13a      	bne.n	8004fa0 <UART_SetConfig+0x2e0>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <UART_SetConfig+0x2cc>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f38:	d01a      	beq.n	8004f70 <UART_SetConfig+0x2b0>
 8004f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f3e:	d81b      	bhi.n	8004f78 <UART_SetConfig+0x2b8>
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f44:	d00c      	beq.n	8004f60 <UART_SetConfig+0x2a0>
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4a:	d815      	bhi.n	8004f78 <UART_SetConfig+0x2b8>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <UART_SetConfig+0x298>
 8004f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f54:	d008      	beq.n	8004f68 <UART_SetConfig+0x2a8>
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x2b8>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	e022      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f60:	2302      	movs	r3, #2
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e01e      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6e:	e01a      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f76:	e016      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7e:	e012      	b.n	8004fa6 <UART_SetConfig+0x2e6>
 8004f80:	efff69f3 	.word	0xefff69f3
 8004f84:	40008000 	.word	0x40008000
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a9f      	ldr	r2, [pc, #636]	@ (8005228 <UART_SetConfig+0x568>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d17a      	bne.n	80050a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d824      	bhi.n	8005002 <UART_SetConfig+0x342>
 8004fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <UART_SetConfig+0x300>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08005003 	.word	0x08005003
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08005003 	.word	0x08005003
 8004fd0:	08004ff3 	.word	0x08004ff3
 8004fd4:	08005003 	.word	0x08005003
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005003 	.word	0x08005003
 8004fe0:	08004ffb 	.word	0x08004ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe fee8 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	61f8      	str	r0, [r7, #28]
        break;
 8004fea:	e010      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fec:	4b8f      	ldr	r3, [pc, #572]	@ (800522c <UART_SetConfig+0x56c>)
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff2:	f7fe fe49 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004ff6:	61f8      	str	r0, [r7, #28]
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ffe:	61fb      	str	r3, [r7, #28]
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800500c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80fb 	beq.w	800520c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	429a      	cmp	r2, r3
 8005024:	d305      	bcc.n	8005032 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005038:	e0e8      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2200      	movs	r2, #0
 800503e:	461c      	mov	r4, r3
 8005040:	4615      	mov	r5, r2
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	022b      	lsls	r3, r5, #8
 800504c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005050:	0222      	lsls	r2, r4, #8
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	6849      	ldr	r1, [r1, #4]
 8005056:	0849      	lsrs	r1, r1, #1
 8005058:	2000      	movs	r0, #0
 800505a:	4688      	mov	r8, r1
 800505c:	4681      	mov	r9, r0
 800505e:	eb12 0a08 	adds.w	sl, r2, r8
 8005062:	eb43 0b09 	adc.w	fp, r3, r9
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005074:	4650      	mov	r0, sl
 8005076:	4659      	mov	r1, fp
 8005078:	f7fb f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4613      	mov	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508a:	d308      	bcc.n	800509e <UART_SetConfig+0x3de>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d204      	bcs.n	800509e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e0b6      	b.n	800520c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050a4:	e0b2      	b.n	800520c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ae:	d15e      	bne.n	800516e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d828      	bhi.n	800510a <UART_SetConfig+0x44a>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0x400>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fe68 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fe7a 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b4d      	ldr	r3, [pc, #308]	@ (800522c <UART_SetConfig+0x56c>)
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fdc5 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80050fe:	61f8      	str	r0, [r7, #28]
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d077      	beq.n	800520c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005a      	lsls	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	441a      	add	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0f      	cmp	r3, #15
 8005136:	d916      	bls.n	8005166 <UART_SetConfig+0x4a6>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800513e:	d212      	bcs.n	8005166 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	b29b      	uxth	r3, r3
 8005144:	f023 030f 	bic.w	r3, r3, #15
 8005148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	b29a      	uxth	r2, r3
 8005156:	8afb      	ldrh	r3, [r7, #22]
 8005158:	4313      	orrs	r3, r2
 800515a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	8afa      	ldrh	r2, [r7, #22]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e052      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800516c:	e04e      	b.n	800520c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800516e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005172:	2b08      	cmp	r3, #8
 8005174:	d827      	bhi.n	80051c6 <UART_SetConfig+0x506>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <UART_SetConfig+0x4bc>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051c7 	.word	0x080051c7
 800518c:	080051b7 	.word	0x080051b7
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051c7 	.word	0x080051c7
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051bf 	.word	0x080051bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fe fe0a 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 80051a4:	61f8      	str	r0, [r7, #28]
        break;
 80051a6:	e014      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fe fe1c 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 80051ac:	61f8      	str	r0, [r7, #28]
        break;
 80051ae:	e010      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b0:	4b1e      	ldr	r3, [pc, #120]	@ (800522c <UART_SetConfig+0x56c>)
 80051b2:	61fb      	str	r3, [r7, #28]
        break;
 80051b4:	e00d      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b6:	f7fe fd67 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80051ba:	61f8      	str	r0, [r7, #28]
        break;
 80051bc:	e009      	b.n	80051d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051c2:	61fb      	str	r3, [r7, #28]
        break;
 80051c4:	e005      	b.n	80051d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051d0:	bf00      	nop
    }

    if (pclk != 0U)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d019      	beq.n	800520c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	085a      	lsrs	r2, r3, #1
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b0f      	cmp	r3, #15
 80051f0:	d909      	bls.n	8005206 <UART_SetConfig+0x546>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f8:	d205      	bcs.n	8005206 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e002      	b.n	800520c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005218:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	@ 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	40008000 	.word	0x40008000
 800522c:	00f42400 	.word	0x00f42400

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b098      	sub	sp, #96	@ 0x60
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fb fdb8 	bl	8000ef8 <HAL_GetTick>
 8005388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d12e      	bne.n	80053f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f88c 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d021      	beq.n	80053f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e062      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d149      	bne.n	8005498 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f856 	bl	80054c4 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d03c      	beq.n	8005498 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	623b      	str	r3, [r7, #32]
   return(result);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543c:	633b      	str	r3, [r7, #48]	@ 0x30
 800543e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e011      	b.n	80054bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3758      	adds	r7, #88	@ 0x58
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d4:	e04f      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054dc:	d04b      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fb fd0b 	bl	8000ef8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e04e      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d037      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d034      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f838 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f81e 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a0      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b095      	sub	sp, #84	@ 0x54
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	647b      	str	r3, [r7, #68]	@ 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800565a:	bf00      	nop
 800565c:	3754      	adds	r7, #84	@ 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <memset>:
 8005666:	4402      	add	r2, r0
 8005668:	4603      	mov	r3, r0
 800566a:	4293      	cmp	r3, r2
 800566c:	d100      	bne.n	8005670 <memset+0xa>
 800566e:	4770      	bx	lr
 8005670:	f803 1b01 	strb.w	r1, [r3], #1
 8005674:	e7f9      	b.n	800566a <memset+0x4>
	...

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	@ (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	@ (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	@ (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	@ (80056bc <__libc_init_array+0x44>)
 800568c:	f000 f818 	bl	80056c0 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	08005728 	.word	0x08005728
 80056b4:	08005728 	.word	0x08005728
 80056b8:	08005728 	.word	0x08005728
 80056bc:	0800572c 	.word	0x0800572c

080056c0 <_init>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr

080056cc <_fini>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr
