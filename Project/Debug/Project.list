
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013030  08006c98  08006c98  00007c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cc8  08019cc8  0001b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019cc8  08019cc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019cd0  08019cd0  0001b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019cd0  08019cd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019cd4  08019cd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08019cd8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e300  20000060  08019d38  0001b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e360  08019d38  0001b360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d081  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f1  00000000  00000000  00038111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec4  00000000  00000000  0003cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b64  00000000  00000000  0003dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019109  00000000  00000000  00066640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001075e2  00000000  00000000  0007f749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00186d2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b8  00000000  00000000  00186de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018c49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000038a2  00000000  00000000  0018c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000198  00000000  00000000  0018fda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c80 	.word	0x08006c80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08006c80 	.word	0x08006c80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <button_logic>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void button_logic(){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  row = 0;
 80004f8:	4b94      	ldr	r3, [pc, #592]	@ (800074c <button_logic+0x258>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
  col = 0;
 80004fe:	4b94      	ldr	r3, [pc, #592]	@ (8000750 <button_logic+0x25c>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]

  if (row_freq > (697 - MARGIN) && row_freq < (697 + MARGIN)){
 8000504:	4b93      	ldr	r3, [pc, #588]	@ (8000754 <button_logic+0x260>)
 8000506:	edd3 7a00 	vldr	s15, [r3]
 800050a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000758 <button_logic+0x264>
 800050e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000516:	dd0d      	ble.n	8000534 <button_logic+0x40>
 8000518:	4b8e      	ldr	r3, [pc, #568]	@ (8000754 <button_logic+0x260>)
 800051a:	edd3 7a00 	vldr	s15, [r3]
 800051e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800075c <button_logic+0x268>
 8000522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052a:	d503      	bpl.n	8000534 <button_logic+0x40>
    row = 1;
 800052c:	4b87      	ldr	r3, [pc, #540]	@ (800074c <button_logic+0x258>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e046      	b.n	80005c2 <button_logic+0xce>
  }
  else if (row_freq > (770 - MARGIN) && row_freq < (770 + MARGIN)){
 8000534:	4b87      	ldr	r3, [pc, #540]	@ (8000754 <button_logic+0x260>)
 8000536:	edd3 7a00 	vldr	s15, [r3]
 800053a:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8000760 <button_logic+0x26c>
 800053e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000546:	dd0d      	ble.n	8000564 <button_logic+0x70>
 8000548:	4b82      	ldr	r3, [pc, #520]	@ (8000754 <button_logic+0x260>)
 800054a:	edd3 7a00 	vldr	s15, [r3]
 800054e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8000764 <button_logic+0x270>
 8000552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055a:	d503      	bpl.n	8000564 <button_logic+0x70>
    row = 2;
 800055c:	4b7b      	ldr	r3, [pc, #492]	@ (800074c <button_logic+0x258>)
 800055e:	2202      	movs	r2, #2
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e02e      	b.n	80005c2 <button_logic+0xce>
  }
  else if (row_freq > (852 - MARGIN) && row_freq < (852 + MARGIN)){
 8000564:	4b7b      	ldr	r3, [pc, #492]	@ (8000754 <button_logic+0x260>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8000768 <button_logic+0x274>
 800056e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000576:	dd0d      	ble.n	8000594 <button_logic+0xa0>
 8000578:	4b76      	ldr	r3, [pc, #472]	@ (8000754 <button_logic+0x260>)
 800057a:	edd3 7a00 	vldr	s15, [r3]
 800057e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800076c <button_logic+0x278>
 8000582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	d503      	bpl.n	8000594 <button_logic+0xa0>
    row = 3;
 800058c:	4b6f      	ldr	r3, [pc, #444]	@ (800074c <button_logic+0x258>)
 800058e:	2203      	movs	r2, #3
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e016      	b.n	80005c2 <button_logic+0xce>
  }
  else if (row_freq > (941 - MARGIN) && row_freq < (941 + MARGIN)){
 8000594:	4b6f      	ldr	r3, [pc, #444]	@ (8000754 <button_logic+0x260>)
 8000596:	edd3 7a00 	vldr	s15, [r3]
 800059a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000770 <button_logic+0x27c>
 800059e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a6:	dd0c      	ble.n	80005c2 <button_logic+0xce>
 80005a8:	4b6a      	ldr	r3, [pc, #424]	@ (8000754 <button_logic+0x260>)
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000774 <button_logic+0x280>
 80005b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ba:	d502      	bpl.n	80005c2 <button_logic+0xce>
    row = 4;
 80005bc:	4b63      	ldr	r3, [pc, #396]	@ (800074c <button_logic+0x258>)
 80005be:	2204      	movs	r2, #4
 80005c0:	701a      	strb	r2, [r3, #0]
  }
  if (col_freq > (1209 - MARGIN) && col_freq < (1209 + MARGIN)){
 80005c2:	4b6d      	ldr	r3, [pc, #436]	@ (8000778 <button_logic+0x284>)
 80005c4:	edd3 7a00 	vldr	s15, [r3]
 80005c8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800077c <button_logic+0x288>
 80005cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd0d      	ble.n	80005f2 <button_logic+0xfe>
 80005d6:	4b68      	ldr	r3, [pc, #416]	@ (8000778 <button_logic+0x284>)
 80005d8:	edd3 7a00 	vldr	s15, [r3]
 80005dc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8000780 <button_logic+0x28c>
 80005e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e8:	d503      	bpl.n	80005f2 <button_logic+0xfe>
    col = 1;
 80005ea:	4b59      	ldr	r3, [pc, #356]	@ (8000750 <button_logic+0x25c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	e02e      	b.n	8000650 <button_logic+0x15c>
  }
  else if (col_freq > (1336 - MARGIN) && col_freq < (1336 + MARGIN)){
 80005f2:	4b61      	ldr	r3, [pc, #388]	@ (8000778 <button_logic+0x284>)
 80005f4:	edd3 7a00 	vldr	s15, [r3]
 80005f8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000784 <button_logic+0x290>
 80005fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000604:	dd0d      	ble.n	8000622 <button_logic+0x12e>
 8000606:	4b5c      	ldr	r3, [pc, #368]	@ (8000778 <button_logic+0x284>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8000788 <button_logic+0x294>
 8000610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000618:	d503      	bpl.n	8000622 <button_logic+0x12e>
    col = 2;
 800061a:	4b4d      	ldr	r3, [pc, #308]	@ (8000750 <button_logic+0x25c>)
 800061c:	2202      	movs	r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	e016      	b.n	8000650 <button_logic+0x15c>
  }
  else if (col_freq > (1477 - MARGIN) && col_freq < (1477 + MARGIN)){
 8000622:	4b55      	ldr	r3, [pc, #340]	@ (8000778 <button_logic+0x284>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800078c <button_logic+0x298>
 800062c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	dd0c      	ble.n	8000650 <button_logic+0x15c>
 8000636:	4b50      	ldr	r3, [pc, #320]	@ (8000778 <button_logic+0x284>)
 8000638:	edd3 7a00 	vldr	s15, [r3]
 800063c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000790 <button_logic+0x29c>
 8000640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d502      	bpl.n	8000650 <button_logic+0x15c>
    col = 3;
 800064a:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <button_logic+0x25c>)
 800064c:	2203      	movs	r2, #3
 800064e:	701a      	strb	r2, [r3, #0]
  }

  if      (row == 1 && col == 1) number = 1;
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <button_logic+0x258>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d107      	bne.n	8000668 <button_logic+0x174>
 8000658:	4b3d      	ldr	r3, [pc, #244]	@ (8000750 <button_logic+0x25c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d103      	bne.n	8000668 <button_logic+0x174>
 8000660:	4b4c      	ldr	r3, [pc, #304]	@ (8000794 <button_logic+0x2a0>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e06b      	b.n	8000740 <button_logic+0x24c>
  else if (row == 1 && col == 2) number = 2;
 8000668:	4b38      	ldr	r3, [pc, #224]	@ (800074c <button_logic+0x258>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d107      	bne.n	8000680 <button_logic+0x18c>
 8000670:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <button_logic+0x25c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d103      	bne.n	8000680 <button_logic+0x18c>
 8000678:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <button_logic+0x2a0>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e05f      	b.n	8000740 <button_logic+0x24c>
  else if (row == 1 && col == 3) number = 3;
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <button_logic+0x258>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d107      	bne.n	8000698 <button_logic+0x1a4>
 8000688:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <button_logic+0x25c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d103      	bne.n	8000698 <button_logic+0x1a4>
 8000690:	4b40      	ldr	r3, [pc, #256]	@ (8000794 <button_logic+0x2a0>)
 8000692:	2203      	movs	r2, #3
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e053      	b.n	8000740 <button_logic+0x24c>
  else if (row == 2 && col == 1) number = 4;
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <button_logic+0x258>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d107      	bne.n	80006b0 <button_logic+0x1bc>
 80006a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <button_logic+0x25c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d103      	bne.n	80006b0 <button_logic+0x1bc>
 80006a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000794 <button_logic+0x2a0>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e047      	b.n	8000740 <button_logic+0x24c>
  else if (row == 2 && col == 2) number = 5;
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <button_logic+0x258>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d107      	bne.n	80006c8 <button_logic+0x1d4>
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <button_logic+0x25c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d103      	bne.n	80006c8 <button_logic+0x1d4>
 80006c0:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <button_logic+0x2a0>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e03b      	b.n	8000740 <button_logic+0x24c>
  else if (row == 2 && col == 3) number = 6;
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <button_logic+0x258>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d107      	bne.n	80006e0 <button_logic+0x1ec>
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <button_logic+0x25c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d103      	bne.n	80006e0 <button_logic+0x1ec>
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <button_logic+0x2a0>)
 80006da:	2206      	movs	r2, #6
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e02f      	b.n	8000740 <button_logic+0x24c>
  else if (row == 3 && col == 1) number = 7;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <button_logic+0x258>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d107      	bne.n	80006f8 <button_logic+0x204>
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <button_logic+0x25c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d103      	bne.n	80006f8 <button_logic+0x204>
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <button_logic+0x2a0>)
 80006f2:	2207      	movs	r2, #7
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e023      	b.n	8000740 <button_logic+0x24c>
  else if (row == 3 && col == 2) number = 8;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <button_logic+0x258>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d107      	bne.n	8000710 <button_logic+0x21c>
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <button_logic+0x25c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d103      	bne.n	8000710 <button_logic+0x21c>
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <button_logic+0x2a0>)
 800070a:	2208      	movs	r2, #8
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e017      	b.n	8000740 <button_logic+0x24c>
  else if (row == 3 && col == 3) number = 9;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <button_logic+0x258>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d107      	bne.n	8000728 <button_logic+0x234>
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <button_logic+0x25c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d103      	bne.n	8000728 <button_logic+0x234>
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <button_logic+0x2a0>)
 8000722:	2209      	movs	r2, #9
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e00b      	b.n	8000740 <button_logic+0x24c>
  else if (row == 4 && col == 2) number = 0;
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <button_logic+0x258>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d107      	bne.n	8000740 <button_logic+0x24c>
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <button_logic+0x25c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d103      	bne.n	8000740 <button_logic+0x24c>
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <button_logic+0x2a0>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	e7ff      	b.n	8000740 <button_logic+0x24c>
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000209 	.word	0x20000209
 8000750:	2000020a 	.word	0x2000020a
 8000754:	20000200 	.word	0x20000200
 8000758:	44294000 	.word	0x44294000
 800075c:	44334000 	.word	0x44334000
 8000760:	443b8000 	.word	0x443b8000
 8000764:	44458000 	.word	0x44458000
 8000768:	44500000 	.word	0x44500000
 800076c:	445a0000 	.word	0x445a0000
 8000770:	44664000 	.word	0x44664000
 8000774:	44704000 	.word	0x44704000
 8000778:	20000204 	.word	0x20000204
 800077c:	4494a000 	.word	0x4494a000
 8000780:	4499a000 	.word	0x4499a000
 8000784:	44a48000 	.word	0x44a48000
 8000788:	44a98000 	.word	0x44a98000
 800078c:	44b62000 	.word	0x44b62000
 8000790:	44bb2000 	.word	0x44bb2000
 8000794:	20000208 	.word	0x20000208

08000798 <freq_maxima>:

void freq_maxima(){
 8000798:	b480      	push	{r7}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0

  float32_t max1 = 0;
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  float32_t max1_freq = 0;
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  float32_t max2 = 0;
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  float32_t max2_freq = 0;
 80007b0:	f04f 0300 	mov.w	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]

  temp = 0;
 80007b6:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <freq_maxima+0xfc>)
 80007b8:	f04f 0200 	mov.w	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  row_freq = 0;
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <freq_maxima+0x100>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
  col_freq = 0;
 80007c6:	4b35      	ldr	r3, [pc, #212]	@ (800089c <freq_maxima+0x104>)
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]

  for (int i = 1; i < FFT_LENGTH / 2; i++){
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e03e      	b.n	8000852 <freq_maxima+0xba>
    temp = output_fft_mag[i];
 80007d4:	4a32      	ldr	r2, [pc, #200]	@ (80008a0 <freq_maxima+0x108>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <freq_maxima+0xfc>)
 80007e0:	6013      	str	r3, [r2, #0]
    if (temp > max1) {
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <freq_maxima+0xfc>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80007ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f4:	d50d      	bpl.n	8000812 <freq_maxima+0x7a>
      max2 = max1;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	60fb      	str	r3, [r7, #12]
      max2_freq = max1_freq;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	60bb      	str	r3, [r7, #8]

      max1 = temp;
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <freq_maxima+0xfc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	617b      	str	r3, [r7, #20]
      max1_freq = output_freq[i];
 8000804:	4a27      	ldr	r2, [pc, #156]	@ (80008a4 <freq_maxima+0x10c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	e01c      	b.n	800084c <freq_maxima+0xb4>
    }
    else if  (temp > max2 && temp < max1){
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <freq_maxima+0xfc>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ed97 7a03 	vldr	s14, [r7, #12]
 800081c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	d512      	bpl.n	800084c <freq_maxima+0xb4>
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <freq_maxima+0xfc>)
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000838:	dd08      	ble.n	800084c <freq_maxima+0xb4>
      max2 = temp;
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <freq_maxima+0xfc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	60fb      	str	r3, [r7, #12]
      max2_freq = output_freq[i];
 8000840:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <freq_maxima+0x10c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	60bb      	str	r3, [r7, #8]
  for (int i = 1; i < FFT_LENGTH / 2; i++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000858:	dbbc      	blt.n	80007d4 <freq_maxima+0x3c>
    }
  }

  if (max1_freq < max2_freq){
 800085a:	ed97 7a04 	vldr	s14, [r7, #16]
 800085e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d506      	bpl.n	800087a <freq_maxima+0xe2>
    row_freq = max1_freq;
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <freq_maxima+0x100>)
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	6013      	str	r3, [r2, #0]
    col_freq = max2_freq;
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <freq_maxima+0x104>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	6013      	str	r3, [r2, #0]
  }
  else {
    row_freq = max2_freq;
    col_freq = max1_freq;
  }
}
 8000878:	e005      	b.n	8000886 <freq_maxima+0xee>
    row_freq = max2_freq;
 800087a:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <freq_maxima+0x100>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	6013      	str	r3, [r2, #0]
    col_freq = max1_freq;
 8000880:	4a06      	ldr	r2, [pc, #24]	@ (800089c <freq_maxima+0x104>)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200001fc 	.word	0x200001fc
 8000898:	20000200 	.word	0x20000200
 800089c:	20000204 	.word	0x20000204
 80008a0:	2000420c 	.word	0x2000420c
 80008a4:	2000a20c 	.word	0x2000a20c

080008a8 <password_logic>:

void password_logic(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  if (number == PASSWORD){
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <password_logic+0x58>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d10e      	bne.n	80008d4 <password_logic+0x2c>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008b6:	2120      	movs	r1, #32
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f002 fdbc 	bl	8003438 <HAL_GPIO_TogglePin>
    HAL_Delay(2000);
 80008c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c4:	f000 fcf0 	bl	80012a8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ce:	f002 fdb3 	bl	8003438 <HAL_GPIO_TogglePin>
    for (int  i = 0; i < 20; i++){
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      HAL_Delay(50);
    }
  }
}
 80008d2:	e010      	b.n	80008f6 <password_logic+0x4e>
    for (int  i = 0; i < 20; i++){
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	e00a      	b.n	80008f0 <password_logic+0x48>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008da:	2120      	movs	r1, #32
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f002 fdaa 	bl	8003438 <HAL_GPIO_TogglePin>
      HAL_Delay(50);
 80008e4:	2032      	movs	r0, #50	@ 0x32
 80008e6:	f000 fcdf 	bl	80012a8 <HAL_Delay>
    for (int  i = 0; i < 20; i++){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b13      	cmp	r3, #19
 80008f4:	ddf1      	ble.n	80008da <password_logic+0x32>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000208 	.word	0x20000208

08000904 <project_logic>:

void project_logic(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  if (button_flag == TRUE){
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <project_logic+0x3c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d114      	bne.n	800093a <project_logic+0x36>
    arm_rfft_fast_f32(&fft_handler, fft_buffer, output_fft,0);
 8000910:	2300      	movs	r3, #0
 8000912:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <project_logic+0x40>)
 8000914:	490c      	ldr	r1, [pc, #48]	@ (8000948 <project_logic+0x44>)
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <project_logic+0x48>)
 8000918:	f005 f99c 	bl	8005c54 <arm_rfft_fast_f32>
    arm_cmplx_mag_f32(output_fft, output_fft_mag, FFT_LENGTH/2);
 800091c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000920:	490b      	ldr	r1, [pc, #44]	@ (8000950 <project_logic+0x4c>)
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <project_logic+0x40>)
 8000924:	f005 fd74 	bl	8006410 <arm_cmplx_mag_f32>

    freq_maxima(); 
 8000928:	f7ff ff36 	bl	8000798 <freq_maxima>

    button_logic();
 800092c:	f7ff fde2 	bl	80004f4 <button_logic>

    password_logic();
 8000930:	f7ff ffba 	bl	80008a8 <password_logic>

    button_flag = FALSE;
 8000934:	4b02      	ldr	r3, [pc, #8]	@ (8000940 <project_logic+0x3c>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
  }
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000
 8000944:	2000020c 	.word	0x2000020c
 8000948:	2000620c 	.word	0x2000620c
 800094c:	2000e20c 	.word	0x2000e20c
 8000950:	2000420c 	.word	0x2000420c

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fc29 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f843 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f98f 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000966:	f000 f96f 	bl	8000c48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f93d 	bl	8000be8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800096e:	f000 f88d 	bl	8000a8c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000972:	f000 f903 	bl	8000b7c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fft_handler, FFT_LENGTH);
 8000976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800097a:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <main+0x80>)
 800097c:	f005 f886 	bl	8005a8c <arm_rfft_fast_init_f32>

  HAL_TIM_Base_Start(&htim6);
 8000980:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <main+0x84>)
 8000982:	f004 f903 	bl	8004b8c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f002 fd3a 	bl	8003408 <HAL_GPIO_WritePin>

  for (int i=0; i<FFT_LENGTH/2; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	e015      	b.n	80009c6 <main+0x72>
  {
    output_freq[i] = (float32_t)(i) / FFT_LENGTH * SAMPLING_RATE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80009dc <main+0x88>
 80009a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80009e0 <main+0x8c>
 80009b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <main+0x90>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<FFT_LENGTH/2; i++)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009cc:	dbe5      	blt.n	800099a <main+0x46>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    project_logic();
 80009ce:	f7ff ff99 	bl	8000904 <project_logic>
 80009d2:	e7fc      	b.n	80009ce <main+0x7a>
 80009d4:	2000e20c 	.word	0x2000e20c
 80009d8:	20000128 	.word	0x20000128
 80009dc:	45800000 	.word	0x45800000
 80009e0:	469c4000 	.word	0x469c4000
 80009e4:	2000a20c 	.word	0x2000a20c

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b096      	sub	sp, #88	@ 0x58
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2244      	movs	r2, #68	@ 0x44
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 f8ee 	bl	8006bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a0e:	f002 fd53 	bl	80034b8 <HAL_PWREx_ControlVoltageScaling>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a18:	f000 fa0e 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a26:	2310      	movs	r3, #16
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a36:	230a      	movs	r3, #10
 8000a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd8a 	bl	8003564 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a56:	f000 f9ef 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2104      	movs	r1, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f952 	bl	8003d1c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a7e:	f000 f9db 	bl	8000e38 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3758      	adds	r7, #88	@ 0x58
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ab0:	4a30      	ldr	r2, [pc, #192]	@ (8000b74 <MX_ADC1_Init+0xe8>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000aee:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b12:	4817      	ldr	r0, [pc, #92]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000b14:	f000 fe10 	bl	8001738 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000b1e:	f000 f98b 	bl	8000e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000b2e:	f001 fec9 	bl	80028c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000b38:	f000 f97e 	bl	8000e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_ADC1_Init+0xec>)
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b40:	2306      	movs	r3, #6
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b48:	237f      	movs	r3, #127	@ 0x7f
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_ADC1_Init+0xe4>)
 8000b5a:	f001 f865 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b64:	f000 f968 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000007c 	.word	0x2000007c
 8000b74:	50040000 	.word	0x50040000
 8000b78:	14f00020 	.word	0x14f00020

08000b7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	@ (8000be4 <MX_TIM6_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000b94:	224f      	movs	r2, #79	@ 0x4f
 8000b96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000ba0:	2231      	movs	r2, #49	@ 0x31
 8000ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000bac:	f003 ff96 	bl	8004adc <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000bb6:	f000 f93f 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <MX_TIM6_Init+0x64>)
 8000bc8:	f004 f8ee 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000bd2:	f000 f931 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000128 	.word	0x20000128
 8000be4:	40001000 	.word	0x40001000

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <MX_USART2_UART_Init+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART2_UART_Init+0x58>)
 8000c2c:	f004 f944 	bl	8004eb8 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c36:	f000 f8ff 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000174 	.word	0x20000174
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_DMA_Init+0x38>)
 8000c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <MX_DMA_Init+0x38>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_DMA_Init+0x38>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	200b      	movs	r0, #11
 8000c6c:	f001 ffb5 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c70:	200b      	movs	r0, #11
 8000c72:	f001 ffce 	bl	8002c12 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a28      	ldr	r2, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_GPIO_Init+0xd4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f002 fb81 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <MX_GPIO_Init+0xd8>)
 8000d1e:	f002 f9c9 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d22:	2320      	movs	r3, #32
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f002 f9ba 	bl	80030b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2028      	movs	r0, #40	@ 0x28
 8000d46:	f001 ff48 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f001 ff61 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, FFT_LENGTH);
 8000d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6e:	4904      	ldr	r1, [pc, #16]	@ (8000d80 <HAL_GPIO_EXTI_Callback+0x20>)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d72:	f000 fe31 	bl	80019d8 <HAL_ADC_Start_DMA>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000c20c 	.word	0x2000c20c
 8000d84:	2000007c 	.word	0x2000007c

08000d88 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  // for (int i = 0; i < FFT_LENGTH / 2; i++) output_fft[i] = (float32_t)adc_buffer[i];
  for (int i = 0; i < FFT_LENGTH/2; i++) fft_buffer[i] = (float32_t)adc_buffer[i]; 
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e010      	b.n	8000db8 <HAL_ADC_ConvHalfCpltCallback+0x30>
 8000d96:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	edc3 7a00 	vstr	s15, [r3]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000dbe:	dbea      	blt.n	8000d96 <HAL_ADC_ConvHalfCpltCallback+0xe>

}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2000c20c 	.word	0x2000c20c
 8000dd4:	2000620c 	.word	0x2000620c

08000dd8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  button_flag = TRUE;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_ADC_ConvCpltCallback+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]

  for (int i = FFT_LENGTH/2; i < FFT_LENGTH; i++) {
 8000de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e010      	b.n	8000e10 <HAL_ADC_ConvCpltCallback+0x38>
    fft_buffer[i] = (float32_t)adc_buffer[i];
 8000dee:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <HAL_ADC_ConvCpltCallback+0x54>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8000e30 <HAL_ADC_ConvCpltCallback+0x58>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	edc3 7a00 	vstr	s15, [r3]
  for (int i = FFT_LENGTH/2; i < FFT_LENGTH; i++) {
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e16:	dbea      	blt.n	8000dee <HAL_ADC_ConvCpltCallback+0x16>
  }


  HAL_ADC_Stop_DMA(&hadc1);
 8000e18:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000e1a:	f000 fe99 	bl	8001b50 <HAL_ADC_Stop_DMA>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	2000c20c 	.word	0x2000c20c
 8000e30:	2000620c 	.word	0x2000620c
 8000e34:	2000007c 	.word	0x2000007c

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2288      	movs	r2, #136	@ 0x88
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fe93 	bl	8006bd8 <memset>
  if(hadc->Instance==ADC1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <HAL_ADC_MspInit+0x120>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d173      	bne.n	8000fa4 <HAL_ADC_MspInit+0x118>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ebc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ec0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ec2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ee2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 f939 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ef8:	f7ff ff9e 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000efc:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a25      	ldr	r2, [pc, #148]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f32:	230b      	movs	r3, #11
 8000f34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f002 f8b4 	bl	80030b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb8 <HAL_ADC_MspInit+0x12c>)
 8000f50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f8a:	f001 fe5d 	bl	8002c48 <HAL_DMA_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8000f94:	f7ff ff50 	bl	8000e38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <HAL_ADC_MspInit+0x128>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37b0      	adds	r7, #176	@ 0xb0
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	50040000 	.word	0x50040000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	200000e0 	.word	0x200000e0
 8000fb8:	40020008 	.word	0x40020008

08000fbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x38>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ac      	sub	sp, #176	@ 0xb0
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2288      	movs	r2, #136	@ 0x88
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fddb 	bl	8006bd8 <memset>
  if(huart->Instance==USART2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <HAL_UART_MspInit+0xb0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d13b      	bne.n	80010a4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f893 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001044:	f7ff fef8 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104c:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 800104e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001052:	6593      	str	r3, [r2, #88]	@ 0x58
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_UART_MspInit+0xb4>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001078:	230c      	movs	r3, #12
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001090:	2307      	movs	r3, #7
 8001092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f002 f808 	bl	80030b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010a4:	bf00      	nop
 80010a6:	37b0      	adds	r7, #176	@ 0xb0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f8ad 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <DMA1_Channel1_IRQHandler+0x10>)
 800111a:	f001 feeb 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e0 	.word	0x200000e0

08001128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800112c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001130:	f002 f99c 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f005 fd33 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118e:	f7ff fbe1 	bl	8000954 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001194:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011a0:	08019cd8 	.word	0x08019cd8
  ldr r2, =_sbss
 80011a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011a8:	2000e360 	.word	0x2000e360

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_Init+0x3c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_Init+0x3c>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f001 fcfc 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f80f 	bl	80011f0 <HAL_InitTick>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	e001      	b.n	80011e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011de:	f7ff fe31 	bl	8000e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d023      	beq.n	800124c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_InitTick+0x70>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_InitTick+0x6c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd07 	bl	8002c2e <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d809      	bhi.n	8001240 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f001 fcd1 	bl	8002bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001238:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_InitTick+0x74>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e007      	b.n	8001250 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e004      	b.n	8001250 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e001      	b.n	8001250 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000000c 	.word	0x2000000c
 8001260:	20000004 	.word	0x20000004
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	2000e224 	.word	0x2000e224

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000e224 	.word	0x2000e224

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3360      	adds	r3, #96	@ 0x60
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <LL_ADC_SetOffset+0x44>)
 800137a:	4013      	ands	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	4313      	orrs	r3, r2
 8001388:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	03fff000 	.word	0x03fff000

080013a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3360      	adds	r3, #96	@ 0x60
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3360      	adds	r3, #96	@ 0x60
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3330      	adds	r3, #48	@ 0x30
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	211f      	movs	r1, #31
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0e9b      	lsrs	r3, r3, #26
 8001460:	f003 011f 	and.w	r1, r3, #31
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	431a      	orrs	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001474:	bf00      	nop
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3314      	adds	r3, #20
 8001490:	461a      	mov	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	0e5b      	lsrs	r3, r3, #25
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	0d1b      	lsrs	r3, r3, #20
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2107      	movs	r1, #7
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	401a      	ands	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	0d1b      	lsrs	r3, r3, #20
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0318 	and.w	r3, r3, #24
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <LL_ADC_SetChannelSingleDiff+0x44>)
 80014fc:	40d9      	lsrs	r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	400b      	ands	r3, r1
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	0007ffff 	.word	0x0007ffff

08001520 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800154c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6093      	str	r3, [r2, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001574:	d101      	bne.n	800157a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001614:	f043 0202 	orr.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <LL_ADC_IsEnabled+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_ADC_IsEnabled+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d101      	bne.n	8001666 <LL_ADC_IsDisableOngoing+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_ADC_IsDisableOngoing+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016b0:	f043 0210 	orr.w	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d101      	bne.n	80016dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016fe:	f043 0220 	orr.w	r2, r3, #32
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b08      	cmp	r3, #8
 8001724:	d101      	bne.n	800172a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e130      	b.n	80019b4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fb93 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fef1 	bl	8001560 <LL_ADC_IsDeepPowerDownEnabled>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fed7 	bl	800153c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff0c 	bl	80015b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fef0 	bl	8001588 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <HAL_ADC_Init+0x284>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	4a84      	ldr	r2, [pc, #528]	@ (80019c0 <HAL_ADC_Init+0x288>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff feee 	bl	80015b0 <LL_ADC_IsInternalRegulatorEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017de:	f043 0210 	orr.w	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff62 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 8001800:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80c9 	bne.w	80019a2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80c5 	bne.w	80019a2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fefb 	bl	8001628 <LL_ADC_IsEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d115      	bne.n	8001864 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001838:	4862      	ldr	r0, [pc, #392]	@ (80019c4 <HAL_ADC_Init+0x28c>)
 800183a:	f7ff fef5 	bl	8001628 <LL_ADC_IsEnabled>
 800183e:	4604      	mov	r4, r0
 8001840:	4861      	ldr	r0, [pc, #388]	@ (80019c8 <HAL_ADC_Init+0x290>)
 8001842:	f7ff fef1 	bl	8001628 <LL_ADC_IsEnabled>
 8001846:	4603      	mov	r3, r0
 8001848:	431c      	orrs	r4, r3
 800184a:	4860      	ldr	r0, [pc, #384]	@ (80019cc <HAL_ADC_Init+0x294>)
 800184c:	f7ff feec 	bl	8001628 <LL_ADC_IsEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	4323      	orrs	r3, r4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	485c      	ldr	r0, [pc, #368]	@ (80019d0 <HAL_ADC_Init+0x298>)
 8001860:	f7ff fd46 	bl	80012f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e5b      	ldrb	r3, [r3, #25]
 8001868:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800186e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001874:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800187a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001882:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d106      	bne.n	80018a0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	3b01      	subs	r3, #1
 8001898:	045b      	lsls	r3, r3, #17
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <HAL_ADC_Init+0x29c>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	69b9      	ldr	r1, [r7, #24]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff1c 	bl	8001712 <LL_ADC_INJ_IsConversionOngoing>
 80018da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13d      	bne.n	800195e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d13a      	bne.n	800195e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001904:	f023 0302 	bic.w	r3, r3, #2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	69b9      	ldr	r1, [r7, #24]
 800190e:	430b      	orrs	r3, r1
 8001910:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001918:	2b01      	cmp	r3, #1
 800191a:	d118      	bne.n	800194e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800193e:	430a      	orrs	r2, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10c      	bne.n	8001980 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f023 010f 	bic.w	r1, r3, #15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
 800197e:	e007      	b.n	8001990 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 020f 	bic.w	r2, r2, #15
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54
 80019a0:	e007      	b.n	80019b2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3724      	adds	r7, #36	@ 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	20000004 	.word	0x20000004
 80019c0:	053e2d63 	.word	0x053e2d63
 80019c4:	50040000 	.word	0x50040000
 80019c8:	50040100 	.word	0x50040100
 80019cc:	50040200 	.word	0x50040200
 80019d0:	50040300 	.word	0x50040300
 80019d4:	fff0c007 	.word	0xfff0c007

080019d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019e4:	4853      	ldr	r0, [pc, #332]	@ (8001b34 <HAL_ADC_Start_DMA+0x15c>)
 80019e6:	f7ff fd9b 	bl	8001520 <LL_ADC_GetMultimode>
 80019ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe67 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8093 	bne.w	8001b24 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_Start_DMA+0x34>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e08e      	b.n	8001b2a <HAL_ADC_Start_DMA+0x152>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a47      	ldr	r2, [pc, #284]	@ (8001b38 <HAL_ADC_Start_DMA+0x160>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d008      	beq.n	8001a30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d002      	beq.n	8001a30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b09      	cmp	r3, #9
 8001a2e:	d172      	bne.n	8001b16 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fda7 	bl	8002584 <ADC_Enable>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d165      	bne.n	8001b0c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a38      	ldr	r2, [pc, #224]	@ (8001b3c <HAL_ADC_Start_DMA+0x164>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_ADC_Start_DMA+0x8c>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_Start_DMA+0x8e>
 8001a64:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_ADC_Start_DMA+0x168>)
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f023 0206 	bic.w	r2, r3, #6
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa4:	4a27      	ldr	r2, [pc, #156]	@ (8001b44 <HAL_ADC_Start_DMA+0x16c>)
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aac:	4a26      	ldr	r2, [pc, #152]	@ (8001b48 <HAL_ADC_Start_DMA+0x170>)
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	4a25      	ldr	r2, [pc, #148]	@ (8001b4c <HAL_ADC_Start_DMA+0x174>)
 8001ab6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	221c      	movs	r2, #28
 8001abe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0210 	orr.w	r2, r2, #16
 8001ad6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3340      	adds	r3, #64	@ 0x40
 8001af2:	4619      	mov	r1, r3
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f001 f95e 	bl	8002db8 <HAL_DMA_Start_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fdb5 	bl	8001674 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b0a:	e00d      	b.n	8001b28 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001b14:	e008      	b.n	8001b28 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
 8001b26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	50040300 	.word	0x50040300
 8001b38:	50040200 	.word	0x50040200
 8001b3c:	50040100 	.word	0x50040100
 8001b40:	50040000 	.word	0x50040000
 8001b44:	0800274f 	.word	0x0800274f
 8001b48:	08002827 	.word	0x08002827
 8001b4c:	08002843 	.word	0x08002843

08001b50 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Stop_DMA+0x16>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e051      	b.n	8001c0a <HAL_ADC_Stop_DMA+0xba>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b6e:	2103      	movs	r1, #3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fc4b 	bl	800240c <ADC_ConversionStop>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13f      	bne.n	8001c00 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d10f      	bne.n	8001bbe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 f968 	bl	8002e78 <HAL_DMA_Abort>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fd5b 	bl	8002690 <ADC_Disable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e002      	b.n	8001be6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fd55 	bl	8002690 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x22>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e3c9      	b.n	80023de <HAL_ADC_ConfigChannel+0x7b6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd34 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 83aa 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d824      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	3b02      	subs	r3, #2
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d81b      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x8e>
 8001c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <HAL_ADC_ConfigChannel+0x5c>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cad 	.word	0x08001cad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c94:	230c      	movs	r3, #12
 8001c96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c9a:	e010      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ca2:	e00c      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ca4:	2318      	movs	r3, #24
 8001ca6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001caa:	e008      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cb4:	e003      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cbc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ccc:	f7ff fbac 	bl	8001428 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fcf5 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 8001cda:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fd15 	bl	8001712 <LL_ADC_INJ_IsConversionOngoing>
 8001ce8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 81a4 	bne.w	800203e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 819f 	bne.w	800203e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f7ff fbb7 	bl	8001480 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d00a      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6919      	ldr	r1, [r3, #16]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d44:	f7ff fb08 	bl	8001358 <LL_ADC_SetOffset>
 8001d48:	e179      	b.n	800203e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fb25 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x14e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb1a 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	e01e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x18c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fb0f 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1a4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	e018      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1d6>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e004      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001df4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d106      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fade 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fac2 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x214>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fab7 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 021f 	and.w	r2, r3, #31
 8001e3a:	e01e      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x252>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff faac 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e004      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x26a>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	e018      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x29c>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e004      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa7b 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2102      	movs	r1, #2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fa5f 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x2da>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fa54 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	e01e      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x318>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2102      	movs	r1, #2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fa49 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e004      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x330>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	e014      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x35a>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e004      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d106      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fa1c 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2103      	movs	r1, #3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fa00 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x398>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2103      	movs	r1, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f9f5 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	f003 021f 	and.w	r2, r3, #31
 8001fbe:	e017      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x3c8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f9ea 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fda:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001fdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e003      	b.n	8001fee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x3e0>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	e011      	b.n	800202c <HAL_ADC_ConfigChannel+0x404>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002018:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800201a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e003      	b.n	800202c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	2103      	movs	r1, #3
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f9c7 	bl	80013cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff faf0 	bl	8001628 <LL_ADC_IsEnabled>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 8140 	bne.w	80022d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	461a      	mov	r2, r3
 800205e:	f7ff fa3b 	bl	80014d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a8f      	ldr	r2, [pc, #572]	@ (80022a4 <HAL_ADC_ConfigChannel+0x67c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	f040 8131 	bne.w	80022d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x46e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2b09      	cmp	r3, #9
 800208c:	bf94      	ite	ls
 800208e:	2301      	movls	r3, #1
 8002090:	2300      	movhi	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e019      	b.n	80020ca <HAL_ADC_ConfigChannel+0x4a2>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80020a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80020a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80020b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d079      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x4c2>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0e9b      	lsrs	r3, r3, #26
 80020e0:	3301      	adds	r3, #1
 80020e2:	069b      	lsls	r3, r3, #26
 80020e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e8:	e015      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4ee>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80020f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80020fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e003      	b.n	800210e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x50e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	3301      	adds	r3, #1
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	e017      	b.n	8002166 <HAL_ADC_ConfigChannel+0x53e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	ea42 0103 	orr.w	r1, r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x564>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	3301      	adds	r3, #1
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	051b      	lsls	r3, r3, #20
 800218a:	e018      	b.n	80021be <HAL_ADC_ConfigChannel+0x596>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80021a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 021f 	and.w	r2, r3, #31
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021be:	430b      	orrs	r3, r1
 80021c0:	e081      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_ADC_ConfigChannel+0x5b6>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	3301      	adds	r3, #1
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021dc:	e015      	b.n	800220a <HAL_ADC_ConfigChannel+0x5e2>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_ConfigChannel+0x602>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	e017      	b.n	800225a <HAL_ADC_ConfigChannel+0x632>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	61bb      	str	r3, [r7, #24]
  return result;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	ea42 0103 	orr.w	r1, r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x65e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	3b1e      	subs	r3, #30
 800227e:	051b      	lsls	r3, r3, #20
 8002280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002284:	e01e      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x69c>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	60fb      	str	r3, [r7, #12]
  return result;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d104      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e006      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x688>
 80022a2:	bf00      	nop
 80022a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 021f 	and.w	r2, r3, #31
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	3b1e      	subs	r3, #30
 80022be:	051b      	lsls	r3, r3, #20
 80022c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff f8d8 	bl	8001480 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d07a      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022dc:	4843      	ldr	r0, [pc, #268]	@ (80023ec <HAL_ADC_ConfigChannel+0x7c4>)
 80022de:	f7ff f82d 	bl	800133c <LL_ADC_GetCommonPathInternalCh>
 80022e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <HAL_ADC_ConfigChannel+0x7c8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d12c      	bne.n	800234a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d126      	bne.n	800234a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a3c      	ldr	r2, [pc, #240]	@ (80023f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x6e8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a3b      	ldr	r2, [pc, #236]	@ (80023f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d15d      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002314:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002318:	4619      	mov	r1, r3
 800231a:	4834      	ldr	r0, [pc, #208]	@ (80023ec <HAL_ADC_ConfigChannel+0x7c4>)
 800231c:	f7fe fffb 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002320:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	4a36      	ldr	r2, [pc, #216]	@ (8002400 <HAL_ADC_ConfigChannel+0x7d8>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800233a:	e002      	b.n	8002342 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3b01      	subs	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002348:	e040      	b.n	80023cc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <HAL_ADC_ConfigChannel+0x7dc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d118      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d112      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_ADC_ConfigChannel+0x74c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a22      	ldr	r2, [pc, #136]	@ (80023f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d12d      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237c:	4619      	mov	r1, r3
 800237e:	481b      	ldr	r0, [pc, #108]	@ (80023ec <HAL_ADC_ConfigChannel+0x7c4>)
 8002380:	f7fe ffc9 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002384:	e024      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	@ (8002408 <HAL_ADC_ConfigChannel+0x7e0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d120      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_ADC_ConfigChannel+0x7cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d115      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023ae:	4619      	mov	r1, r3
 80023b0:	480e      	ldr	r0, [pc, #56]	@ (80023ec <HAL_ADC_ConfigChannel+0x7c4>)
 80023b2:	f7fe ffb0 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
 80023b6:	e00c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80023ca:	e002      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023cc:	bf00      	nop
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	37d8      	adds	r7, #216	@ 0xd8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	80080000 	.word	0x80080000
 80023ec:	50040300 	.word	0x50040300
 80023f0:	c7520000 	.word	0xc7520000
 80023f4:	50040000 	.word	0x50040000
 80023f8:	50040200 	.word	0x50040200
 80023fc:	20000004 	.word	0x20000004
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	cb840000 	.word	0xcb840000
 8002408:	80000001 	.word	0x80000001

0800240c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f94e 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 8002428:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f96f 	bl	8001712 <LL_ADC_INJ_IsConversionOngoing>
 8002434:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8098 	beq.w	8002574 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02a      	beq.n	80024a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7e5b      	ldrb	r3, [r3, #25]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d126      	bne.n	80024a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e1b      	ldrb	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d122      	bne.n	80024a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002466:	e014      	b.n	8002492 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4a45      	ldr	r2, [pc, #276]	@ (8002580 <ADC_ConversionStop+0x174>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d90d      	bls.n	800248c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e074      	b.n	8002576 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d1e3      	bne.n	8002468 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2240      	movs	r2, #64	@ 0x40
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d014      	beq.n	80024d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f906 	bl	80016c4 <LL_ADC_REG_IsConversionOngoing>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f8c3 	bl	800164e <LL_ADC_IsDisableOngoing>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8e2 	bl	800169c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d014      	beq.n	8002508 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f915 	bl	8001712 <LL_ADC_INJ_IsConversionOngoing>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f8ab 	bl	800164e <LL_ADC_IsDisableOngoing>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f8f1 	bl	80016ea <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d005      	beq.n	800251a <ADC_ConversionStop+0x10e>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d105      	bne.n	8002520 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002514:	230c      	movs	r3, #12
 8002516:	617b      	str	r3, [r7, #20]
        break;
 8002518:	e005      	b.n	8002526 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800251a:	2308      	movs	r3, #8
 800251c:	617b      	str	r3, [r7, #20]
        break;
 800251e:	e002      	b.n	8002526 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002520:	2304      	movs	r3, #4
 8002522:	617b      	str	r3, [r7, #20]
        break;
 8002524:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002526:	f7fe feb3 	bl	8001290 <HAL_GetTick>
 800252a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800252c:	e01b      	b.n	8002566 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800252e:	f7fe feaf 	bl	8001290 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d914      	bls.n	8002566 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e007      	b.n	8002576 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1dc      	bne.n	800252e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	a33fffff 	.word	0xa33fffff

08002584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f847 	bl	8001628 <LL_ADC_IsEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d169      	bne.n	8002674 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <ADC_Enable+0xfc>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e055      	b.n	8002676 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f802 	bl	80015d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025d4:	482b      	ldr	r0, [pc, #172]	@ (8002684 <ADC_Enable+0x100>)
 80025d6:	f7fe feb1 	bl	800133c <LL_ADC_GetCommonPathInternalCh>
 80025da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <ADC_Enable+0x104>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	4a28      	ldr	r2, [pc, #160]	@ (800268c <ADC_Enable+0x108>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025fe:	e002      	b.n	8002606 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3b01      	subs	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800260c:	f7fe fe40 	bl	8001290 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002612:	e028      	b.n	8002666 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f805 	bl	8001628 <LL_ADC_IsEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe ffd5 	bl	80015d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262e:	f7fe fe2f 	bl	8001290 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d914      	bls.n	8002666 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d00d      	beq.n	8002666 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e007      	b.n	8002676 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d1cf      	bne.n	8002614 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	8000003f 	.word	0x8000003f
 8002684:	50040300 	.word	0x50040300
 8002688:	20000004 	.word	0x20000004
 800268c:	053e2d63 	.word	0x053e2d63

08002690 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe ffd6 	bl	800164e <LL_ADC_IsDisableOngoing>
 80026a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe ffbd 	bl	8001628 <LL_ADC_IsEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d047      	beq.n	8002744 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d144      	bne.n	8002744 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030d 	and.w	r3, r3, #13
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10c      	bne.n	80026e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe ff97 	bl	8001600 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2203      	movs	r2, #3
 80026d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026da:	f7fe fdd9 	bl	8001290 <HAL_GetTick>
 80026de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026e0:	e029      	b.n	8002736 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e023      	b.n	8002746 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026fe:	f7fe fdc7 	bl	8001290 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d914      	bls.n	8002736 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e007      	b.n	8002746 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1dc      	bne.n	80026fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002760:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d14b      	bne.n	8002800 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d021      	beq.n	80027c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fe3b 	bl	8001402 <LL_ADC_REG_IsTriggerSourceSWStart>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d032      	beq.n	80027f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12b      	bne.n	80027f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11f      	bne.n	80027f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80027c4:	e018      	b.n	80027f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fe faed 	bl	8000dd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027fe:	e00e      	b.n	800281e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff fa00 	bl	8001c12 <HAL_ADC_ErrorCallback>
}
 8002812:	e004      	b.n	800281e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7fe faa7 	bl	8000d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff f9d2 	bl	8001c12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <LL_ADC_IsEnabled>:
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <LL_ADC_IsEnabled+0x18>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <LL_ADC_IsEnabled+0x1a>
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_REG_IsConversionOngoing>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b09f      	sub	sp, #124	@ 0x7c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e093      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028ea:	2300      	movs	r3, #0
 80028ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ee:	2300      	movs	r3, #0
 80028f0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a47      	ldr	r2, [pc, #284]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028fc:	4b46      	ldr	r3, [pc, #280]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	e001      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e072      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffb8 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 800292c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ffb2 	bl	800289c <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d154      	bne.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800293e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002940:	2b00      	cmp	r3, #0
 8002942:	d151      	bne.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002944:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002946:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02c      	beq.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002962:	035b      	lsls	r3, r3, #13
 8002964:	430b      	orrs	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	4829      	ldr	r0, [pc, #164]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800296e:	f7ff ff82 	bl	8002876 <LL_ADC_IsEnabled>
 8002972:	4604      	mov	r4, r0
 8002974:	4828      	ldr	r0, [pc, #160]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002976:	f7ff ff7e 	bl	8002876 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	431c      	orrs	r4, r3
 800297e:	4828      	ldr	r0, [pc, #160]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002980:	f7ff ff79 	bl	8002876 <LL_ADC_IsEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	4323      	orrs	r3, r4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d137      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800298c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002994:	f023 030f 	bic.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	6811      	ldr	r1, [r2, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029a8:	e028      	b.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b6:	4817      	ldr	r0, [pc, #92]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029b8:	f7ff ff5d 	bl	8002876 <LL_ADC_IsEnabled>
 80029bc:	4604      	mov	r4, r0
 80029be:	4816      	ldr	r0, [pc, #88]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029c0:	f7ff ff59 	bl	8002876 <LL_ADC_IsEnabled>
 80029c4:	4603      	mov	r3, r0
 80029c6:	431c      	orrs	r4, r3
 80029c8:	4815      	ldr	r0, [pc, #84]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029ca:	f7ff ff54 	bl	8002876 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4323      	orrs	r3, r4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e6:	e009      	b.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029fa:	e000      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	377c      	adds	r7, #124	@ 0x7c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	50040000 	.word	0x50040000
 8002a18:	50040100 	.word	0x50040100
 8002a1c:	50040300 	.word	0x50040300
 8002a20:	50040200 	.word	0x50040200

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	@ (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff29 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff3e 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff8e 	bl	8002b18 <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5d 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff31 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffa2 	bl	8002b80 <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e098      	b.n	8002d8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b4d      	ldr	r3, [pc, #308]	@ (8002d98 <HAL_DMA_Init+0x150>)
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d80f      	bhi.n	8002c86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_DMA_Init+0x154>)
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a4b      	ldr	r2, [pc, #300]	@ (8002da0 <HAL_DMA_Init+0x158>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a48      	ldr	r2, [pc, #288]	@ (8002da4 <HAL_DMA_Init+0x15c>)
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c84:	e00e      	b.n	8002ca4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b46      	ldr	r3, [pc, #280]	@ (8002da8 <HAL_DMA_Init+0x160>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <HAL_DMA_Init+0x158>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	009a      	lsls	r2, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a42      	ldr	r2, [pc, #264]	@ (8002dac <HAL_DMA_Init+0x164>)
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cfe:	d039      	beq.n	8002d74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a27      	ldr	r2, [pc, #156]	@ (8002da4 <HAL_DMA_Init+0x15c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11a      	bne.n	8002d40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d0a:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <HAL_DMA_Init+0x168>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f003 031c 	and.w	r3, r3, #28
 8002d16:	210f      	movs	r1, #15
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4924      	ldr	r1, [pc, #144]	@ (8002db0 <HAL_DMA_Init+0x168>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <HAL_DMA_Init+0x168>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	f003 031c 	and.w	r3, r3, #28
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	491d      	ldr	r1, [pc, #116]	@ (8002db0 <HAL_DMA_Init+0x168>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
 8002d3e:	e019      	b.n	8002d74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_DMA_Init+0x16c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d48:	f003 031c 	and.w	r3, r3, #28
 8002d4c:	210f      	movs	r1, #15
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	4917      	ldr	r1, [pc, #92]	@ (8002db4 <HAL_DMA_Init+0x16c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_DMA_Init+0x16c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f003 031c 	and.w	r3, r3, #28
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	4911      	ldr	r1, [pc, #68]	@ (8002db4 <HAL_DMA_Init+0x16c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40020407 	.word	0x40020407
 8002d9c:	bffdfff8 	.word	0xbffdfff8
 8002da0:	cccccccd 	.word	0xcccccccd
 8002da4:	40020000 	.word	0x40020000
 8002da8:	bffdfbf8 	.word	0xbffdfbf8
 8002dac:	40020400 	.word	0x40020400
 8002db0:	400200a8 	.word	0x400200a8
 8002db4:	400204a8 	.word	0x400204a8

08002db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Start_IT+0x20>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e04b      	b.n	8002e70 <HAL_DMA_Start_IT+0xb8>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d13a      	bne.n	8002e62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f91e 	bl	8003052 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 020e 	orr.w	r2, r2, #14
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e00f      	b.n	8002e50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 020a 	orr.w	r2, r2, #10
 8002e4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d008      	beq.n	8002ea2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2204      	movs	r2, #4
 8002e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e022      	b.n	8002ee8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020e 	bic.w	r2, r2, #14
 8002eb0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f003 021c 	and.w	r2, r3, #28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f003 031c 	and.w	r3, r3, #28
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d026      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x7a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d021      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	f003 021c 	and.w	r2, r3, #28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	2104      	movs	r1, #4
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d071      	beq.n	8003048 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f6c:	e06c      	b.n	8003048 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f003 031c 	and.w	r3, r3, #28
 8002f76:	2202      	movs	r2, #2
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02e      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xec>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d029      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 020a 	bic.w	r2, r2, #10
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f003 021c 	and.w	r2, r3, #28
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d038      	beq.n	8003048 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fde:	e033      	b.n	8003048 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	f003 031c 	and.w	r3, r3, #28
 8002fe8:	2208      	movs	r2, #8
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02a      	beq.n	800304a <HAL_DMA_IRQHandler+0x156>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d025      	beq.n	800304a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 020e 	bic.w	r2, r2, #14
 800300c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	f003 021c 	and.w	r2, r3, #28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003048:	bf00      	nop
 800304a:	bf00      	nop
}
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 021c 	and.w	r2, r3, #28
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b10      	cmp	r3, #16
 8003082:	d108      	bne.n	8003096 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003094:	e007      	b.n	80030a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	60da      	str	r2, [r3, #12]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c2:	e17f      	b.n	80033c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8171 	beq.w	80033be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d005      	beq.n	80030f4 <HAL_GPIO_Init+0x40>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d130      	bne.n	8003156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800312a:	2201      	movs	r2, #1
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0201 	and.w	r2, r3, #1
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b03      	cmp	r3, #3
 8003160:	d118      	bne.n	8003194 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	6939      	ldr	r1, [r7, #16]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80ac 	beq.w	80033be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	4b5f      	ldr	r3, [pc, #380]	@ (80033e4 <HAL_GPIO_Init+0x330>)
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	4a5e      	ldr	r2, [pc, #376]	@ (80033e4 <HAL_GPIO_Init+0x330>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6613      	str	r3, [r2, #96]	@ 0x60
 8003272:	4b5c      	ldr	r3, [pc, #368]	@ (80033e4 <HAL_GPIO_Init+0x330>)
 8003274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800327e:	4a5a      	ldr	r2, [pc, #360]	@ (80033e8 <HAL_GPIO_Init+0x334>)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032a8:	d025      	beq.n	80032f6 <HAL_GPIO_Init+0x242>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	@ (80033ec <HAL_GPIO_Init+0x338>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <HAL_GPIO_Init+0x23e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	@ (80033f0 <HAL_GPIO_Init+0x33c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d019      	beq.n	80032ee <HAL_GPIO_Init+0x23a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_GPIO_Init+0x340>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0x236>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_GPIO_Init+0x344>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_GPIO_Init+0x232>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	@ (80033fc <HAL_GPIO_Init+0x348>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <HAL_GPIO_Init+0x22e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003400 <HAL_GPIO_Init+0x34c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_GPIO_Init+0x22a>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00c      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032de:	2307      	movs	r3, #7
 80032e0:	e00a      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032e2:	2305      	movs	r3, #5
 80032e4:	e008      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032e6:	2304      	movs	r3, #4
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e004      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x244>
 80032f6:	2300      	movs	r3, #0
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4093      	lsls	r3, r2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003308:	4937      	ldr	r1, [pc, #220]	@ (80033e8 <HAL_GPIO_Init+0x334>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003316:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <HAL_GPIO_Init+0x350>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800333a:	4a32      	ldr	r2, [pc, #200]	@ (8003404 <HAL_GPIO_Init+0x350>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003340:	4b30      	ldr	r3, [pc, #192]	@ (8003404 <HAL_GPIO_Init+0x350>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003364:	4a27      	ldr	r2, [pc, #156]	@ (8003404 <HAL_GPIO_Init+0x350>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800336a:	4b26      	ldr	r3, [pc, #152]	@ (8003404 <HAL_GPIO_Init+0x350>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800338e:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_GPIO_Init+0x350>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_GPIO_Init+0x350>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <HAL_GPIO_Init+0x350>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f47f ae78 	bne.w	80030c4 <HAL_GPIO_Init+0x10>
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40010000 	.word	0x40010000
 80033ec:	48000400 	.word	0x48000400
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000c00 	.word	0x48000c00
 80033f8:	48001000 	.word	0x48001000
 80033fc:	48001400 	.word	0x48001400
 8003400:	48001800 	.word	0x48001800
 8003404:	40010400 	.word	0x40010400

08003408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003418:	787b      	ldrb	r3, [r7, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003424:	e002      	b.n	800342c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43d9      	mvns	r1, r3
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	400b      	ands	r3, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fc68 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40010400 	.word	0x40010400

0800349c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40007000 	.word	0x40007000

080034b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c6:	d130      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c8:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d4:	d038      	beq.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d6:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034de:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034e6:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2232      	movs	r2, #50	@ 0x32
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0c9b      	lsrs	r3, r3, #18
 80034f8:	3301      	adds	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fc:	e002      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3b01      	subs	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003510:	d102      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f2      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003518:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003524:	d110      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e00f      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003536:	d007      	beq.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003538:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003540:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003546:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000
 800355c:	20000004 	.word	0x20000004
 8003560:	431bde83 	.word	0x431bde83

08003564 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e3ca      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003576:	4b97      	ldr	r3, [pc, #604]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003580:	4b94      	ldr	r3, [pc, #592]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80e4 	beq.w	8003760 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_RCC_OscConfig+0x4a>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	f040 808b 	bne.w	80036bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f040 8087 	bne.w	80036bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ae:	4b89      	ldr	r3, [pc, #548]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e3a2      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	4b82      	ldr	r3, [pc, #520]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_RCC_OscConfig+0x7c>
 80035d6:	4b7f      	ldr	r3, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035de:	e005      	b.n	80035ec <HAL_RCC_OscConfig+0x88>
 80035e0:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d223      	bcs.n	8003638 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd55 	bl	80040a4 <RCC_SetFlashLatencyFromMSIRange>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e383      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003604:	4b73      	ldr	r3, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a72      	ldr	r2, [pc, #456]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800360a:	f043 0308 	orr.w	r3, r3, #8
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b70      	ldr	r3, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	496d      	ldr	r1, [pc, #436]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003622:	4b6c      	ldr	r3, [pc, #432]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4968      	ldr	r1, [pc, #416]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
 8003636:	e025      	b.n	8003684 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003638:	4b66      	ldr	r3, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4960      	ldr	r1, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003656:	4b5f      	ldr	r3, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	495b      	ldr	r1, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fd15 	bl	80040a4 <RCC_SetFlashLatencyFromMSIRange>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e343      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003684:	f000 fc4a 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b52      	ldr	r3, [pc, #328]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	4950      	ldr	r1, [pc, #320]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	4a4e      	ldr	r2, [pc, #312]	@ (80037dc <HAL_RCC_OscConfig+0x278>)
 80036a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a4:	4b4e      	ldr	r3, [pc, #312]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fda1 	bl	80011f0 <HAL_InitTick>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d052      	beq.n	800375e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	e327      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d032      	beq.n	800372a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c4:	4b43      	ldr	r3, [pc, #268]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a42      	ldr	r2, [pc, #264]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d0:	f7fd fdde 	bl	8001290 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d8:	f7fd fdda 	bl	8001290 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e310      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ea:	4b3a      	ldr	r3, [pc, #232]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f6:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a36      	ldr	r2, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4931      	ldr	r1, [pc, #196]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003714:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	492c      	ldr	r1, [pc, #176]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	e01a      	b.n	8003760 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800372a:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a29      	ldr	r2, [pc, #164]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003736:	f7fd fdab 	bl	8001290 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373e:	f7fd fda7 	bl	8001290 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e2dd      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003750:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x1da>
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d074      	beq.n	8003856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x21a>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	d10e      	bne.n	8003796 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d10b      	bne.n	8003796 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377e:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d064      	beq.n	8003854 <HAL_RCC_OscConfig+0x2f0>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d160      	bne.n	8003854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e2ba      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x24a>
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e026      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b6:	d115      	bne.n	80037e4 <HAL_RCC_OscConfig+0x280>
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e014      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08006c98 	.word	0x08006c98
 80037dc:	20000004 	.word	0x20000004
 80037e0:	20000008 	.word	0x20000008
 80037e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fd44 	bl	8001290 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd fd40 	bl	8001290 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e276      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x2a8>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd fd30 	bl	8001290 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd fd2c 	bl	8001290 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e262      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x2d0>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d060      	beq.n	8003924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x310>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d119      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d116      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x328>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e23f      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	4973      	ldr	r1, [pc, #460]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	e040      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fd fceb 	bl	8001290 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038be:	f7fd fce7 	bl	8001290 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e21d      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b62      	ldr	r3, [pc, #392]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	495f      	ldr	r1, [pc, #380]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e018      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd fcc7 	bl	8001290 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fd fcc3 	bl	8001290 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1f9      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03c      	beq.n	80039aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003938:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fd fca2 	bl	8001290 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd fc9e 	bl	8001290 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1d4      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCC_OscConfig+0x3ec>
 8003970:	e01b      	b.n	80039aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003978:	4a3b      	ldr	r2, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fd fc85 	bl	8001290 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fd fc81 	bl	8001290 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1b7      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a6 	beq.w	8003b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	4a26      	ldr	r2, [pc, #152]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e4:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fd fc48 	bl	8001290 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fc44 	bl	8001290 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e17a      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4d8>
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a3a:	e029      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_OscConfig+0x50c>
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a64:	e014      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	4a9b      	ldr	r2, [pc, #620]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a80:	4b98      	ldr	r3, [pc, #608]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	4a97      	ldr	r2, [pc, #604]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fbfa 	bl	8001290 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fbf6 	bl	8001290 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e12a      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ed      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x53c>
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fbe3 	bl	8001290 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd fbdf 	bl	8001290 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e113      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ed      	bne.n	8003ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4a79      	ldr	r2, [pc, #484]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80fe 	beq.w	8003d0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	f040 80d0 	bne.w	8003cb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b18:	4b72      	ldr	r3, [pc, #456]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d130      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	3b01      	subs	r3, #1
 8003b38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d127      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d11f      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b58:	2a07      	cmp	r2, #7
 8003b5a:	bf14      	ite	ne
 8003b5c:	2201      	movne	r2, #1
 8003b5e:	2200      	moveq	r2, #0
 8003b60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	3b01      	subs	r3, #1
 8003b74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d109      	bne.n	8003b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d06e      	beq.n	8003c6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	d069      	beq.n	8003c68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0ad      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bbc:	f7fd fb68 	bl	8001290 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd fb64 	bl	8001290 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e09a      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd6:	4b43      	ldr	r3, [pc, #268]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be2:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	4b40      	ldr	r3, [pc, #256]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bf2:	3a01      	subs	r2, #1
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	4311      	orrs	r1, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bfc:	0212      	lsls	r2, r2, #8
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c04:	0852      	lsrs	r2, r2, #1
 8003c06:	3a01      	subs	r2, #1
 8003c08:	0552      	lsls	r2, r2, #21
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	0652      	lsls	r2, r2, #25
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c1c:	0912      	lsrs	r2, r2, #4
 8003c1e:	0452      	lsls	r2, r2, #17
 8003c20:	430a      	orrs	r2, r1
 8003c22:	4930      	ldr	r1, [pc, #192]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c40:	f7fd fb26 	bl	8001290 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fb22 	bl	8001290 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e058      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c66:	e050      	b.n	8003d0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04f      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d148      	bne.n	8003d0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c84:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a16      	ldr	r2, [pc, #88]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c90:	f7fd fafe 	bl	8001290 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fafa 	bl	8001290 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e030      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x734>
 8003cb6:	e028      	b.n	8003d0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <HAL_RCC_OscConfig+0x780>)
 8003cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd fae1 	bl	8001290 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd0:	e00c      	b.n	8003cec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd fadd 	bl	8001290 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d905      	bls.n	8003cec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e013      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <HAL_RCC_OscConfig+0x7b0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ec      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_OscConfig+0x7b0>)
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	4905      	ldr	r1, [pc, #20]	@ (8003d14 <HAL_RCC_OscConfig+0x7b0>)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_OscConfig+0x7b4>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60cb      	str	r3, [r1, #12]
 8003d04:	e001      	b.n	8003d0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	feeefffc 	.word	0xfeeefffc

08003d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0e7      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b75      	ldr	r3, [pc, #468]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b72      	ldr	r3, [pc, #456]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4970      	ldr	r1, [pc, #448]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0cf      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d010      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	4b66      	ldr	r3, [pc, #408]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d908      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b63      	ldr	r3, [pc, #396]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4960      	ldr	r1, [pc, #384]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04c      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d121      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0a6      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	4b54      	ldr	r3, [pc, #336]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e09a      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e08e      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e086      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4943      	ldr	r1, [pc, #268]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fd fa44 	bl	8001290 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd fa40 	bl	8001290 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e06e      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d208      	bcs.n	8003e62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b2e      	ldr	r3, [pc, #184]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	492b      	ldr	r1, [pc, #172]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e62:	4b29      	ldr	r3, [pc, #164]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d210      	bcs.n	8003e92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 0207 	bic.w	r2, r3, #7
 8003e78:	4923      	ldr	r1, [pc, #140]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <HAL_RCC_ClockConfig+0x1ec>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e036      	b.n	8003f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4918      	ldr	r1, [pc, #96]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4910      	ldr	r1, [pc, #64]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ed0:	f000 f824 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	490b      	ldr	r1, [pc, #44]	@ (8003f10 <HAL_RCC_ClockConfig+0x1f4>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	4a09      	ldr	r2, [pc, #36]	@ (8003f14 <HAL_RCC_ClockConfig+0x1f8>)
 8003eee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <HAL_RCC_ClockConfig+0x1fc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd f97b 	bl	80011f0 <HAL_InitTick>
 8003efa:	4603      	mov	r3, r0
 8003efc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003efe:	7afb      	ldrb	r3, [r7, #11]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08006c98 	.word	0x08006c98
 8003f14:	20000004 	.word	0x20000004
 8003f18:	20000008 	.word	0x20000008

08003f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	@ 0x24
 8003f20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f34:	4b3b      	ldr	r3, [pc, #236]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x34>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d121      	bne.n	8003f8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d11e      	bne.n	8003f8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f50:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f5c:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f78:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d102      	bne.n	8003f9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f94:	4b25      	ldr	r3, [pc, #148]	@ (800402c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	e004      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fa0:	4b23      	ldr	r3, [pc, #140]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d134      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003faa:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xac>
 8003fc0:	e005      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc4:	617b      	str	r3, [r7, #20]
      break;
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fca:	617b      	str	r3, [r7, #20]
      break;
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	617b      	str	r3, [r7, #20]
      break;
 8003fd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	3301      	adds	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	fb03 f202 	mul.w	r2, r3, r2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	0e5b      	lsrs	r3, r3, #25
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004014:	69bb      	ldr	r3, [r7, #24]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3724      	adds	r7, #36	@ 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	08006cb0 	.word	0x08006cb0
 800402c:	00f42400 	.word	0x00f42400
 8004030:	007a1200 	.word	0x007a1200

08004034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	@ (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004050:	f7ff fff0 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4904      	ldr	r1, [pc, #16]	@ (8004074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	08006ca8 	.word	0x08006ca8

08004078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800407c:	f7ff ffda 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0adb      	lsrs	r3, r3, #11
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4904      	ldr	r1, [pc, #16]	@ (80040a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	08006ca8 	.word	0x08006ca8

080040a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040b0:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040bc:	f7ff f9ee 	bl	800349c <HAL_PWREx_GetVoltageRange>
 80040c0:	6178      	str	r0, [r7, #20]
 80040c2:	e014      	b.n	80040ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	4a24      	ldr	r2, [pc, #144]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d0:	4b22      	ldr	r3, [pc, #136]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff f9de 	bl	800349c <HAL_PWREx_GetVoltageRange>
 80040e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f4:	d10b      	bne.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d919      	bls.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004100:	d902      	bls.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004102:	2302      	movs	r3, #2
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e013      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004108:	2301      	movs	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e010      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b80      	cmp	r3, #128	@ 0x80
 8004112:	d902      	bls.n	800411a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004114:	2303      	movs	r3, #3
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	e00a      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b80      	cmp	r3, #128	@ 0x80
 800411e:	d102      	bne.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004120:	2302      	movs	r3, #2
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e004      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b70      	cmp	r3, #112	@ 0x70
 800412a:	d101      	bne.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800412c:	2301      	movs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 0207 	bic.w	r2, r3, #7
 8004138:	4909      	ldr	r1, [pc, #36]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	40022000 	.word	0x40022000

08004164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800416c:	2300      	movs	r3, #0
 800416e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004170:	2300      	movs	r3, #0
 8004172:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d041      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004184:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004188:	d02a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800418a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800418e:	d824      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004190:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800419a:	d81e      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a4:	d010      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041a6:	e018      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a8:	4b86      	ldr	r3, [pc, #536]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a85      	ldr	r2, [pc, #532]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b4:	e015      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fabb 	bl	8004738 <RCCEx_PLLSAI1_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3320      	adds	r3, #32
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fba6 	bl	8004920 <RCCEx_PLLSAI2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	74fb      	strb	r3, [r7, #19]
      break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e8:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f6:	4973      	ldr	r1, [pc, #460]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d041      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004214:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004218:	d02a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800421a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800421e:	d824      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800422a:	d81e      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004234:	d010      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004236:	e018      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004238:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004242:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004244:	e015      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fa73 	bl	8004738 <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004256:	e00c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3320      	adds	r3, #32
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb5e 	bl	8004920 <RCCEx_PLLSAI2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	74fb      	strb	r3, [r7, #19]
      break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004278:	4b52      	ldr	r3, [pc, #328]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004286:	494f      	ldr	r1, [pc, #316]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800428e:	e001      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a0 	beq.w	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	4a40      	ldr	r2, [pc, #256]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c8:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d8:	4b3b      	ldr	r3, [pc, #236]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3a      	ldr	r2, [pc, #232]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e4:	f7fc ffd4 	bl	8001290 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ea:	e009      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fc ffd0 	bl	8001290 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	74fb      	strb	r3, [r7, #19]
        break;
 80042fe:	e005      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004300:	4b31      	ldr	r3, [pc, #196]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d15c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004312:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01f      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d019      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004330:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800433c:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004342:	4a20      	ldr	r2, [pc, #128]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800434c:	4b1d      	ldr	r3, [pc, #116]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800435c:	4a19      	ldr	r2, [pc, #100]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fc ff8f 	bl	8001290 <HAL_GetTick>
 8004372:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004374:	e00b      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fc ff8b 	bl	8001290 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d902      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	74fb      	strb	r3, [r7, #19]
            break;
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ec      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10c      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b2:	4904      	ldr	r1, [pc, #16]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043ba:	e009      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
 80043c0:	e006      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d0:	7c7b      	ldrb	r3, [r7, #17]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	4a9d      	ldr	r2, [pc, #628]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ee:	4b98      	ldr	r3, [pc, #608]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f023 0203 	bic.w	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	4994      	ldr	r1, [pc, #592]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004410:	4b8f      	ldr	r3, [pc, #572]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f023 020c 	bic.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	498c      	ldr	r1, [pc, #560]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004432:	4b87      	ldr	r3, [pc, #540]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004438:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	4983      	ldr	r1, [pc, #524]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004454:	4b7e      	ldr	r3, [pc, #504]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	497b      	ldr	r1, [pc, #492]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004476:	4b76      	ldr	r3, [pc, #472]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	4972      	ldr	r1, [pc, #456]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004498:	4b6d      	ldr	r3, [pc, #436]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a6:	496a      	ldr	r1, [pc, #424]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ba:	4b65      	ldr	r3, [pc, #404]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	4961      	ldr	r1, [pc, #388]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	4959      	ldr	r1, [pc, #356]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044fe:	4b54      	ldr	r3, [pc, #336]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450c:	4950      	ldr	r1, [pc, #320]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004520:	4b4b      	ldr	r3, [pc, #300]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004526:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	4948      	ldr	r1, [pc, #288]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004542:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004550:	493f      	ldr	r1, [pc, #252]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d028      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004564:	4b3a      	ldr	r3, [pc, #232]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004572:	4937      	ldr	r1, [pc, #220]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004582:	d106      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004584:	4b32      	ldr	r3, [pc, #200]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a31      	ldr	r2, [pc, #196]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458e:	60d3      	str	r3, [r2, #12]
 8004590:	e011      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004596:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800459a:	d10c      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f8c8 	bl	8004738 <RCCEx_PLLSAI1_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d028      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	491f      	ldr	r1, [pc, #124]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e0:	d106      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ec:	60d3      	str	r3, [r2, #12]
 80045ee:	e011      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f8:	d10c      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f899 	bl	8004738 <RCCEx_PLLSAI1_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02b      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462e:	4908      	ldr	r1, [pc, #32]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463e:	d109      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a02      	ldr	r2, [pc, #8]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	e014      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f867 	bl	8004738 <RCCEx_PLLSAI1_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004684:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004692:	4928      	ldr	r1, [pc, #160]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f844 	bl	8004738 <RCCEx_PLLSAI1_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d014      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	74bb      	strb	r3, [r7, #18]
 80046be:	e011      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3320      	adds	r3, #32
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f925 	bl	8004920 <RCCEx_PLLSAI2_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046f0:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046fe:	490d      	ldr	r1, [pc, #52]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004712:	4b08      	ldr	r3, [pc, #32]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004722:	4904      	ldr	r1, [pc, #16]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800472a:	7cbb      	ldrb	r3, [r7, #18]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000

08004738 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004746:	4b75      	ldr	r3, [pc, #468]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d018      	beq.n	8004784 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004752:	4b72      	ldr	r3, [pc, #456]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0203 	and.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d10d      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
       ||
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800476a:	4b6c      	ldr	r3, [pc, #432]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
       ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d047      	beq.n	800480e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e044      	b.n	800480e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d018      	beq.n	80047be <RCCEx_PLLSAI1_Config+0x86>
 800478c:	2b03      	cmp	r3, #3
 800478e:	d825      	bhi.n	80047dc <RCCEx_PLLSAI1_Config+0xa4>
 8004790:	2b01      	cmp	r3, #1
 8004792:	d002      	beq.n	800479a <RCCEx_PLLSAI1_Config+0x62>
 8004794:	2b02      	cmp	r3, #2
 8004796:	d009      	beq.n	80047ac <RCCEx_PLLSAI1_Config+0x74>
 8004798:	e020      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479a:	4b60      	ldr	r3, [pc, #384]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11d      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047aa:	e01a      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047ac:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d116      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047bc:	e013      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047be:	4b57      	ldr	r3, [pc, #348]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ca:	4b54      	ldr	r3, [pc, #336]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047da:	e006      	b.n	80047ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e004      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047f2:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6819      	ldr	r1, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	430b      	orrs	r3, r1
 8004808:	4944      	ldr	r1, [pc, #272]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d17d      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004814:	4b41      	ldr	r3, [pc, #260]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a40      	ldr	r2, [pc, #256]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800481e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fc fd36 	bl	8001290 <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004826:	e009      	b.n	800483c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004828:	f7fc fd32 	bl	8001290 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d902      	bls.n	800483c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	73fb      	strb	r3, [r7, #15]
        break;
 800483a:	e005      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800483c:	4b37      	ldr	r3, [pc, #220]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ef      	bne.n	8004828 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d160      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d111      	bne.n	8004878 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004854:	4b31      	ldr	r3, [pc, #196]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800485c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6892      	ldr	r2, [r2, #8]
 8004864:	0211      	lsls	r1, r2, #8
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	0912      	lsrs	r2, r2, #4
 800486c:	0452      	lsls	r2, r2, #17
 800486e:	430a      	orrs	r2, r1
 8004870:	492a      	ldr	r1, [pc, #168]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	610b      	str	r3, [r1, #16]
 8004876:	e027      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d112      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800487e:	4b27      	ldr	r3, [pc, #156]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004886:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	0211      	lsls	r1, r2, #8
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6912      	ldr	r2, [r2, #16]
 8004894:	0852      	lsrs	r2, r2, #1
 8004896:	3a01      	subs	r2, #1
 8004898:	0552      	lsls	r2, r2, #21
 800489a:	430a      	orrs	r2, r1
 800489c:	491f      	ldr	r1, [pc, #124]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]
 80048a2:	e011      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a4:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	0211      	lsls	r1, r2, #8
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6952      	ldr	r2, [r2, #20]
 80048ba:	0852      	lsrs	r2, r2, #1
 80048bc:	3a01      	subs	r2, #1
 80048be:	0652      	lsls	r2, r2, #25
 80048c0:	430a      	orrs	r2, r1
 80048c2:	4916      	ldr	r1, [pc, #88]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c8:	4b14      	ldr	r3, [pc, #80]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a13      	ldr	r2, [pc, #76]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fc fcdc 	bl	8001290 <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048da:	e009      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048dc:	f7fc fcd8 	bl	8001290 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d902      	bls.n	80048f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	73fb      	strb	r3, [r7, #15]
          break;
 80048ee:	e005      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f0:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ef      	beq.n	80048dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	4904      	ldr	r1, [pc, #16]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000

08004920 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d018      	beq.n	800496c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800493a:	4b67      	ldr	r3, [pc, #412]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0203 	and.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d10d      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
       ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004952:	4b61      	ldr	r3, [pc, #388]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
       ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d047      	beq.n	80049f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e044      	b.n	80049f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d018      	beq.n	80049a6 <RCCEx_PLLSAI2_Config+0x86>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d825      	bhi.n	80049c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004978:	2b01      	cmp	r3, #1
 800497a:	d002      	beq.n	8004982 <RCCEx_PLLSAI2_Config+0x62>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d009      	beq.n	8004994 <RCCEx_PLLSAI2_Config+0x74>
 8004980:	e020      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004982:	4b55      	ldr	r3, [pc, #340]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e01a      	b.n	80049ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b50      	ldr	r3, [pc, #320]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a4:	e013      	b.n	80049ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b2:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c2:	e006      	b.n	80049d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e004      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10d      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049da:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	430b      	orrs	r3, r1
 80049f0:	4939      	ldr	r1, [pc, #228]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d167      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fc fc42 	bl	8001290 <HAL_GetTick>
 8004a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a0e:	e009      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a10:	f7fc fc3e 	bl	8001290 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	73fb      	strb	r3, [r7, #15]
        break;
 8004a22:	e005      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a24:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ef      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d14a      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d111      	bne.n	8004a60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	0211      	lsls	r1, r2, #8
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68d2      	ldr	r2, [r2, #12]
 8004a52:	0912      	lsrs	r2, r2, #4
 8004a54:	0452      	lsls	r2, r2, #17
 8004a56:	430a      	orrs	r2, r1
 8004a58:	491f      	ldr	r1, [pc, #124]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	614b      	str	r3, [r1, #20]
 8004a5e:	e011      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6912      	ldr	r2, [r2, #16]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0652      	lsls	r2, r2, #25
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	4916      	ldr	r1, [pc, #88]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a84:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a13      	ldr	r2, [pc, #76]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fc fbfe 	bl	8001290 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a96:	e009      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a98:	f7fc fbfa 	bl	8001290 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aaa:	e005      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ef      	beq.n	8004a98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	4904      	ldr	r1, [pc, #16]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000

08004adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e049      	b.n	8004b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc fa5a 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f000 f89e 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d001      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e047      	b.n	8004c34 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	@ (8004c40 <HAL_TIM_Base_Start+0xb4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01d      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbe:	d018      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <HAL_TIM_Base_Start+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <HAL_TIM_Base_Start+0xbc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c4c <HAL_TIM_Base_Start+0xc0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c50 <HAL_TIM_Base_Start+0xc4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x66>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <HAL_TIM_Base_Start+0xc8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d115      	bne.n	8004c1e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <HAL_TIM_Base_Start+0xcc>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d015      	beq.n	8004c30 <HAL_TIM_Base_Start+0xa4>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0a:	d011      	beq.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	e008      	b.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	00010007 	.word	0x00010007

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a46      	ldr	r2, [pc, #280]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a43      	ldr	r2, [pc, #268]	@ (8004d8c <TIM_Base_SetConfig+0x130>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a42      	ldr	r2, [pc, #264]	@ (8004d90 <TIM_Base_SetConfig+0x134>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a41      	ldr	r2, [pc, #260]	@ (8004d94 <TIM_Base_SetConfig+0x138>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a40      	ldr	r2, [pc, #256]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a32      	ldr	r2, [pc, #200]	@ (8004d8c <TIM_Base_SetConfig+0x130>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a31      	ldr	r2, [pc, #196]	@ (8004d90 <TIM_Base_SetConfig+0x134>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <TIM_Base_SetConfig+0x138>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d9c <TIM_Base_SetConfig+0x140>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8004da0 <TIM_Base_SetConfig+0x144>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8004da4 <TIM_Base_SetConfig+0x148>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <TIM_Base_SetConfig+0x140>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <TIM_Base_SetConfig+0x144>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <TIM_Base_SetConfig+0x148>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d105      	bne.n	8004d7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40013400 	.word	0x40013400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e068      	b.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e32:	d018      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1a      	ldr	r2, [pc, #104]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10c      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000

08004eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e040      	b.n	8004f4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc f88e 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	@ 0x24
 8004ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fae0 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f825 	bl	8004f54 <UART_SetConfig>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e01b      	b.n	8004f4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb5f 	bl	8005608 <UART_CheckIdleState>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b08a      	sub	sp, #40	@ 0x28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4ba4      	ldr	r3, [pc, #656]	@ (8005214 <UART_SetConfig+0x2c0>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a99      	ldr	r2, [pc, #612]	@ (8005218 <UART_SetConfig+0x2c4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a90      	ldr	r2, [pc, #576]	@ (800521c <UART_SetConfig+0x2c8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d126      	bne.n	800502c <UART_SetConfig+0xd8>
 8004fde:	4b90      	ldr	r3, [pc, #576]	@ (8005220 <UART_SetConfig+0x2cc>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d81b      	bhi.n	8005024 <UART_SetConfig+0xd0>
 8004fec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff4 <UART_SetConfig+0xa0>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	0800501d 	.word	0x0800501d
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e116      	b.n	800523a <UART_SetConfig+0x2e6>
 800500c:	2302      	movs	r3, #2
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e112      	b.n	800523a <UART_SetConfig+0x2e6>
 8005014:	2304      	movs	r3, #4
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e10e      	b.n	800523a <UART_SetConfig+0x2e6>
 800501c:	2308      	movs	r3, #8
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e10a      	b.n	800523a <UART_SetConfig+0x2e6>
 8005024:	2310      	movs	r3, #16
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e106      	b.n	800523a <UART_SetConfig+0x2e6>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7c      	ldr	r2, [pc, #496]	@ (8005224 <UART_SetConfig+0x2d0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d138      	bne.n	80050a8 <UART_SetConfig+0x154>
 8005036:	4b7a      	ldr	r3, [pc, #488]	@ (8005220 <UART_SetConfig+0x2cc>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d82d      	bhi.n	80050a0 <UART_SetConfig+0x14c>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <UART_SetConfig+0xf8>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005081 	.word	0x08005081
 8005050:	080050a1 	.word	0x080050a1
 8005054:	080050a1 	.word	0x080050a1
 8005058:	080050a1 	.word	0x080050a1
 800505c:	08005091 	.word	0x08005091
 8005060:	080050a1 	.word	0x080050a1
 8005064:	080050a1 	.word	0x080050a1
 8005068:	080050a1 	.word	0x080050a1
 800506c:	08005089 	.word	0x08005089
 8005070:	080050a1 	.word	0x080050a1
 8005074:	080050a1 	.word	0x080050a1
 8005078:	080050a1 	.word	0x080050a1
 800507c:	08005099 	.word	0x08005099
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e0d8      	b.n	800523a <UART_SetConfig+0x2e6>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e0d4      	b.n	800523a <UART_SetConfig+0x2e6>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e0d0      	b.n	800523a <UART_SetConfig+0x2e6>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e0cc      	b.n	800523a <UART_SetConfig+0x2e6>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e0c8      	b.n	800523a <UART_SetConfig+0x2e6>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005228 <UART_SetConfig+0x2d4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d125      	bne.n	80050fe <UART_SetConfig+0x1aa>
 80050b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005220 <UART_SetConfig+0x2cc>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050bc:	2b30      	cmp	r3, #48	@ 0x30
 80050be:	d016      	beq.n	80050ee <UART_SetConfig+0x19a>
 80050c0:	2b30      	cmp	r3, #48	@ 0x30
 80050c2:	d818      	bhi.n	80050f6 <UART_SetConfig+0x1a2>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d00a      	beq.n	80050de <UART_SetConfig+0x18a>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d814      	bhi.n	80050f6 <UART_SetConfig+0x1a2>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <UART_SetConfig+0x182>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d008      	beq.n	80050e6 <UART_SetConfig+0x192>
 80050d4:	e00f      	b.n	80050f6 <UART_SetConfig+0x1a2>
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050dc:	e0ad      	b.n	800523a <UART_SetConfig+0x2e6>
 80050de:	2302      	movs	r3, #2
 80050e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e4:	e0a9      	b.n	800523a <UART_SetConfig+0x2e6>
 80050e6:	2304      	movs	r3, #4
 80050e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ec:	e0a5      	b.n	800523a <UART_SetConfig+0x2e6>
 80050ee:	2308      	movs	r3, #8
 80050f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f4:	e0a1      	b.n	800523a <UART_SetConfig+0x2e6>
 80050f6:	2310      	movs	r3, #16
 80050f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fc:	e09d      	b.n	800523a <UART_SetConfig+0x2e6>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a4a      	ldr	r2, [pc, #296]	@ (800522c <UART_SetConfig+0x2d8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d125      	bne.n	8005154 <UART_SetConfig+0x200>
 8005108:	4b45      	ldr	r3, [pc, #276]	@ (8005220 <UART_SetConfig+0x2cc>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005112:	2bc0      	cmp	r3, #192	@ 0xc0
 8005114:	d016      	beq.n	8005144 <UART_SetConfig+0x1f0>
 8005116:	2bc0      	cmp	r3, #192	@ 0xc0
 8005118:	d818      	bhi.n	800514c <UART_SetConfig+0x1f8>
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d00a      	beq.n	8005134 <UART_SetConfig+0x1e0>
 800511e:	2b80      	cmp	r3, #128	@ 0x80
 8005120:	d814      	bhi.n	800514c <UART_SetConfig+0x1f8>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <UART_SetConfig+0x1d8>
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d008      	beq.n	800513c <UART_SetConfig+0x1e8>
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x1f8>
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e082      	b.n	800523a <UART_SetConfig+0x2e6>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e07e      	b.n	800523a <UART_SetConfig+0x2e6>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e07a      	b.n	800523a <UART_SetConfig+0x2e6>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e076      	b.n	800523a <UART_SetConfig+0x2e6>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e072      	b.n	800523a <UART_SetConfig+0x2e6>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <UART_SetConfig+0x2dc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d12a      	bne.n	80051b4 <UART_SetConfig+0x260>
 800515e:	4b30      	ldr	r3, [pc, #192]	@ (8005220 <UART_SetConfig+0x2cc>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516c:	d01a      	beq.n	80051a4 <UART_SetConfig+0x250>
 800516e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005172:	d81b      	bhi.n	80051ac <UART_SetConfig+0x258>
 8005174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005178:	d00c      	beq.n	8005194 <UART_SetConfig+0x240>
 800517a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517e:	d815      	bhi.n	80051ac <UART_SetConfig+0x258>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <UART_SetConfig+0x238>
 8005184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005188:	d008      	beq.n	800519c <UART_SetConfig+0x248>
 800518a:	e00f      	b.n	80051ac <UART_SetConfig+0x258>
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005192:	e052      	b.n	800523a <UART_SetConfig+0x2e6>
 8005194:	2302      	movs	r3, #2
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800519a:	e04e      	b.n	800523a <UART_SetConfig+0x2e6>
 800519c:	2304      	movs	r3, #4
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a2:	e04a      	b.n	800523a <UART_SetConfig+0x2e6>
 80051a4:	2308      	movs	r3, #8
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051aa:	e046      	b.n	800523a <UART_SetConfig+0x2e6>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b2:	e042      	b.n	800523a <UART_SetConfig+0x2e6>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a17      	ldr	r2, [pc, #92]	@ (8005218 <UART_SetConfig+0x2c4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d13a      	bne.n	8005234 <UART_SetConfig+0x2e0>
 80051be:	4b18      	ldr	r3, [pc, #96]	@ (8005220 <UART_SetConfig+0x2cc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051cc:	d01a      	beq.n	8005204 <UART_SetConfig+0x2b0>
 80051ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d2:	d81b      	bhi.n	800520c <UART_SetConfig+0x2b8>
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d8:	d00c      	beq.n	80051f4 <UART_SetConfig+0x2a0>
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051de:	d815      	bhi.n	800520c <UART_SetConfig+0x2b8>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <UART_SetConfig+0x298>
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e8:	d008      	beq.n	80051fc <UART_SetConfig+0x2a8>
 80051ea:	e00f      	b.n	800520c <UART_SetConfig+0x2b8>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f2:	e022      	b.n	800523a <UART_SetConfig+0x2e6>
 80051f4:	2302      	movs	r3, #2
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fa:	e01e      	b.n	800523a <UART_SetConfig+0x2e6>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005202:	e01a      	b.n	800523a <UART_SetConfig+0x2e6>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520a:	e016      	b.n	800523a <UART_SetConfig+0x2e6>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005212:	e012      	b.n	800523a <UART_SetConfig+0x2e6>
 8005214:	efff69f3 	.word	0xefff69f3
 8005218:	40008000 	.word	0x40008000
 800521c:	40013800 	.word	0x40013800
 8005220:	40021000 	.word	0x40021000
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800
 800522c:	40004c00 	.word	0x40004c00
 8005230:	40005000 	.word	0x40005000
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a9f      	ldr	r2, [pc, #636]	@ (80054bc <UART_SetConfig+0x568>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d17a      	bne.n	800533a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005244:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005248:	2b08      	cmp	r3, #8
 800524a:	d824      	bhi.n	8005296 <UART_SetConfig+0x342>
 800524c:	a201      	add	r2, pc, #4	@ (adr r2, 8005254 <UART_SetConfig+0x300>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005279 	.word	0x08005279
 8005258:	08005297 	.word	0x08005297
 800525c:	08005281 	.word	0x08005281
 8005260:	08005297 	.word	0x08005297
 8005264:	08005287 	.word	0x08005287
 8005268:	08005297 	.word	0x08005297
 800526c:	08005297 	.word	0x08005297
 8005270:	08005297 	.word	0x08005297
 8005274:	0800528f 	.word	0x0800528f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7fe fee8 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 800527c:	61f8      	str	r0, [r7, #28]
        break;
 800527e:	e010      	b.n	80052a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005280:	4b8f      	ldr	r3, [pc, #572]	@ (80054c0 <UART_SetConfig+0x56c>)
 8005282:	61fb      	str	r3, [r7, #28]
        break;
 8005284:	e00d      	b.n	80052a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005286:	f7fe fe49 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 800528a:	61f8      	str	r0, [r7, #28]
        break;
 800528c:	e009      	b.n	80052a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e005      	b.n	80052a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80fb 	beq.w	80054a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d305      	bcc.n	80052c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d903      	bls.n	80052ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052cc:	e0e8      	b.n	80054a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2200      	movs	r2, #0
 80052d2:	461c      	mov	r4, r3
 80052d4:	4615      	mov	r5, r2
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	022b      	lsls	r3, r5, #8
 80052e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052e4:	0222      	lsls	r2, r4, #8
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	6849      	ldr	r1, [r1, #4]
 80052ea:	0849      	lsrs	r1, r1, #1
 80052ec:	2000      	movs	r0, #0
 80052ee:	4688      	mov	r8, r1
 80052f0:	4681      	mov	r9, r0
 80052f2:	eb12 0a08 	adds.w	sl, r2, r8
 80052f6:	eb43 0b09 	adc.w	fp, r3, r9
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005308:	4650      	mov	r0, sl
 800530a:	4659      	mov	r1, fp
 800530c:	f7fa ff5c 	bl	80001c8 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4613      	mov	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800531e:	d308      	bcc.n	8005332 <UART_SetConfig+0x3de>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005326:	d204      	bcs.n	8005332 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e0b6      	b.n	80054a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005338:	e0b2      	b.n	80054a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005342:	d15e      	bne.n	8005402 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005344:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005348:	2b08      	cmp	r3, #8
 800534a:	d828      	bhi.n	800539e <UART_SetConfig+0x44a>
 800534c:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0x400>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	0800539f 	.word	0x0800539f
 8005364:	0800538f 	.word	0x0800538f
 8005368:	0800539f 	.word	0x0800539f
 800536c:	0800539f 	.word	0x0800539f
 8005370:	0800539f 	.word	0x0800539f
 8005374:	08005397 	.word	0x08005397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005378:	f7fe fe68 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 800537c:	61f8      	str	r0, [r7, #28]
        break;
 800537e:	e014      	b.n	80053aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7fe fe7a 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005384:	61f8      	str	r0, [r7, #28]
        break;
 8005386:	e010      	b.n	80053aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005388:	4b4d      	ldr	r3, [pc, #308]	@ (80054c0 <UART_SetConfig+0x56c>)
 800538a:	61fb      	str	r3, [r7, #28]
        break;
 800538c:	e00d      	b.n	80053aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538e:	f7fe fdc5 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8005392:	61f8      	str	r0, [r7, #28]
        break;
 8005394:	e009      	b.n	80053aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800539a:	61fb      	str	r3, [r7, #28]
        break;
 800539c:	e005      	b.n	80053aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d077      	beq.n	80054a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	005a      	lsls	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	441a      	add	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b0f      	cmp	r3, #15
 80053ca:	d916      	bls.n	80053fa <UART_SetConfig+0x4a6>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d2:	d212      	bcs.n	80053fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f023 030f 	bic.w	r3, r3, #15
 80053dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	8afb      	ldrh	r3, [r7, #22]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	8afa      	ldrh	r2, [r7, #22]
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	e052      	b.n	80054a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005400:	e04e      	b.n	80054a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005402:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005406:	2b08      	cmp	r3, #8
 8005408:	d827      	bhi.n	800545a <UART_SetConfig+0x506>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <UART_SetConfig+0x4bc>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005435 	.word	0x08005435
 8005414:	0800543d 	.word	0x0800543d
 8005418:	08005445 	.word	0x08005445
 800541c:	0800545b 	.word	0x0800545b
 8005420:	0800544b 	.word	0x0800544b
 8005424:	0800545b 	.word	0x0800545b
 8005428:	0800545b 	.word	0x0800545b
 800542c:	0800545b 	.word	0x0800545b
 8005430:	08005453 	.word	0x08005453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005434:	f7fe fe0a 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005438:	61f8      	str	r0, [r7, #28]
        break;
 800543a:	e014      	b.n	8005466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800543c:	f7fe fe1c 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005440:	61f8      	str	r0, [r7, #28]
        break;
 8005442:	e010      	b.n	8005466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005444:	4b1e      	ldr	r3, [pc, #120]	@ (80054c0 <UART_SetConfig+0x56c>)
 8005446:	61fb      	str	r3, [r7, #28]
        break;
 8005448:	e00d      	b.n	8005466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544a:	f7fe fd67 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 800544e:	61f8      	str	r0, [r7, #28]
        break;
 8005450:	e009      	b.n	8005466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005456:	61fb      	str	r3, [r7, #28]
        break;
 8005458:	e005      	b.n	8005466 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005464:	bf00      	nop
    }

    if (pclk != 0U)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d019      	beq.n	80054a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	085a      	lsrs	r2, r3, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d909      	bls.n	800549a <UART_SetConfig+0x546>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548c:	d205      	bcs.n	800549a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60da      	str	r2, [r3, #12]
 8005498:	e002      	b.n	80054a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	@ 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ba:	bf00      	nop
 80054bc:	40008000 	.word	0x40008000
 80054c0:	00f42400 	.word	0x00f42400

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c2:	d10a      	bne.n	80055da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b098      	sub	sp, #96	@ 0x60
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005618:	f7fb fe3a 	bl	8001290 <HAL_GetTick>
 800561c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d12e      	bne.n	800568a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f88c 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d021      	beq.n	800568a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565a:	653b      	str	r3, [r7, #80]	@ 0x50
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005664:	647b      	str	r3, [r7, #68]	@ 0x44
 8005666:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800566a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e062      	b.n	8005750 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d149      	bne.n	800572c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f856 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03c      	beq.n	800572c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	623b      	str	r3, [r7, #32]
   return(result);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	617b      	str	r3, [r7, #20]
   return(result);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e011      	b.n	8005750 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3758      	adds	r7, #88	@ 0x58
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	e04f      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d04b      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fb fd8d 	bl	8001290 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e04e      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d037      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b80      	cmp	r3, #128	@ 0x80
 800579e:	d034      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b40      	cmp	r3, #64	@ 0x40
 80057a4:	d031      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d110      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2208      	movs	r2, #8
 80057ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f838 	bl	8005832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2208      	movs	r2, #8
 80057c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e029      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e4:	d111      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f81e 	bl	8005832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	429a      	cmp	r2, r3
 8005826:	d0a0      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b095      	sub	sp, #84	@ 0x54
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005858:	643b      	str	r3, [r7, #64]	@ 0x40
 800585a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800585e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	61fb      	str	r3, [r7, #28]
   return(result);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d118      	bne.n	80058da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f023 0310 	bic.w	r3, r3, #16
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	613b      	str	r3, [r7, #16]
   return(result);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e6      	bne.n	80058a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058ee:	bf00      	nop
 80058f0:	3754      	adds	r7, #84	@ 0x54
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <arm_rfft_32_fast_init_f32>:
 80058fc:	b178      	cbz	r0, 800591e <arm_rfft_32_fast_init_f32+0x22>
 80058fe:	b430      	push	{r4, r5}
 8005900:	4908      	ldr	r1, [pc, #32]	@ (8005924 <arm_rfft_32_fast_init_f32+0x28>)
 8005902:	4a09      	ldr	r2, [pc, #36]	@ (8005928 <arm_rfft_32_fast_init_f32+0x2c>)
 8005904:	2310      	movs	r3, #16
 8005906:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800590a:	8003      	strh	r3, [r0, #0]
 800590c:	2520      	movs	r5, #32
 800590e:	2414      	movs	r4, #20
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <arm_rfft_32_fast_init_f32+0x30>)
 8005912:	8205      	strh	r5, [r0, #16]
 8005914:	8184      	strh	r4, [r0, #12]
 8005916:	6143      	str	r3, [r0, #20]
 8005918:	bc30      	pop	{r4, r5}
 800591a:	2000      	movs	r0, #0
 800591c:	4770      	bx	lr
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	4770      	bx	lr
 8005924:	08007c90 	.word	0x08007c90
 8005928:	0800c5c8 	.word	0x0800c5c8
 800592c:	08015348 	.word	0x08015348

08005930 <arm_rfft_64_fast_init_f32>:
 8005930:	b178      	cbz	r0, 8005952 <arm_rfft_64_fast_init_f32+0x22>
 8005932:	b430      	push	{r4, r5}
 8005934:	4908      	ldr	r1, [pc, #32]	@ (8005958 <arm_rfft_64_fast_init_f32+0x28>)
 8005936:	4a09      	ldr	r2, [pc, #36]	@ (800595c <arm_rfft_64_fast_init_f32+0x2c>)
 8005938:	2320      	movs	r3, #32
 800593a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800593e:	8003      	strh	r3, [r0, #0]
 8005940:	2540      	movs	r5, #64	@ 0x40
 8005942:	2430      	movs	r4, #48	@ 0x30
 8005944:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <arm_rfft_64_fast_init_f32+0x30>)
 8005946:	8205      	strh	r5, [r0, #16]
 8005948:	8184      	strh	r4, [r0, #12]
 800594a:	6143      	str	r3, [r0, #20]
 800594c:	bc30      	pop	{r4, r5}
 800594e:	2000      	movs	r0, #0
 8005950:	4770      	bx	lr
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	4770      	bx	lr
 8005958:	08009de8 	.word	0x08009de8
 800595c:	08010e48 	.word	0x08010e48
 8005960:	08019bc8 	.word	0x08019bc8

08005964 <arm_rfft_256_fast_init_f32>:
 8005964:	b180      	cbz	r0, 8005988 <arm_rfft_256_fast_init_f32+0x24>
 8005966:	b430      	push	{r4, r5}
 8005968:	4909      	ldr	r1, [pc, #36]	@ (8005990 <arm_rfft_256_fast_init_f32+0x2c>)
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <arm_rfft_256_fast_init_f32+0x30>)
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005972:	8003      	strh	r3, [r0, #0]
 8005974:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8005978:	24d0      	movs	r4, #208	@ 0xd0
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <arm_rfft_256_fast_init_f32+0x34>)
 800597c:	8205      	strh	r5, [r0, #16]
 800597e:	8184      	strh	r4, [r0, #12]
 8005980:	6143      	str	r3, [r0, #20]
 8005982:	bc30      	pop	{r4, r5}
 8005984:	2000      	movs	r0, #0
 8005986:	4770      	bx	lr
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	08007af0 	.word	0x08007af0
 8005994:	0800c1c8 	.word	0x0800c1c8
 8005998:	08014f48 	.word	0x08014f48

0800599c <arm_rfft_512_fast_init_f32>:
 800599c:	b190      	cbz	r0, 80059c4 <arm_rfft_512_fast_init_f32+0x28>
 800599e:	b430      	push	{r4, r5}
 80059a0:	490a      	ldr	r1, [pc, #40]	@ (80059cc <arm_rfft_512_fast_init_f32+0x30>)
 80059a2:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <arm_rfft_512_fast_init_f32+0x34>)
 80059a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80059ac:	8003      	strh	r3, [r0, #0]
 80059ae:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80059b2:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <arm_rfft_512_fast_init_f32+0x38>)
 80059b8:	8205      	strh	r5, [r0, #16]
 80059ba:	8184      	strh	r4, [r0, #12]
 80059bc:	6143      	str	r3, [r0, #20]
 80059be:	bc30      	pop	{r4, r5}
 80059c0:	2000      	movs	r0, #0
 80059c2:	4770      	bx	lr
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	08009a78 	.word	0x08009a78
 80059d0:	08010648 	.word	0x08010648
 80059d4:	080193c8 	.word	0x080193c8

080059d8 <arm_rfft_1024_fast_init_f32>:
 80059d8:	b190      	cbz	r0, 8005a00 <arm_rfft_1024_fast_init_f32+0x28>
 80059da:	b430      	push	{r4, r5}
 80059dc:	490a      	ldr	r1, [pc, #40]	@ (8005a08 <arm_rfft_1024_fast_init_f32+0x30>)
 80059de:	4a0b      	ldr	r2, [pc, #44]	@ (8005a0c <arm_rfft_1024_fast_init_f32+0x34>)
 80059e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80059e8:	8003      	strh	r3, [r0, #0]
 80059ea:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80059ee:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80059f2:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <arm_rfft_1024_fast_init_f32+0x38>)
 80059f4:	8205      	strh	r5, [r0, #16]
 80059f6:	8184      	strh	r4, [r0, #12]
 80059f8:	6143      	str	r3, [r0, #20]
 80059fa:	bc30      	pop	{r4, r5}
 80059fc:	2000      	movs	r0, #0
 80059fe:	4770      	bx	lr
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	08009e48 	.word	0x08009e48
 8005a0c:	08010f48 	.word	0x08010f48
 8005a10:	08011f48 	.word	0x08011f48

08005a14 <arm_rfft_2048_fast_init_f32>:
 8005a14:	b190      	cbz	r0, 8005a3c <arm_rfft_2048_fast_init_f32+0x28>
 8005a16:	b430      	push	{r4, r5}
 8005a18:	490a      	ldr	r1, [pc, #40]	@ (8005a44 <arm_rfft_2048_fast_init_f32+0x30>)
 8005a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8005a48 <arm_rfft_2048_fast_init_f32+0x34>)
 8005a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a20:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005a24:	8003      	strh	r3, [r0, #0]
 8005a26:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8005a2a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8005a2e:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <arm_rfft_2048_fast_init_f32+0x38>)
 8005a30:	8205      	strh	r5, [r0, #16]
 8005a32:	8184      	strh	r4, [r0, #12]
 8005a34:	6143      	str	r3, [r0, #20]
 8005a36:	bc30      	pop	{r4, r5}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	4770      	bx	lr
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	08006ce0 	.word	0x08006ce0
 8005a48:	0800a1c8 	.word	0x0800a1c8
 8005a4c:	08012f48 	.word	0x08012f48

08005a50 <arm_rfft_4096_fast_init_f32>:
 8005a50:	b190      	cbz	r0, 8005a78 <arm_rfft_4096_fast_init_f32+0x28>
 8005a52:	b430      	push	{r4, r5}
 8005a54:	490a      	ldr	r1, [pc, #40]	@ (8005a80 <arm_rfft_4096_fast_init_f32+0x30>)
 8005a56:	4a0b      	ldr	r2, [pc, #44]	@ (8005a84 <arm_rfft_4096_fast_init_f32+0x34>)
 8005a58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a5c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005a60:	8003      	strh	r3, [r0, #0]
 8005a62:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005a66:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005a6a:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <arm_rfft_4096_fast_init_f32+0x38>)
 8005a6c:	8205      	strh	r5, [r0, #16]
 8005a6e:	8184      	strh	r4, [r0, #12]
 8005a70:	6143      	str	r3, [r0, #20]
 8005a72:	bc30      	pop	{r4, r5}
 8005a74:	2000      	movs	r0, #0
 8005a76:	4770      	bx	lr
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	08007cb8 	.word	0x08007cb8
 8005a84:	0800c648 	.word	0x0800c648
 8005a88:	080153c8 	.word	0x080153c8

08005a8c <arm_rfft_fast_init_f32>:
 8005a8c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005a90:	d01f      	beq.n	8005ad2 <arm_rfft_fast_init_f32+0x46>
 8005a92:	d90b      	bls.n	8005aac <arm_rfft_fast_init_f32+0x20>
 8005a94:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005a98:	d019      	beq.n	8005ace <arm_rfft_fast_init_f32+0x42>
 8005a9a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8005a9e:	d012      	beq.n	8005ac6 <arm_rfft_fast_init_f32+0x3a>
 8005aa0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005aa4:	d00d      	beq.n	8005ac2 <arm_rfft_fast_init_f32+0x36>
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	4770      	bx	lr
 8005aac:	2940      	cmp	r1, #64	@ 0x40
 8005aae:	d00c      	beq.n	8005aca <arm_rfft_fast_init_f32+0x3e>
 8005ab0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005ab4:	d003      	beq.n	8005abe <arm_rfft_fast_init_f32+0x32>
 8005ab6:	2920      	cmp	r1, #32
 8005ab8:	d1f5      	bne.n	8005aa6 <arm_rfft_fast_init_f32+0x1a>
 8005aba:	4b07      	ldr	r3, [pc, #28]	@ (8005ad8 <arm_rfft_fast_init_f32+0x4c>)
 8005abc:	4718      	bx	r3
 8005abe:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <arm_rfft_fast_init_f32+0x50>)
 8005ac0:	4718      	bx	r3
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <arm_rfft_fast_init_f32+0x54>)
 8005ac4:	4718      	bx	r3
 8005ac6:	4b07      	ldr	r3, [pc, #28]	@ (8005ae4 <arm_rfft_fast_init_f32+0x58>)
 8005ac8:	4718      	bx	r3
 8005aca:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <arm_rfft_fast_init_f32+0x5c>)
 8005acc:	e7f6      	b.n	8005abc <arm_rfft_fast_init_f32+0x30>
 8005ace:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <arm_rfft_fast_init_f32+0x60>)
 8005ad0:	e7f4      	b.n	8005abc <arm_rfft_fast_init_f32+0x30>
 8005ad2:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <arm_rfft_fast_init_f32+0x64>)
 8005ad4:	e7f2      	b.n	8005abc <arm_rfft_fast_init_f32+0x30>
 8005ad6:	bf00      	nop
 8005ad8:	080058fd 	.word	0x080058fd
 8005adc:	08005965 	.word	0x08005965
 8005ae0:	080059d9 	.word	0x080059d9
 8005ae4:	08005a51 	.word	0x08005a51
 8005ae8:	08005931 	.word	0x08005931
 8005aec:	08005a15 	.word	0x08005a15
 8005af0:	0800599d 	.word	0x0800599d

08005af4 <stage_rfft_f32>:
 8005af4:	b410      	push	{r4}
 8005af6:	edd1 7a00 	vldr	s15, [r1]
 8005afa:	ed91 7a01 	vldr	s14, [r1, #4]
 8005afe:	8804      	ldrh	r4, [r0, #0]
 8005b00:	6940      	ldr	r0, [r0, #20]
 8005b02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005b06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b0a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005b0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b16:	3c01      	subs	r4, #1
 8005b18:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005b1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005b20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8005b24:	ed82 7a00 	vstr	s14, [r2]
 8005b28:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b2c:	3010      	adds	r0, #16
 8005b2e:	3210      	adds	r2, #16
 8005b30:	3b08      	subs	r3, #8
 8005b32:	3110      	adds	r1, #16
 8005b34:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005b38:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005b40:	edd3 4a03 	vldr	s9, [r3, #12]
 8005b44:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005b48:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005b4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005b50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005b54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005b58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005b5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005b60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005b64:	ee37 7a23 	vadd.f32	s14, s14, s7
 8005b68:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005b6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005b70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005b74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005b80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005b84:	3c01      	subs	r4, #1
 8005b86:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005b8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005b8e:	f1a3 0308 	sub.w	r3, r3, #8
 8005b92:	f101 0108 	add.w	r1, r1, #8
 8005b96:	f100 0008 	add.w	r0, r0, #8
 8005b9a:	f102 0208 	add.w	r2, r2, #8
 8005b9e:	d1c9      	bne.n	8005b34 <stage_rfft_f32+0x40>
 8005ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop

08005ba8 <merge_rfft_f32>:
 8005ba8:	b410      	push	{r4}
 8005baa:	edd1 7a00 	vldr	s15, [r1]
 8005bae:	edd1 6a01 	vldr	s13, [r1, #4]
 8005bb2:	8804      	ldrh	r4, [r0, #0]
 8005bb4:	6940      	ldr	r0, [r0, #20]
 8005bb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005bba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bbe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005bc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005bc6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005bca:	3c01      	subs	r4, #1
 8005bcc:	ed82 7a00 	vstr	s14, [r2]
 8005bd0:	edc2 7a01 	vstr	s15, [r2, #4]
 8005bd4:	b3dc      	cbz	r4, 8005c4e <merge_rfft_f32+0xa6>
 8005bd6:	00e3      	lsls	r3, r4, #3
 8005bd8:	3b08      	subs	r3, #8
 8005bda:	440b      	add	r3, r1
 8005bdc:	3010      	adds	r0, #16
 8005bde:	3210      	adds	r2, #16
 8005be0:	3110      	adds	r1, #16
 8005be2:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005be6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005bea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005bee:	edd3 4a03 	vldr	s9, [r3, #12]
 8005bf2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005bf6:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005bfa:	ee75 5a47 	vsub.f32	s11, s10, s14
 8005bfe:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005c02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005c06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005c0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005c0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005c12:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005c16:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005c1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005c1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005c22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005c26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005c2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005c32:	3c01      	subs	r4, #1
 8005c34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005c38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005c3c:	f1a3 0308 	sub.w	r3, r3, #8
 8005c40:	f101 0108 	add.w	r1, r1, #8
 8005c44:	f100 0008 	add.w	r0, r0, #8
 8005c48:	f102 0208 	add.w	r2, r2, #8
 8005c4c:	d1c9      	bne.n	8005be2 <merge_rfft_f32+0x3a>
 8005c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <arm_rfft_fast_f32>:
 8005c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	8a05      	ldrh	r5, [r0, #16]
 8005c5a:	086d      	lsrs	r5, r5, #1
 8005c5c:	8005      	strh	r5, [r0, #0]
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4616      	mov	r6, r2
 8005c62:	461d      	mov	r5, r3
 8005c64:	b14b      	cbz	r3, 8005c7a <arm_rfft_fast_f32+0x26>
 8005c66:	f7ff ff9f 	bl	8005ba8 <merge_rfft_f32>
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4620      	mov	r0, r4
 8005c70:	2301      	movs	r3, #1
 8005c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	f000 bb33 	b.w	80062e0 <arm_cfft_f32>
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f000 fb2e 	bl	80062e0 <arm_cfft_f32>
 8005c84:	4632      	mov	r2, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	4620      	mov	r0, r4
 8005c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	f7ff bf31 	b.w	8005af4 <stage_rfft_f32>
 8005c92:	bf00      	nop

08005c94 <arm_cfft_radix8by2_f32>:
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c98:	ed2d 8b08 	vpush	{d8-d11}
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	f8b7 c000 	ldrh.w	ip, [r7]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8005caa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8005cae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005cb2:	f000 80b0 	beq.w	8005e16 <arm_cfft_radix8by2_f32+0x182>
 8005cb6:	008c      	lsls	r4, r1, #2
 8005cb8:	3410      	adds	r4, #16
 8005cba:	f100 0310 	add.w	r3, r0, #16
 8005cbe:	1906      	adds	r6, r0, r4
 8005cc0:	3210      	adds	r2, #16
 8005cc2:	4444      	add	r4, r8
 8005cc4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005cc8:	f108 0510 	add.w	r5, r8, #16
 8005ccc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005cd0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005cd4:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005cd8:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005cdc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005ce0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005ce4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005ce8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8005cec:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005cf0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005cf4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005cf8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005cfc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005d00:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d04:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005d08:	ed56 1a01 	vldr	s3, [r6, #-4]
 8005d0c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8005d10:	ee37 ba22 	vadd.f32	s22, s14, s5
 8005d14:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8005d18:	ee33 9a04 	vadd.f32	s18, s6, s8
 8005d1c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8005d20:	ee75 aa00 	vadd.f32	s21, s10, s0
 8005d24:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8005d28:	ee71 8a06 	vadd.f32	s17, s2, s12
 8005d2c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8005d30:	ed03 ba03 	vstr	s22, [r3, #-12]
 8005d34:	ed43 aa02 	vstr	s21, [r3, #-8]
 8005d38:	ed03 aa01 	vstr	s20, [r3, #-4]
 8005d3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005d40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005d44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005d48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005d4c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8005d50:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005d54:	ee34 4a43 	vsub.f32	s8, s8, s6
 8005d58:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005d5c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005d60:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005d64:	ee27 8a26 	vmul.f32	s16, s14, s13
 8005d68:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005d6c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005d70:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005d74:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005d78:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005d7c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005d80:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005d84:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005d88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005d8c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005d90:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005d94:	ed05 7a03 	vstr	s14, [r5, #-12]
 8005d98:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005d9c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005da0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005da4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005da8:	ee76 6a41 	vsub.f32	s13, s12, s2
 8005dac:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005db0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005db4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005db8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005dbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005dc0:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005dc4:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005dc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005dcc:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005dd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005dd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005dd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005ddc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005de0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005de4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005de8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005dec:	3310      	adds	r3, #16
 8005dee:	4563      	cmp	r3, ip
 8005df0:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005df4:	f106 0610 	add.w	r6, r6, #16
 8005df8:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005dfc:	f102 0210 	add.w	r2, r2, #16
 8005e00:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005e04:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005e08:	f105 0510 	add.w	r5, r5, #16
 8005e0c:	f104 0410 	add.w	r4, r4, #16
 8005e10:	f47f af5c 	bne.w	8005ccc <arm_cfft_radix8by2_f32+0x38>
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	b28c      	uxth	r4, r1
 8005e18:	4621      	mov	r1, r4
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	f000 fc1c 	bl	8006658 <arm_radix8_butterfly_f32>
 8005e20:	ecbd 8b08 	vpop	{d8-d11}
 8005e24:	4621      	mov	r1, r4
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4640      	mov	r0, r8
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	f000 bc12 	b.w	8006658 <arm_radix8_butterfly_f32>

08005e34 <arm_cfft_radix8by4_f32>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	ed2d 8b0a 	vpush	{d8-d12}
 8005e3c:	b08d      	sub	sp, #52	@ 0x34
 8005e3e:	460d      	mov	r5, r1
 8005e40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e42:	8801      	ldrh	r1, [r0, #0]
 8005e44:	6842      	ldr	r2, [r0, #4]
 8005e46:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e48:	0849      	lsrs	r1, r1, #1
 8005e4a:	008b      	lsls	r3, r1, #2
 8005e4c:	18ee      	adds	r6, r5, r3
 8005e4e:	18f0      	adds	r0, r6, r3
 8005e50:	edd0 5a00 	vldr	s11, [r0]
 8005e54:	edd5 7a00 	vldr	s15, [r5]
 8005e58:	ed96 7a00 	vldr	s14, [r6]
 8005e5c:	edd0 3a01 	vldr	s7, [r0, #4]
 8005e60:	ed96 4a01 	vldr	s8, [r6, #4]
 8005e64:	ed95 5a01 	vldr	s10, [r5, #4]
 8005e68:	9008      	str	r0, [sp, #32]
 8005e6a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8005e6e:	18c7      	adds	r7, r0, r3
 8005e70:	edd7 4a00 	vldr	s9, [r7]
 8005e74:	ed97 3a01 	vldr	s6, [r7, #4]
 8005e78:	9701      	str	r7, [sp, #4]
 8005e7a:	ee77 6a06 	vadd.f32	s13, s14, s12
 8005e7e:	462c      	mov	r4, r5
 8005e80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005e84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005e88:	ee16 ca90 	vmov	ip, s13
 8005e8c:	f844 cb08 	str.w	ip, [r4], #8
 8005e90:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005e94:	edd6 5a01 	vldr	s11, [r6, #4]
 8005e98:	edd7 2a01 	vldr	s5, [r7, #4]
 8005e9c:	9404      	str	r4, [sp, #16]
 8005e9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005ea2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005ea6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005eaa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005eae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005eb2:	0849      	lsrs	r1, r1, #1
 8005eb4:	f102 0e08 	add.w	lr, r2, #8
 8005eb8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005ebc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005ec0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ec2:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005ec6:	f1a1 0902 	sub.w	r9, r1, #2
 8005eca:	f8cd e00c 	str.w	lr, [sp, #12]
 8005ece:	4631      	mov	r1, r6
 8005ed0:	ee13 ea90 	vmov	lr, s7
 8005ed4:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005ed8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8005edc:	4604      	mov	r4, r0
 8005ede:	edc5 5a01 	vstr	s11, [r5, #4]
 8005ee2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005ee6:	f841 eb08 	str.w	lr, [r1], #8
 8005eea:	ee34 5a24 	vadd.f32	s10, s8, s9
 8005eee:	ee16 ea10 	vmov	lr, s12
 8005ef2:	ed86 5a01 	vstr	s10, [r6, #4]
 8005ef6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005efa:	f844 eb08 	str.w	lr, [r4], #8
 8005efe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005f02:	edc0 6a01 	vstr	s13, [r0, #4]
 8005f06:	9405      	str	r4, [sp, #20]
 8005f08:	4604      	mov	r4, r0
 8005f0a:	ee17 0a90 	vmov	r0, s15
 8005f0e:	9106      	str	r1, [sp, #24]
 8005f10:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005f14:	f102 0110 	add.w	r1, r2, #16
 8005f18:	46bc      	mov	ip, r7
 8005f1a:	9100      	str	r1, [sp, #0]
 8005f1c:	f847 0b08 	str.w	r0, [r7], #8
 8005f20:	f102 0118 	add.w	r1, r2, #24
 8005f24:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8005f28:	9102      	str	r1, [sp, #8]
 8005f2a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005f2e:	9007      	str	r0, [sp, #28]
 8005f30:	f000 8134 	beq.w	800619c <arm_cfft_radix8by4_f32+0x368>
 8005f34:	f102 0920 	add.w	r9, r2, #32
 8005f38:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8005f3c:	9a01      	ldr	r2, [sp, #4]
 8005f3e:	f8dd a000 	ldr.w	sl, [sp]
 8005f42:	3b0c      	subs	r3, #12
 8005f44:	4683      	mov	fp, r0
 8005f46:	4463      	add	r3, ip
 8005f48:	f105 0e10 	add.w	lr, r5, #16
 8005f4c:	f1a4 010c 	sub.w	r1, r4, #12
 8005f50:	f104 0510 	add.w	r5, r4, #16
 8005f54:	f1a6 0c0c 	sub.w	ip, r6, #12
 8005f58:	f1a2 040c 	sub.w	r4, r2, #12
 8005f5c:	f106 0010 	add.w	r0, r6, #16
 8005f60:	3210      	adds	r2, #16
 8005f62:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8005f66:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005f6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005f6e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005f72:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005f76:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8005f7a:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005f7e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005f82:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005f86:	ee30 6a26 	vadd.f32	s12, s0, s13
 8005f8a:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005f8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005f92:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005f96:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005f9a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005f9e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005fa2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005fa6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005faa:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005fae:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005fb2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005fb6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8005fba:	ed94 7a02 	vldr	s14, [r4, #8]
 8005fbe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005fc2:	ed91 ba02 	vldr	s22, [r1, #8]
 8005fc6:	edd3 9a02 	vldr	s19, [r3, #8]
 8005fca:	edd4 2a01 	vldr	s5, [r4, #4]
 8005fce:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005fd2:	ed93 5a01 	vldr	s10, [r3, #4]
 8005fd6:	edd1 0a01 	vldr	s1, [r1, #4]
 8005fda:	ee72 6a07 	vadd.f32	s13, s4, s14
 8005fde:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005fe2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005fe6:	ee79 4a22 	vadd.f32	s9, s18, s5
 8005fea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8005fee:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005ff2:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005ff6:	ed91 7a01 	vldr	s14, [r1, #4]
 8005ffa:	edd3 8a01 	vldr	s17, [r3, #4]
 8005ffe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006002:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006006:	ee37 7a28 	vadd.f32	s14, s14, s17
 800600a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800600e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006012:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006016:	ed1a aa02 	vldr	s20, [sl, #-8]
 800601a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800601e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006022:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006026:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800602a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800602e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006032:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006036:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800603a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800603e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006042:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006046:	ee68 8a87 	vmul.f32	s17, s17, s14
 800604a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800604e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006052:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006056:	ee3b aaca 	vsub.f32	s20, s23, s20
 800605a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800605e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006062:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006066:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800606a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800606e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006072:	edc1 8a01 	vstr	s17, [r1, #4]
 8006076:	ed81 aa02 	vstr	s20, [r1, #8]
 800607a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800607e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006082:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006086:	ed59 6a03 	vldr	s13, [r9, #-12]
 800608a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800608e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006092:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006096:	ee66 9a26 	vmul.f32	s19, s12, s13
 800609a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800609e:	ee26 6a23 	vmul.f32	s12, s12, s7
 80060a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80060a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80060aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80060ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80060b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80060b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80060ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80060be:	ee79 3a29 	vadd.f32	s7, s18, s19
 80060c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80060c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80060ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80060ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 80060d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80060d6:	ed84 7a01 	vstr	s14, [r4, #4]
 80060da:	ed84 4a02 	vstr	s8, [r4, #8]
 80060de:	ee35 6a81 	vadd.f32	s12, s11, s2
 80060e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80060e6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80060ea:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80060ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80060f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80060f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80060fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80060fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006102:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006106:	ee26 6a26 	vmul.f32	s12, s12, s13
 800610a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800610e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006112:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006116:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800611a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800611e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006122:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006126:	f1bb 0b01 	subs.w	fp, fp, #1
 800612a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800612e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006132:	f10e 0e08 	add.w	lr, lr, #8
 8006136:	ed83 3a02 	vstr	s6, [r3, #8]
 800613a:	ed83 7a01 	vstr	s14, [r3, #4]
 800613e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006142:	f10a 0a08 	add.w	sl, sl, #8
 8006146:	f100 0008 	add.w	r0, r0, #8
 800614a:	f1a1 0108 	sub.w	r1, r1, #8
 800614e:	f109 0910 	add.w	r9, r9, #16
 8006152:	f105 0508 	add.w	r5, r5, #8
 8006156:	f1a4 0408 	sub.w	r4, r4, #8
 800615a:	f108 0818 	add.w	r8, r8, #24
 800615e:	f102 0208 	add.w	r2, r2, #8
 8006162:	f1a3 0308 	sub.w	r3, r3, #8
 8006166:	f47f aefc 	bne.w	8005f62 <arm_cfft_radix8by4_f32+0x12e>
 800616a:	9907      	ldr	r1, [sp, #28]
 800616c:	9800      	ldr	r0, [sp, #0]
 800616e:	00cb      	lsls	r3, r1, #3
 8006170:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006174:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006178:	9100      	str	r1, [sp, #0]
 800617a:	9904      	ldr	r1, [sp, #16]
 800617c:	4419      	add	r1, r3
 800617e:	9104      	str	r1, [sp, #16]
 8006180:	9903      	ldr	r1, [sp, #12]
 8006182:	4419      	add	r1, r3
 8006184:	9103      	str	r1, [sp, #12]
 8006186:	9906      	ldr	r1, [sp, #24]
 8006188:	4419      	add	r1, r3
 800618a:	9106      	str	r1, [sp, #24]
 800618c:	9905      	ldr	r1, [sp, #20]
 800618e:	441f      	add	r7, r3
 8006190:	4419      	add	r1, r3
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	9105      	str	r1, [sp, #20]
 8006196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619a:	9302      	str	r3, [sp, #8]
 800619c:	9904      	ldr	r1, [sp, #16]
 800619e:	9805      	ldr	r0, [sp, #20]
 80061a0:	ed91 4a00 	vldr	s8, [r1]
 80061a4:	edd0 6a00 	vldr	s13, [r0]
 80061a8:	9b06      	ldr	r3, [sp, #24]
 80061aa:	ed97 3a00 	vldr	s6, [r7]
 80061ae:	edd3 7a00 	vldr	s15, [r3]
 80061b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80061b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80061ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80061be:	ed93 7a01 	vldr	s14, [r3, #4]
 80061c2:	9a03      	ldr	r2, [sp, #12]
 80061c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80061c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80061cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80061d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80061d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80061d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80061dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80061e0:	ed81 5a00 	vstr	s10, [r1]
 80061e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80061e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80061ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80061f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80061f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80061f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80061fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8006200:	edd2 1a00 	vldr	s3, [r2]
 8006204:	edd2 2a01 	vldr	s5, [r2, #4]
 8006208:	ee34 5a83 	vadd.f32	s10, s9, s6
 800620c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006210:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006214:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006218:	ee24 4a22 	vmul.f32	s8, s8, s5
 800621c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006220:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006224:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006228:	ee35 5a44 	vsub.f32	s10, s10, s8
 800622c:	edc3 2a00 	vstr	s5, [r3]
 8006230:	ed83 5a01 	vstr	s10, [r3, #4]
 8006234:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006238:	9b00      	ldr	r3, [sp, #0]
 800623a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800623e:	ed93 4a01 	vldr	s8, [r3, #4]
 8006242:	ed93 5a00 	vldr	s10, [r3]
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800624c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006250:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006254:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006258:	ee65 5a84 	vmul.f32	s11, s11, s8
 800625c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006260:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006264:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006268:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800626c:	ed80 6a01 	vstr	s12, [r0, #4]
 8006270:	edc0 5a00 	vstr	s11, [r0]
 8006274:	edd3 5a01 	vldr	s11, [r3, #4]
 8006278:	edd3 6a00 	vldr	s13, [r3]
 800627c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006280:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006284:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006288:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800628c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006290:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006294:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006298:	ee76 7a27 	vadd.f32	s15, s12, s15
 800629c:	ed87 7a01 	vstr	s14, [r7, #4]
 80062a0:	edc7 7a00 	vstr	s15, [r7]
 80062a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80062a8:	4621      	mov	r1, r4
 80062aa:	686a      	ldr	r2, [r5, #4]
 80062ac:	2304      	movs	r3, #4
 80062ae:	f000 f9d3 	bl	8006658 <arm_radix8_butterfly_f32>
 80062b2:	4630      	mov	r0, r6
 80062b4:	4621      	mov	r1, r4
 80062b6:	686a      	ldr	r2, [r5, #4]
 80062b8:	2304      	movs	r3, #4
 80062ba:	f000 f9cd 	bl	8006658 <arm_radix8_butterfly_f32>
 80062be:	9808      	ldr	r0, [sp, #32]
 80062c0:	686a      	ldr	r2, [r5, #4]
 80062c2:	4621      	mov	r1, r4
 80062c4:	2304      	movs	r3, #4
 80062c6:	f000 f9c7 	bl	8006658 <arm_radix8_butterfly_f32>
 80062ca:	686a      	ldr	r2, [r5, #4]
 80062cc:	9801      	ldr	r0, [sp, #4]
 80062ce:	4621      	mov	r1, r4
 80062d0:	2304      	movs	r3, #4
 80062d2:	b00d      	add	sp, #52	@ 0x34
 80062d4:	ecbd 8b0a 	vpop	{d8-d12}
 80062d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	f000 b9bc 	b.w	8006658 <arm_radix8_butterfly_f32>

080062e0 <arm_cfft_f32>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	2a01      	cmp	r2, #1
 80062e6:	4606      	mov	r6, r0
 80062e8:	4617      	mov	r7, r2
 80062ea:	460c      	mov	r4, r1
 80062ec:	4698      	mov	r8, r3
 80062ee:	8805      	ldrh	r5, [r0, #0]
 80062f0:	d056      	beq.n	80063a0 <arm_cfft_f32+0xc0>
 80062f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80062f6:	d063      	beq.n	80063c0 <arm_cfft_f32+0xe0>
 80062f8:	d916      	bls.n	8006328 <arm_cfft_f32+0x48>
 80062fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80062fe:	d01a      	beq.n	8006336 <arm_cfft_f32+0x56>
 8006300:	d947      	bls.n	8006392 <arm_cfft_f32+0xb2>
 8006302:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006306:	d05b      	beq.n	80063c0 <arm_cfft_f32+0xe0>
 8006308:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800630c:	d105      	bne.n	800631a <arm_cfft_f32+0x3a>
 800630e:	2301      	movs	r3, #1
 8006310:	6872      	ldr	r2, [r6, #4]
 8006312:	4629      	mov	r1, r5
 8006314:	4620      	mov	r0, r4
 8006316:	f000 f99f 	bl	8006658 <arm_radix8_butterfly_f32>
 800631a:	f1b8 0f00 	cmp.w	r8, #0
 800631e:	d111      	bne.n	8006344 <arm_cfft_f32+0x64>
 8006320:	2f01      	cmp	r7, #1
 8006322:	d016      	beq.n	8006352 <arm_cfft_f32+0x72>
 8006324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006328:	2d20      	cmp	r5, #32
 800632a:	d049      	beq.n	80063c0 <arm_cfft_f32+0xe0>
 800632c:	d935      	bls.n	800639a <arm_cfft_f32+0xba>
 800632e:	2d40      	cmp	r5, #64	@ 0x40
 8006330:	d0ed      	beq.n	800630e <arm_cfft_f32+0x2e>
 8006332:	2d80      	cmp	r5, #128	@ 0x80
 8006334:	d1f1      	bne.n	800631a <arm_cfft_f32+0x3a>
 8006336:	4621      	mov	r1, r4
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff fcab 	bl	8005c94 <arm_cfft_radix8by2_f32>
 800633e:	f1b8 0f00 	cmp.w	r8, #0
 8006342:	d0ed      	beq.n	8006320 <arm_cfft_f32+0x40>
 8006344:	68b2      	ldr	r2, [r6, #8]
 8006346:	89b1      	ldrh	r1, [r6, #12]
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f841 	bl	80063d0 <arm_bitreversal_32>
 800634e:	2f01      	cmp	r7, #1
 8006350:	d1e8      	bne.n	8006324 <arm_cfft_f32+0x44>
 8006352:	ee07 5a90 	vmov	s15, r5
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800635e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006362:	2d00      	cmp	r5, #0
 8006364:	d0de      	beq.n	8006324 <arm_cfft_f32+0x44>
 8006366:	f104 0108 	add.w	r1, r4, #8
 800636a:	2300      	movs	r3, #0
 800636c:	3301      	adds	r3, #1
 800636e:	429d      	cmp	r5, r3
 8006370:	f101 0108 	add.w	r1, r1, #8
 8006374:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006378:	ed51 7a03 	vldr	s15, [r1, #-12]
 800637c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006380:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006384:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006388:	ed41 7a03 	vstr	s15, [r1, #-12]
 800638c:	d1ee      	bne.n	800636c <arm_cfft_f32+0x8c>
 800638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006392:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006396:	d0ba      	beq.n	800630e <arm_cfft_f32+0x2e>
 8006398:	e7bf      	b.n	800631a <arm_cfft_f32+0x3a>
 800639a:	2d10      	cmp	r5, #16
 800639c:	d0cb      	beq.n	8006336 <arm_cfft_f32+0x56>
 800639e:	e7bc      	b.n	800631a <arm_cfft_f32+0x3a>
 80063a0:	b19d      	cbz	r5, 80063ca <arm_cfft_f32+0xea>
 80063a2:	f101 030c 	add.w	r3, r1, #12
 80063a6:	2200      	movs	r2, #0
 80063a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80063ac:	3201      	adds	r2, #1
 80063ae:	eef1 7a67 	vneg.f32	s15, s15
 80063b2:	4295      	cmp	r5, r2
 80063b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80063b8:	f103 0308 	add.w	r3, r3, #8
 80063bc:	d1f4      	bne.n	80063a8 <arm_cfft_f32+0xc8>
 80063be:	e798      	b.n	80062f2 <arm_cfft_f32+0x12>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff fd36 	bl	8005e34 <arm_cfft_radix8by4_f32>
 80063c8:	e7a7      	b.n	800631a <arm_cfft_f32+0x3a>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0aa      	beq.n	8006324 <arm_cfft_f32+0x44>
 80063ce:	e7b9      	b.n	8006344 <arm_cfft_f32+0x64>

080063d0 <arm_bitreversal_32>:
 80063d0:	b1e9      	cbz	r1, 800640e <arm_bitreversal_32+0x3e>
 80063d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d4:	2500      	movs	r5, #0
 80063d6:	f102 0e02 	add.w	lr, r2, #2
 80063da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80063de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80063e2:	08a4      	lsrs	r4, r4, #2
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80063ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80063ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80063f2:	00a6      	lsls	r6, r4, #2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80063fa:	3304      	adds	r3, #4
 80063fc:	1d34      	adds	r4, r6, #4
 80063fe:	3502      	adds	r5, #2
 8006400:	58c6      	ldr	r6, [r0, r3]
 8006402:	5907      	ldr	r7, [r0, r4]
 8006404:	50c7      	str	r7, [r0, r3]
 8006406:	428d      	cmp	r5, r1
 8006408:	5106      	str	r6, [r0, r4]
 800640a:	d3e6      	bcc.n	80063da <arm_bitreversal_32+0xa>
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640e:	4770      	bx	lr

08006410 <arm_cmplx_mag_f32>:
 8006410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006414:	ed2d 8b02 	vpush	{d8}
 8006418:	0897      	lsrs	r7, r2, #2
 800641a:	b084      	sub	sp, #16
 800641c:	d077      	beq.n	800650e <arm_cmplx_mag_f32+0xfe>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	f100 0420 	add.w	r4, r0, #32
 8006426:	f101 0510 	add.w	r5, r1, #16
 800642a:	463e      	mov	r6, r7
 800642c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8006430:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8006434:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800643c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006440:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	f2c0 80c5 	blt.w	80065d6 <arm_cmplx_mag_f32+0x1c6>
 800644c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006454:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006458:	f100 80cb 	bmi.w	80065f2 <arm_cmplx_mag_f32+0x1e2>
 800645c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006460:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8006464:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006468:	ee20 0a00 	vmul.f32	s0, s0, s0
 800646c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006470:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006474:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647c:	f2c0 80a8 	blt.w	80065d0 <arm_cmplx_mag_f32+0x1c0>
 8006480:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006488:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800648c:	f100 80a8 	bmi.w	80065e0 <arm_cmplx_mag_f32+0x1d0>
 8006490:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006494:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006498:	ed54 7a03 	vldr	s15, [r4, #-12]
 800649c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80064a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80064a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80064ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b0:	f2c0 808b 	blt.w	80065ca <arm_cmplx_mag_f32+0x1ba>
 80064b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80064b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80064c0:	f100 80a9 	bmi.w	8006616 <arm_cmplx_mag_f32+0x206>
 80064c4:	ed05 8a02 	vstr	s16, [r5, #-8]
 80064c8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80064cc:	ed54 7a01 	vldr	s15, [r4, #-4]
 80064d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80064d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80064dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80064e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e4:	db6e      	blt.n	80065c4 <arm_cmplx_mag_f32+0x1b4>
 80064e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80064ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80064f2:	f100 8087 	bmi.w	8006604 <arm_cmplx_mag_f32+0x1f4>
 80064f6:	ed05 8a01 	vstr	s16, [r5, #-4]
 80064fa:	3e01      	subs	r6, #1
 80064fc:	f104 0420 	add.w	r4, r4, #32
 8006500:	f105 0510 	add.w	r5, r5, #16
 8006504:	d192      	bne.n	800642c <arm_cmplx_mag_f32+0x1c>
 8006506:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800650a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800650e:	f012 0203 	ands.w	r2, r2, #3
 8006512:	d052      	beq.n	80065ba <arm_cmplx_mag_f32+0x1aa>
 8006514:	ed90 0a00 	vldr	s0, [r0]
 8006518:	edd0 7a01 	vldr	s15, [r0, #4]
 800651c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006520:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006524:	2300      	movs	r3, #0
 8006526:	ee37 0a80 	vadd.f32	s0, s15, s0
 800652a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006532:	bfb8      	it	lt
 8006534:	600b      	strlt	r3, [r1, #0]
 8006536:	db08      	blt.n	800654a <arm_cmplx_mag_f32+0x13a>
 8006538:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006540:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006544:	d479      	bmi.n	800663a <arm_cmplx_mag_f32+0x22a>
 8006546:	ed81 8a00 	vstr	s16, [r1]
 800654a:	3a01      	subs	r2, #1
 800654c:	d035      	beq.n	80065ba <arm_cmplx_mag_f32+0x1aa>
 800654e:	ed90 0a02 	vldr	s0, [r0, #8]
 8006552:	edd0 7a03 	vldr	s15, [r0, #12]
 8006556:	ee20 0a00 	vmul.f32	s0, s0, s0
 800655a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800655e:	2300      	movs	r3, #0
 8006560:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006564:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656c:	bfb8      	it	lt
 800656e:	604b      	strlt	r3, [r1, #4]
 8006570:	db08      	blt.n	8006584 <arm_cmplx_mag_f32+0x174>
 8006572:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800657e:	d453      	bmi.n	8006628 <arm_cmplx_mag_f32+0x218>
 8006580:	ed81 8a01 	vstr	s16, [r1, #4]
 8006584:	2a01      	cmp	r2, #1
 8006586:	d018      	beq.n	80065ba <arm_cmplx_mag_f32+0x1aa>
 8006588:	ed90 0a04 	vldr	s0, [r0, #16]
 800658c:	edd0 7a05 	vldr	s15, [r0, #20]
 8006590:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006594:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006598:	2300      	movs	r3, #0
 800659a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800659e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	db19      	blt.n	80065dc <arm_cmplx_mag_f32+0x1cc>
 80065a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80065ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80065b4:	d44a      	bmi.n	800664c <arm_cmplx_mag_f32+0x23c>
 80065b6:	ed81 8a02 	vstr	s16, [r1, #8]
 80065ba:	b004      	add	sp, #16
 80065bc:	ecbd 8b02 	vpop	{d8}
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c4:	f845 8c04 	str.w	r8, [r5, #-4]
 80065c8:	e797      	b.n	80064fa <arm_cmplx_mag_f32+0xea>
 80065ca:	f845 8c08 	str.w	r8, [r5, #-8]
 80065ce:	e77b      	b.n	80064c8 <arm_cmplx_mag_f32+0xb8>
 80065d0:	f845 8c0c 	str.w	r8, [r5, #-12]
 80065d4:	e75e      	b.n	8006494 <arm_cmplx_mag_f32+0x84>
 80065d6:	f845 8c10 	str.w	r8, [r5, #-16]
 80065da:	e741      	b.n	8006460 <arm_cmplx_mag_f32+0x50>
 80065dc:	608b      	str	r3, [r1, #8]
 80065de:	e7ec      	b.n	80065ba <arm_cmplx_mag_f32+0x1aa>
 80065e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80065e4:	9001      	str	r0, [sp, #4]
 80065e6:	f000 fb29 	bl	8006c3c <sqrtf>
 80065ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80065ee:	9801      	ldr	r0, [sp, #4]
 80065f0:	e74e      	b.n	8006490 <arm_cmplx_mag_f32+0x80>
 80065f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80065f6:	9001      	str	r0, [sp, #4]
 80065f8:	f000 fb20 	bl	8006c3c <sqrtf>
 80065fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006600:	9801      	ldr	r0, [sp, #4]
 8006602:	e72b      	b.n	800645c <arm_cmplx_mag_f32+0x4c>
 8006604:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006608:	9001      	str	r0, [sp, #4]
 800660a:	f000 fb17 	bl	8006c3c <sqrtf>
 800660e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006612:	9801      	ldr	r0, [sp, #4]
 8006614:	e76f      	b.n	80064f6 <arm_cmplx_mag_f32+0xe6>
 8006616:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	f000 fb0e 	bl	8006c3c <sqrtf>
 8006620:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006624:	9801      	ldr	r0, [sp, #4]
 8006626:	e74d      	b.n	80064c4 <arm_cmplx_mag_f32+0xb4>
 8006628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662c:	9201      	str	r2, [sp, #4]
 800662e:	f000 fb05 	bl	8006c3c <sqrtf>
 8006632:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006636:	9903      	ldr	r1, [sp, #12]
 8006638:	e7a2      	b.n	8006580 <arm_cmplx_mag_f32+0x170>
 800663a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800663e:	9201      	str	r2, [sp, #4]
 8006640:	f000 fafc 	bl	8006c3c <sqrtf>
 8006644:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006648:	9903      	ldr	r1, [sp, #12]
 800664a:	e77c      	b.n	8006546 <arm_cmplx_mag_f32+0x136>
 800664c:	9101      	str	r1, [sp, #4]
 800664e:	f000 faf5 	bl	8006c3c <sqrtf>
 8006652:	9901      	ldr	r1, [sp, #4]
 8006654:	e7af      	b.n	80065b6 <arm_cmplx_mag_f32+0x1a6>
 8006656:	bf00      	nop

08006658 <arm_radix8_butterfly_f32>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ed2d 8b10 	vpush	{d8-d15}
 8006660:	b095      	sub	sp, #84	@ 0x54
 8006662:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006666:	4603      	mov	r3, r0
 8006668:	3304      	adds	r3, #4
 800666a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006950 <arm_radix8_butterfly_f32+0x2f8>
 800666e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006670:	468b      	mov	fp, r1
 8006672:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006674:	4689      	mov	r9, r1
 8006676:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800667a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800667c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800667e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006682:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006686:	eb03 0508 	add.w	r5, r3, r8
 800668a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800668e:	eb05 040e 	add.w	r4, r5, lr
 8006692:	0137      	lsls	r7, r6, #4
 8006694:	eba6 030a 	sub.w	r3, r6, sl
 8006698:	eb04 000e 	add.w	r0, r4, lr
 800669c:	44b2      	add	sl, r6
 800669e:	1d3a      	adds	r2, r7, #4
 80066a0:	9702      	str	r7, [sp, #8]
 80066a2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80066a6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80066aa:	ebae 0c06 	sub.w	ip, lr, r6
 80066ae:	9703      	str	r7, [sp, #12]
 80066b0:	eb03 0708 	add.w	r7, r3, r8
 80066b4:	9701      	str	r7, [sp, #4]
 80066b6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80066ba:	9706      	str	r7, [sp, #24]
 80066bc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80066be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80066c2:	f10e 0104 	add.w	r1, lr, #4
 80066c6:	4439      	add	r1, r7
 80066c8:	443a      	add	r2, r7
 80066ca:	0137      	lsls	r7, r6, #4
 80066cc:	00f6      	lsls	r6, r6, #3
 80066ce:	9704      	str	r7, [sp, #16]
 80066d0:	9605      	str	r6, [sp, #20]
 80066d2:	9f01      	ldr	r7, [sp, #4]
 80066d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066d6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80066da:	f04f 0c00 	mov.w	ip, #0
 80066de:	edd4 6a00 	vldr	s13, [r4]
 80066e2:	edd7 1a00 	vldr	s3, [r7]
 80066e6:	ed16 aa01 	vldr	s20, [r6, #-4]
 80066ea:	edd5 5a00 	vldr	s11, [r5]
 80066ee:	ed52 9a01 	vldr	s19, [r2, #-4]
 80066f2:	ed90 6a00 	vldr	s12, [r0]
 80066f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80066fa:	ed93 3a00 	vldr	s6, [r3]
 80066fe:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006702:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006706:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800670a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800670e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006712:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006716:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800671a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800671e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006722:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006726:	ed85 4a00 	vstr	s8, [r5]
 800672a:	edd1 6a00 	vldr	s13, [r1]
 800672e:	ed94 9a01 	vldr	s18, [r4, #4]
 8006732:	edd3 2a01 	vldr	s5, [r3, #4]
 8006736:	edd7 8a01 	vldr	s17, [r7, #4]
 800673a:	edd6 0a00 	vldr	s1, [r6]
 800673e:	edd5 3a01 	vldr	s7, [r5, #4]
 8006742:	ed90 8a01 	vldr	s16, [r0, #4]
 8006746:	ed92 7a00 	vldr	s14, [r2]
 800674a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800674e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006752:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006756:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800675a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800675e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006762:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006766:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800676a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800676e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006772:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006776:	ee77 0a08 	vadd.f32	s1, s14, s16
 800677a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800677e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006782:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006786:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800678a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800678e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006792:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006796:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800679a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800679e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80067a2:	ee33 2a20 	vadd.f32	s4, s6, s1
 80067a6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80067aa:	ee33 3a60 	vsub.f32	s6, s6, s1
 80067ae:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80067b2:	ee77 0a01 	vadd.f32	s1, s14, s2
 80067b6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80067ba:	ee37 7a41 	vsub.f32	s14, s14, s2
 80067be:	ee73 1a84 	vadd.f32	s3, s7, s8
 80067c2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80067c6:	ee76 3a27 	vadd.f32	s7, s12, s15
 80067ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80067ce:	ee32 8a00 	vadd.f32	s16, s4, s0
 80067d2:	ee33 1a45 	vsub.f32	s2, s6, s10
 80067d6:	ee32 2a40 	vsub.f32	s4, s4, s0
 80067da:	ee35 5a03 	vadd.f32	s10, s10, s6
 80067de:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80067e2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80067e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80067ea:	ee34 6a67 	vsub.f32	s12, s8, s15
 80067ee:	ee75 4a87 	vadd.f32	s9, s11, s14
 80067f2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80067f6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80067fa:	ee77 7a84 	vadd.f32	s15, s15, s8
 80067fe:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006802:	44dc      	add	ip, fp
 8006804:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006808:	45e1      	cmp	r9, ip
 800680a:	ed86 8a00 	vstr	s16, [r6]
 800680e:	ed85 2a01 	vstr	s4, [r5, #4]
 8006812:	4456      	add	r6, sl
 8006814:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006818:	4455      	add	r5, sl
 800681a:	edc0 6a00 	vstr	s13, [r0]
 800681e:	ed82 1a00 	vstr	s2, [r2]
 8006822:	ed80 5a01 	vstr	s10, [r0, #4]
 8006826:	4452      	add	r2, sl
 8006828:	ed01 3a01 	vstr	s6, [r1, #-4]
 800682c:	4450      	add	r0, sl
 800682e:	edc7 2a00 	vstr	s5, [r7]
 8006832:	edc4 4a00 	vstr	s9, [r4]
 8006836:	ed83 7a00 	vstr	s14, [r3]
 800683a:	edc1 5a00 	vstr	s11, [r1]
 800683e:	edc7 3a01 	vstr	s7, [r7, #4]
 8006842:	4451      	add	r1, sl
 8006844:	ed84 6a01 	vstr	s12, [r4, #4]
 8006848:	4457      	add	r7, sl
 800684a:	edc3 7a01 	vstr	s15, [r3, #4]
 800684e:	4454      	add	r4, sl
 8006850:	4453      	add	r3, sl
 8006852:	f63f af44 	bhi.w	80066de <arm_radix8_butterfly_f32+0x86>
 8006856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006858:	2b07      	cmp	r3, #7
 800685a:	f240 81b7 	bls.w	8006bcc <arm_radix8_butterfly_f32+0x574>
 800685e:	9b06      	ldr	r3, [sp, #24]
 8006860:	9903      	ldr	r1, [sp, #12]
 8006862:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006864:	9e05      	ldr	r6, [sp, #20]
 8006866:	9a04      	ldr	r2, [sp, #16]
 8006868:	f103 0c08 	add.w	ip, r3, #8
 800686c:	9b02      	ldr	r3, [sp, #8]
 800686e:	3108      	adds	r1, #8
 8006870:	f108 0808 	add.w	r8, r8, #8
 8006874:	1841      	adds	r1, r0, r1
 8006876:	3608      	adds	r6, #8
 8006878:	330c      	adds	r3, #12
 800687a:	4604      	mov	r4, r0
 800687c:	4444      	add	r4, r8
 800687e:	18c3      	adds	r3, r0, r3
 8006880:	9109      	str	r1, [sp, #36]	@ 0x24
 8006882:	1981      	adds	r1, r0, r6
 8006884:	f10e 0e08 	add.w	lr, lr, #8
 8006888:	3208      	adds	r2, #8
 800688a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800688c:	9107      	str	r1, [sp, #28]
 800688e:	4604      	mov	r4, r0
 8006890:	4601      	mov	r1, r0
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	f100 030c 	add.w	r3, r0, #12
 8006898:	4474      	add	r4, lr
 800689a:	f04f 0801 	mov.w	r8, #1
 800689e:	1882      	adds	r2, r0, r2
 80068a0:	4461      	add	r1, ip
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	464b      	mov	r3, r9
 80068a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80068a8:	46c1      	mov	r9, r8
 80068aa:	9208      	str	r2, [sp, #32]
 80068ac:	46d8      	mov	r8, fp
 80068ae:	9106      	str	r1, [sp, #24]
 80068b0:	f04f 0e00 	mov.w	lr, #0
 80068b4:	469b      	mov	fp, r3
 80068b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068ba:	449e      	add	lr, r3
 80068bc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80068c0:	441a      	add	r2, r3
 80068c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80068c4:	441a      	add	r2, r3
 80068c6:	18d4      	adds	r4, r2, r3
 80068c8:	18e5      	adds	r5, r4, r3
 80068ca:	18ee      	adds	r6, r5, r3
 80068cc:	18f7      	adds	r7, r6, r3
 80068ce:	eb07 0c03 	add.w	ip, r7, r3
 80068d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80068d4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80068d8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80068dc:	910c      	str	r1, [sp, #48]	@ 0x30
 80068de:	4419      	add	r1, r3
 80068e0:	9103      	str	r1, [sp, #12]
 80068e2:	4419      	add	r1, r3
 80068e4:	18ca      	adds	r2, r1, r3
 80068e6:	9202      	str	r2, [sp, #8]
 80068e8:	441a      	add	r2, r3
 80068ea:	18d0      	adds	r0, r2, r3
 80068ec:	ed92 ea01 	vldr	s28, [r2, #4]
 80068f0:	9a02      	ldr	r2, [sp, #8]
 80068f2:	edd4 7a00 	vldr	s15, [r4]
 80068f6:	edd2 da01 	vldr	s27, [r2, #4]
 80068fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068fc:	ed91 da01 	vldr	s26, [r1, #4]
 8006900:	ed92 ca01 	vldr	s24, [r2, #4]
 8006904:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006906:	9903      	ldr	r1, [sp, #12]
 8006908:	edcd 7a03 	vstr	s15, [sp, #12]
 800690c:	edd2 7a00 	vldr	s15, [r2]
 8006910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006912:	edcd 7a02 	vstr	s15, [sp, #8]
 8006916:	edd2 7a00 	vldr	s15, [r2]
 800691a:	edd0 ea01 	vldr	s29, [r0, #4]
 800691e:	edd1 ca01 	vldr	s25, [r1, #4]
 8006922:	eddc ba00 	vldr	s23, [ip]
 8006926:	edd7 aa00 	vldr	s21, [r7]
 800692a:	ed96 aa00 	vldr	s20, [r6]
 800692e:	edd5 9a00 	vldr	s19, [r5]
 8006932:	edcd 7a01 	vstr	s15, [sp, #4]
 8006936:	4403      	add	r3, r0
 8006938:	ed93 fa01 	vldr	s30, [r3, #4]
 800693c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006940:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006948:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800694c:	46cc      	mov	ip, r9
 800694e:	e001      	b.n	8006954 <arm_radix8_butterfly_f32+0x2fc>
 8006950:	3f3504f3 	.word	0x3f3504f3
 8006954:	ed91 6a00 	vldr	s12, [r1]
 8006958:	ed93 5a00 	vldr	s10, [r3]
 800695c:	edd0 fa00 	vldr	s31, [r0]
 8006960:	edd4 7a00 	vldr	s15, [r4]
 8006964:	ed95 7a00 	vldr	s14, [r5]
 8006968:	ed56 3a01 	vldr	s7, [r6, #-4]
 800696c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006970:	ed92 2a00 	vldr	s4, [r2]
 8006974:	ed96 0a00 	vldr	s0, [r6]
 8006978:	ee33 8a85 	vadd.f32	s16, s7, s10
 800697c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006980:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006984:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006988:	ee78 1a04 	vadd.f32	s3, s16, s8
 800698c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006990:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006994:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800699c:	ed06 6a01 	vstr	s12, [r6, #-4]
 80069a0:	edd4 8a01 	vldr	s17, [r4, #4]
 80069a4:	ed92 9a01 	vldr	s18, [r2, #4]
 80069a8:	edd7 0a00 	vldr	s1, [r7]
 80069ac:	edd1 2a01 	vldr	s5, [r1, #4]
 80069b0:	ed95 7a01 	vldr	s14, [r5, #4]
 80069b4:	ed93 6a01 	vldr	s12, [r3, #4]
 80069b8:	edd0 5a01 	vldr	s11, [r0, #4]
 80069bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80069c0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80069c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80069c8:	ee78 fac7 	vsub.f32	s31, s17, s14
 80069cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 80069d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80069d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80069d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80069dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80069e0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80069e4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80069e8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80069ec:	ee71 4a64 	vsub.f32	s9, s2, s9
 80069f0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80069f4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80069f8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80069fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006a00:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006a04:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006a08:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006a0c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006a10:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006a14:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006a18:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006a1c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006a20:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006a24:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006a28:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006a2c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006a30:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006a34:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006a38:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006a3c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006a40:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006a44:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006a48:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006a4c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006a50:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006a54:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006a58:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006a5c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006a60:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006a64:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006a68:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006a6c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006a70:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006a74:	eddd 1a02 	vldr	s3, [sp, #8]
 8006a78:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006a7c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006a80:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006a84:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006a88:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006a8c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006a90:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006a94:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006a98:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006a9c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006aa0:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006aa4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006aa8:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006aac:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006ab0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006ab4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006ab8:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006abc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006ac0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006ac4:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006ac8:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006acc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006ad0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006ad4:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006ad8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006adc:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006ae0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006ae4:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006ae8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006aec:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006af0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006af4:	eddd 5a03 	vldr	s11, [sp, #12]
 8006af8:	edc6 fa00 	vstr	s31, [r6]
 8006afc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006b00:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006b04:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006b08:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006b0c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006b10:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8006b14:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006b18:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006b1c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006b20:	ee74 4a89 	vadd.f32	s9, s9, s18
 8006b24:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006b28:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006b2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006b30:	44c4      	add	ip, r8
 8006b32:	45e3      	cmp	fp, ip
 8006b34:	edc3 3a00 	vstr	s7, [r3]
 8006b38:	edc3 6a01 	vstr	s13, [r3, #4]
 8006b3c:	4456      	add	r6, sl
 8006b3e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006b42:	edc7 0a00 	vstr	s1, [r7]
 8006b46:	4453      	add	r3, sl
 8006b48:	ed80 2a00 	vstr	s4, [r0]
 8006b4c:	edc0 2a01 	vstr	s5, [r0, #4]
 8006b50:	4457      	add	r7, sl
 8006b52:	edc2 1a00 	vstr	s3, [r2]
 8006b56:	ed82 7a01 	vstr	s14, [r2, #4]
 8006b5a:	4450      	add	r0, sl
 8006b5c:	ed85 8a00 	vstr	s16, [r5]
 8006b60:	ed85 0a01 	vstr	s0, [r5, #4]
 8006b64:	4452      	add	r2, sl
 8006b66:	edc1 4a00 	vstr	s9, [r1]
 8006b6a:	4455      	add	r5, sl
 8006b6c:	ed81 3a01 	vstr	s6, [r1, #4]
 8006b70:	edc4 8a00 	vstr	s17, [r4]
 8006b74:	ed84 6a01 	vstr	s12, [r4, #4]
 8006b78:	4451      	add	r1, sl
 8006b7a:	4454      	add	r4, sl
 8006b7c:	f63f aeea 	bhi.w	8006954 <arm_radix8_butterfly_f32+0x2fc>
 8006b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b82:	3308      	adds	r3, #8
 8006b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b88:	3308      	adds	r3, #8
 8006b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	3308      	adds	r3, #8
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	3308      	adds	r3, #8
 8006b96:	9308      	str	r3, [sp, #32]
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9307      	str	r3, [sp, #28]
 8006b9e:	9b06      	ldr	r3, [sp, #24]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	9b04      	ldr	r3, [sp, #16]
 8006bac:	3308      	adds	r3, #8
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb2:	f109 0901 	add.w	r9, r9, #1
 8006bb6:	454b      	cmp	r3, r9
 8006bb8:	f47f ae7d 	bne.w	80068b6 <arm_radix8_butterfly_f32+0x25e>
 8006bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	46d9      	mov	r9, fp
 8006bc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bc6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8006bca:	e554      	b.n	8006676 <arm_radix8_butterfly_f32+0x1e>
 8006bcc:	b015      	add	sp, #84	@ 0x54
 8006bce:	ecbd 8b10 	vpop	{d8-d15}
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	bf00      	nop

08006bd8 <memset>:
 8006bd8:	4402      	add	r2, r0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d100      	bne.n	8006be2 <memset+0xa>
 8006be0:	4770      	bx	lr
 8006be2:	f803 1b01 	strb.w	r1, [r3], #1
 8006be6:	e7f9      	b.n	8006bdc <memset+0x4>

08006be8 <__errno>:
 8006be8:	4b01      	ldr	r3, [pc, #4]	@ (8006bf0 <__errno+0x8>)
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000010 	.word	0x20000010

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	@ (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	@ (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f83a 	bl	8006c80 <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08019cd0 	.word	0x08019cd0
 8006c30:	08019cd0 	.word	0x08019cd0
 8006c34:	08019cd0 	.word	0x08019cd0
 8006c38:	08019cd4 	.word	0x08019cd4

08006c3c <sqrtf>:
 8006c3c:	b508      	push	{r3, lr}
 8006c3e:	ed2d 8b02 	vpush	{d8}
 8006c42:	eeb0 8a40 	vmov.f32	s16, s0
 8006c46:	f000 f817 	bl	8006c78 <__ieee754_sqrtf>
 8006c4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8006c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c52:	d60c      	bvs.n	8006c6e <sqrtf+0x32>
 8006c54:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006c74 <sqrtf+0x38>
 8006c58:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	d505      	bpl.n	8006c6e <sqrtf+0x32>
 8006c62:	f7ff ffc1 	bl	8006be8 <__errno>
 8006c66:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006c6a:	2321      	movs	r3, #33	@ 0x21
 8006c6c:	6003      	str	r3, [r0, #0]
 8006c6e:	ecbd 8b02 	vpop	{d8}
 8006c72:	bd08      	pop	{r3, pc}
 8006c74:	00000000 	.word	0x00000000

08006c78 <__ieee754_sqrtf>:
 8006c78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c7c:	4770      	bx	lr
	...

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
