
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013834  0800702c  0800702c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a860  0801a860  0001c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a860  0801a860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a868  0801a868  0001c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a868  0801a868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a86c  0801a86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0801a870  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006354  2000005c  0801a8cc  0001c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200063b0  0801a8cc  0001c3b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe93  00000000  00000000  0001c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2d  00000000  00000000  0003bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc1  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292ce  00000000  00000000  00042199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f45  00000000  00000000  0006b467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010931a  00000000  00000000  000853ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0018e6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c8c  00000000  00000000  0018e780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0019440c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  0019446b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00197e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007014 	.word	0x08007014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08007014 	.word	0x08007014

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd05 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f87b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fa01 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f9d9 	bl	80008bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f9a7 	bl	800085c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800050e:	f000 f8c5 	bl	800069c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000512:	f000 f93b 	bl	800078c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000516:	f000 f96b 	bl	80007f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Lab 8
  arm_rfft_fast_init_f32(&fft_handler, FFT_LENGTH);
 800051a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051e:	482d      	ldr	r0, [pc, #180]	@ (80005d4 <main+0xe0>)
 8000520:	f005 fc34 	bl	8005d8c <arm_rfft_fast_init_f32>

  for (int i = 0; i < FFT_LENGTH; i++){
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e01b      	b.n	8000562 <main+0x6e>
    input_signal[i] = arm_cos_f32(2*PI*400*i/SAMPLING_RATE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	ee07 3a90 	vmov	s15, r3
 8000530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000534:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80005d8 <main+0xe4>
 8000538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800053c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80005dc <main+0xe8>
 8000540:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000544:	eeb0 0a47 	vmov.f32	s0, s14
 8000548:	f006 fa06 	bl	8006958 <arm_cos_f32>
 800054c:	eef0 7a40 	vmov.f32	s15, s0
 8000550:	4a23      	ldr	r2, [pc, #140]	@ (80005e0 <main+0xec>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_LENGTH; i++){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000568:	dbdf      	blt.n	800052a <main+0x36>
  }

  for (int i = 0; i < FFT_LENGTH; i++){
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	e015      	b.n	800059c <main+0xa8>
    output_freq[i] = (float32_t)(i) / FFT_LENGTH * SAMPLING_RATE; 
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	ee07 3a90 	vmov	s15, r3
 8000576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800057a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80005e4 <main+0xf0>
 800057e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000582:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80005dc <main+0xe8>
 8000586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800058a:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <main+0xf4>)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_LENGTH; i++){
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005a2:	dbe5      	blt.n	8000570 <main+0x7c>
  }

  arm_rfft_fast_f32(&fft_handler, input_signal, output_fft,0);
 80005a4:	2300      	movs	r3, #0
 80005a6:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <main+0xf8>)
 80005a8:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <main+0xec>)
 80005aa:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <main+0xe0>)
 80005ac:	f005 fcd2 	bl	8005f54 <arm_rfft_fast_f32>

  arm_cmplx_mag_f32(output_fft, output_fft_mag, FFT_LENGTH/2);
 80005b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005b4:	490e      	ldr	r1, [pc, #56]	@ (80005f0 <main+0xfc>)
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <main+0xf8>)
 80005b8:	f006 f8aa 	bl	8006710 <arm_cmplx_mag_f32>

  //Lab 7
  HAL_TIM_Base_Start(&htim6);
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <main+0x100>)
 80005be:	f004 fc65 	bl	8004e8c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f003 f8b6 	bl	800373c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0xdc>
 80005d4:	20006254 	.word	0x20006254
 80005d8:	451d1463 	.word	0x451d1463
 80005dc:	46800000 	.word	0x46800000
 80005e0:	20000254 	.word	0x20000254
 80005e4:	45000000 	.word	0x45000000
 80005e8:	20005254 	.word	0x20005254
 80005ec:	20002254 	.word	0x20002254
 80005f0:	20004254 	.word	0x20004254
 80005f4:	20000180 	.word	0x20000180

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fcb0 	bl	8006f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f003 f8cb 	bl	80037b8 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fa3a 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f902 	bl	8003864 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000666:	f000 fa1b 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fcca 	bl	800401c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 fa07 	bl	8000aa0 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	@ 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006be:	4b30      	ldr	r3, [pc, #192]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <MX_ADC1_Init+0xe8>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006de:	2204      	movs	r2, #4
 80006e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e2:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006fe:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC1_Init+0xe4>)
 8000706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_ADC1_Init+0xe4>)
 800070e:	2201      	movs	r2, #1
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ADC1_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC1_Init+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	4817      	ldr	r0, [pc, #92]	@ (8000780 <MX_ADC1_Init+0xe4>)
 8000724:	f000 feb4 	bl	8001490 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800072e:	f000 f9b7 	bl	8000aa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	@ (8000780 <MX_ADC1_Init+0xe4>)
 800073e:	f001 ff6d 	bl	800261c <HAL_ADCEx_MultiModeConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000748:	f000 f9aa 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_ADC1_Init+0xec>)
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2306      	movs	r3, #6
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000758:	237f      	movs	r3, #127	@ 0x7f
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075c:	2304      	movs	r3, #4
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_ADC1_Init+0xe4>)
 800076a:	f001 f909 	bl	8001980 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000774:	f000 f994 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	@ 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000078 	.word	0x20000078
 8000784:	50040000 	.word	0x50040000
 8000788:	14f00020 	.word	0x14f00020

0800078c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2224      	movs	r2, #36	@ 0x24
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fbe7 	bl	8006f6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_DAC1_Init+0x5c>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_DAC1_Init+0x60>)
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <MX_DAC1_Init+0x5c>)
 80007a6:	f002 f8fa 	bl	800299e <HAL_DAC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007b0:	f000 f976 	bl	8000aa0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80007b8:	2304      	movs	r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_DAC1_Init+0x5c>)
 80007d0:	f002 fa23 	bl	8002c1a <HAL_DAC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f961 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	@ 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000124 	.word	0x20000124
 80007ec:	40007400 	.word	0x40007400

080007f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_TIM6_Init+0x64>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_TIM6_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_TIM6_Init+0x64>)
 8000808:	224f      	movs	r2, #79	@ 0x4f
 800080a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_TIM6_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_TIM6_Init+0x64>)
 8000814:	2231      	movs	r2, #49	@ 0x31
 8000816:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_TIM6_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800081e:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_TIM6_Init+0x64>)
 8000820:	f004 fadc 	bl	8004ddc <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800082a:	f000 f939 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800082e:	2320      	movs	r3, #32
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	@ (8000854 <MX_TIM6_Init+0x64>)
 800083c:	f004 fc34 	bl	80050a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000846:	f000 f92b 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000180 	.word	0x20000180
 8000858:	40001000 	.word	0x40001000

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	@ (80008b8 <MX_USART2_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x58>)
 80008a0:	f004 fc8a 	bl	80051b8 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f8f9 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001cc 	.word	0x200001cc
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_DMA_Init+0x48>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <MX_DMA_Init+0x48>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <MX_DMA_Init+0x48>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	200b      	movs	r0, #11
 80008e0:	f002 f827 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e4:	200b      	movs	r0, #11
 80008e6:	f002 f840 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	200d      	movs	r0, #13
 80008f0:	f002 f81f 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008f4:	200d      	movs	r0, #13
 80008f6:	f002 f838 	bl	800296a <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a2f      	ldr	r2, [pc, #188]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a29      	ldr	r2, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f002 fed8 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <MX_GPIO_Init+0xdc>)
 80009a4:	f002 fd20 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80009a8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f002 fd10 	bl	80033e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2028      	movs	r0, #40	@ 0x28
 80009ce:	f001 ffb0 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d2:	2028      	movs	r0, #40	@ 0x28
 80009d4:	f001 ffc9 	bl	800296a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	@ 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000800 	.word	0x48000800

080009e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Start_DMA(&hadc1, adc_buffer, BUFFER_SIZE);
 80009f2:	2202      	movs	r2, #2
 80009f4:	4903      	ldr	r1, [pc, #12]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x20>)
 80009f8:	f000 fe9a 	bl	8001730 <HAL_ADC_Start_DMA>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000626c 	.word	0x2000626c
 8000a08:	20000078 	.word	0x20000078

08000a0c <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop_DMA(&hadc1);
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a2a:	f000 ff3d 	bl	80018a8 <HAL_ADC_Stop_DMA>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a38:	f002 fe80 	bl	800373c <HAL_GPIO_WritePin>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2302      	movs	r3, #2
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <HAL_ADC_ConvCpltCallback+0x38>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000a48:	f001 ffcc 	bl	80029e4 <HAL_DAC_Start_DMA>

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000078 	.word	0x20000078
 8000a58:	20006270 	.word	0x20006270
 8000a5c:	20000124 	.word	0x20000124

08000a60 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <HAL_DAC_ConvCpltCallbackCh1>:
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 8000a80:	f002 f87c 	bl	8002b7c <HAL_DAC_Stop_DMA>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f002 fe55 	bl	800373c <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000124 	.word	0x20000124

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ac      	sub	sp, #176	@ 0xb0
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2288      	movs	r2, #136	@ 0x88
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f006 fa29 	bl	8006f6c <memset>
  if(hadc->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c14 <HAL_ADC_MspInit+0x120>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d172      	bne.n	8000c0a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fc85 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b60:	f7ff ff9e 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b64:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a2b      	ldr	r2, [pc, #172]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b70:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <HAL_ADC_MspInit+0x124>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f002 fc1a 	bl	80033e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c20 <HAL_ADC_MspInit+0x12c>)
 8000bb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000be4:	2220      	movs	r2, #32
 8000be6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bee:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000bf0:	f002 f9c4 	bl	8002f7c <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000bfa:	f7ff ff51 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000c02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <HAL_ADC_MspInit+0x128>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	37b0      	adds	r7, #176	@ 0xb0
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	50040000 	.word	0x50040000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	200000dc 	.word	0x200000dc
 8000c20:	40020008 	.word	0x40020008

08000c24 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_DAC_MspInit+0xcc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d14f      	bne.n	8000ce6 <HAL_DAC_MspInit+0xc2>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <HAL_DAC_MspInit+0xd0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c76:	2310      	movs	r3, #16
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8c:	f002 fbac 	bl	80033e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <HAL_DAC_MspInit+0xd8>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000c98:	2206      	movs	r2, #6
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000cca:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000ccc:	f002 f956 	bl	8002f7c <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000cd6:	f7ff fee3 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <HAL_DAC_MspInit+0xd4>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40007400 	.word	0x40007400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	20000138 	.word	0x20000138
 8000cfc:	40020030 	.word	0x40020030

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_TIM_Base_MspInit+0x38>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10b      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40001000 	.word	0x40001000
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ac      	sub	sp, #176	@ 0xb0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2288      	movs	r2, #136	@ 0x88
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 f903 	bl	8006f6c <memset>
  if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <HAL_UART_MspInit+0xb0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d13b      	bne.n	8000de8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fb71 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f7ff fe8a 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d90:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_UART_MspInit+0xb4>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f002 fb00 	bl	80033e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	37b0      	adds	r7, #176	@ 0xb0
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4e:	f000 f8b7 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <DMA1_Channel1_IRQHandler+0x10>)
 8000e5e:	f002 f9e3 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000dc 	.word	0x200000dc

08000e6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DMA1_Channel3_IRQHandler+0x10>)
 8000e72:	f002 f9d9 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000138 	.word	0x20000138

08000e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e88:	f002 fc70 	bl	800376c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f006 f851 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fb05 	bl	80004f4 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ef8:	0801a870 	.word	0x0801a870
  ldr r2, =_sbss
 8000efc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f00:	200063b0 	.word	0x200063b0

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_Init+0x3c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_Init+0x3c>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f001 fcfc 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 f80f 	bl	8000f48 <HAL_InitTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	e001      	b.n	8000f3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f36:	f7ff fdb9 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_InitTick+0x70>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fd07 	bl	8002986 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f8c:	f001 fcd1 	bl	8002932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_InitTick+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20006274 	.word	0x20006274

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20006274 	.word	0x20006274

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	609a      	str	r2, [r3, #8]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3360      	adds	r3, #96	@ 0x60
 80010c2:	461a      	mov	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <LL_ADC_SetOffset+0x44>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	4313      	orrs	r3, r2
 80010e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010e8:	bf00      	nop
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	03fff000 	.word	0x03fff000

080010f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3360      	adds	r3, #96	@ 0x60
 8001106:	461a      	mov	r2, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3360      	adds	r3, #96	@ 0x60
 8001134:	461a      	mov	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3330      	adds	r3, #48	@ 0x30
 8001190:	461a      	mov	r2, r3
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	211f      	movs	r1, #31
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	401a      	ands	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	0e9b      	lsrs	r3, r3, #26
 80011b8:	f003 011f 	and.w	r1, r3, #31
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	431a      	orrs	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3314      	adds	r3, #20
 80011e8:	461a      	mov	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	0e5b      	lsrs	r3, r3, #25
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	0d1b      	lsrs	r3, r3, #20
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2107      	movs	r1, #7
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	401a      	ands	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	0d1b      	lsrs	r3, r3, #20
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0318 	and.w	r3, r3, #24
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001254:	40d9      	lsrs	r1, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	400b      	ands	r3, r1
 800125a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	0007ffff 	.word	0x0007ffff

08001278 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 031f 	and.w	r3, r3, #31
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6093      	str	r3, [r2, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800131c:	d101      	bne.n	8001322 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800136c:	f043 0202 	orr.w	r2, r3, #2
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <LL_ADC_IsEnabled+0x18>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <LL_ADC_IsEnabled+0x1a>
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d101      	bne.n	80013be <LL_ADC_IsDisableOngoing+0x18>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_IsDisableOngoing+0x1a>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e0:	f043 0204 	orr.w	r2, r3, #4
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001408:	f043 0210 	orr.w	r2, r3, #16
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b04      	cmp	r3, #4
 800142e:	d101      	bne.n	8001434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001452:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001456:	f043 0220 	orr.w	r2, r3, #32
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b08      	cmp	r3, #8
 800147c:	d101      	bne.n	8001482 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e130      	b.n	800170c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fb1b 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fef1 	bl	80012b8 <LL_ADC_IsDeepPowerDownEnabled>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fed7 	bl	8001294 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff0c 	bl	8001308 <LL_ADC_IsInternalRegulatorEnabled>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d115      	bne.n	8001522 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fef0 	bl	80012e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001500:	4b84      	ldr	r3, [pc, #528]	@ (8001714 <HAL_ADC_Init+0x284>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	4a84      	ldr	r2, [pc, #528]	@ (8001718 <HAL_ADC_Init+0x288>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001514:	e002      	b.n	800151c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff feee 	bl	8001308 <LL_ADC_IsInternalRegulatorEnabled>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff62 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 8001558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80c9 	bne.w	80016fa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 80c5 	bne.w	80016fa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001574:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fefb 	bl	8001380 <LL_ADC_IsEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d115      	bne.n	80015bc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001590:	4862      	ldr	r0, [pc, #392]	@ (800171c <HAL_ADC_Init+0x28c>)
 8001592:	f7ff fef5 	bl	8001380 <LL_ADC_IsEnabled>
 8001596:	4604      	mov	r4, r0
 8001598:	4861      	ldr	r0, [pc, #388]	@ (8001720 <HAL_ADC_Init+0x290>)
 800159a:	f7ff fef1 	bl	8001380 <LL_ADC_IsEnabled>
 800159e:	4603      	mov	r3, r0
 80015a0:	431c      	orrs	r4, r3
 80015a2:	4860      	ldr	r0, [pc, #384]	@ (8001724 <HAL_ADC_Init+0x294>)
 80015a4:	f7ff feec 	bl	8001380 <LL_ADC_IsEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4323      	orrs	r3, r4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4619      	mov	r1, r3
 80015b6:	485c      	ldr	r0, [pc, #368]	@ (8001728 <HAL_ADC_Init+0x298>)
 80015b8:	f7ff fd46 	bl	8001048 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e5b      	ldrb	r3, [r3, #25]
 80015c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	3b01      	subs	r3, #1
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <HAL_ADC_Init+0x29c>)
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	430b      	orrs	r3, r1
 8001626:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff1c 	bl	800146a <LL_ADC_INJ_IsConversionOngoing>
 8001632:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d13d      	bne.n	80016b6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d13a      	bne.n	80016b6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001644:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800164c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	430b      	orrs	r3, r1
 8001668:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001670:	2b01      	cmp	r3, #1
 8001672:	d118      	bne.n	80016a6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001696:	430a      	orrs	r2, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	e007      	b.n	80016b6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10c      	bne.n	80016d8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	f023 010f 	bic.w	r1, r3, #15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d6:	e007      	b.n	80016e8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020f 	bic.w	r2, r2, #15
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80016f8:	e007      	b.n	800170a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	f043 0210 	orr.w	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800170a:	7ffb      	ldrb	r3, [r7, #31]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3724      	adds	r7, #36	@ 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	053e2d63 	.word	0x053e2d63
 800171c:	50040000 	.word	0x50040000
 8001720:	50040100 	.word	0x50040100
 8001724:	50040200 	.word	0x50040200
 8001728:	50040300 	.word	0x50040300
 800172c:	fff0c007 	.word	0xfff0c007

08001730 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800173c:	4853      	ldr	r0, [pc, #332]	@ (800188c <HAL_ADC_Start_DMA+0x15c>)
 800173e:	f7ff fd9b 	bl	8001278 <LL_ADC_GetMultimode>
 8001742:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fe67 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8093 	bne.w	800187c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_Start_DMA+0x34>
 8001760:	2302      	movs	r3, #2
 8001762:	e08e      	b.n	8001882 <HAL_ADC_Start_DMA+0x152>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a47      	ldr	r2, [pc, #284]	@ (8001890 <HAL_ADC_Start_DMA+0x160>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d008      	beq.n	8001788 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d002      	beq.n	8001788 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d172      	bne.n	800186e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 fda7 	bl	80022dc <ADC_Enable>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d165      	bne.n	8001864 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a38      	ldr	r2, [pc, #224]	@ (8001894 <HAL_ADC_Start_DMA+0x164>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d002      	beq.n	80017bc <HAL_ADC_Start_DMA+0x8c>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e000      	b.n	80017be <HAL_ADC_Start_DMA+0x8e>
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_ADC_Start_DMA+0x168>)
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d002      	beq.n	80017cc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	f023 0206 	bic.w	r2, r3, #6
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <HAL_ADC_Start_DMA+0x16c>)
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	4a26      	ldr	r2, [pc, #152]	@ (80018a0 <HAL_ADC_Start_DMA+0x170>)
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <HAL_ADC_Start_DMA+0x174>)
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	221c      	movs	r2, #28
 8001816:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0210 	orr.w	r2, r2, #16
 800182e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3340      	adds	r3, #64	@ 0x40
 800184a:	4619      	mov	r1, r3
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f001 fc4c 	bl	80030ec <HAL_DMA_Start_IT>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fdb5 	bl	80013cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001862:	e00d      	b.n	8001880 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800186c:	e008      	b.n	8001880 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800187a:	e001      	b.n	8001880 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800187c:	2302      	movs	r3, #2
 800187e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001880:	7dfb      	ldrb	r3, [r7, #23]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	50040300 	.word	0x50040300
 8001890:	50040200 	.word	0x50040200
 8001894:	50040100 	.word	0x50040100
 8001898:	50040000 	.word	0x50040000
 800189c:	080024a7 	.word	0x080024a7
 80018a0:	0800257f 	.word	0x0800257f
 80018a4:	0800259b 	.word	0x0800259b

080018a8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Stop_DMA+0x16>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e051      	b.n	8001962 <HAL_ADC_Stop_DMA+0xba>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018c6:	2103      	movs	r1, #3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fc4b 	bl	8002164 <ADC_ConversionStop>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13f      	bne.n	8001958 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d10f      	bne.n	8001916 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fc56 	bl	80031ac <HAL_DMA_Abort>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0210 	bic.w	r2, r2, #16
 8001924:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fd5b 	bl	80023e8 <ADC_Disable>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e002      	b.n	800193e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fd55 	bl	80023e8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b6      	sub	sp, #216	@ 0xd8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x22>
 800199e:	2302      	movs	r3, #2
 80019a0:	e3c9      	b.n	8002136 <HAL_ADC_ConfigChannel+0x7b6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fd34 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 83aa 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d824      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3b02      	subs	r3, #2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d81b      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x8e>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <HAL_ADC_ConfigChannel+0x5c>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019f5 	.word	0x080019f5
 80019e4:	080019fd 	.word	0x080019fd
 80019e8:	08001a05 	.word	0x08001a05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80019ec:	230c      	movs	r3, #12
 80019ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019f2:	e010      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019f4:	2312      	movs	r3, #18
 80019f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019fa:	e00c      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80019fc:	2318      	movs	r3, #24
 80019fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a02:	e008      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a24:	f7ff fbac 	bl	8001180 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fcf5 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 8001a32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fd15 	bl	800146a <LL_ADC_INJ_IsConversionOngoing>
 8001a40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f040 81a4 	bne.w	8001d96 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 819f 	bne.w	8001d96 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fbb7 	bl	80011d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6919      	ldr	r1, [r3, #16]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a9c:	f7ff fb08 	bl	80010b0 <LL_ADC_SetOffset>
 8001aa0:	e179      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb25 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x14e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fb1a 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	e01e      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x18c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb0f 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e004      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1a4>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	e018      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1d6>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e004      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d106      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fade 	bl	8001124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fac2 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x214>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fab7 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x252>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff faac 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x26a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	e018      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x29c>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa7b 	bl	8001124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2102      	movs	r1, #2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa5f 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x2da>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa54 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x318>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fa49 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x330>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e014      	b.n	8001cda <HAL_ADC_ConfigChannel+0x35a>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001cd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa1c 	bl	8001124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa00 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x398>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2103      	movs	r1, #3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f9f5 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	e017      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x3c8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f9ea 	bl	80010f8 <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e003      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x3e0>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	e011      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x404>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d106      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2103      	movs	r1, #3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f9c7 	bl	8001124 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff faf0 	bl	8001380 <LL_ADC_IsEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 8140 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f7ff fa3b 	bl	8001230 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8001ffc <HAL_ADC_ConfigChannel+0x67c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 8131 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10b      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x46e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	bf94      	ite	ls
 8001de6:	2301      	movls	r3, #1
 8001de8:	2300      	movhi	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	e019      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x4a2>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d079      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x4c2>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	3301      	adds	r3, #1
 8001e3a:	069b      	lsls	r3, r3, #26
 8001e3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e40:	e015      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x4ee>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e52:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	069b      	lsls	r3, r3, #26
 8001e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x50e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	3301      	adds	r3, #1
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	e017      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x53e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	ea42 0103 	orr.w	r1, r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x564>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e9b      	lsrs	r3, r3, #26
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	051b      	lsls	r3, r3, #20
 8001ee2:	e018      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x596>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f16:	430b      	orrs	r3, r1
 8001f18:	e081      	b.n	800201e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x5b6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f34:	e015      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x5e2>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	069b      	lsls	r3, r3, #26
 8001f5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x602>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	e017      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x632>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	ea42 0103 	orr.w	r1, r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x65e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b1e      	subs	r3, #30
 8001fd6:	051b      	lsls	r3, r3, #20
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fdc:	e01e      	b.n	800201c <HAL_ADC_ConfigChannel+0x69c>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	60fb      	str	r3, [r7, #12]
  return result;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e006      	b.n	8002008 <HAL_ADC_ConfigChannel+0x688>
 8001ffa:	bf00      	nop
 8001ffc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f003 021f 	and.w	r2, r3, #31
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	051b      	lsls	r3, r3, #20
 8002018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002022:	4619      	mov	r1, r3
 8002024:	f7ff f8d8 	bl	80011d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <HAL_ADC_ConfigChannel+0x7c0>)
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d07a      	beq.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002034:	4843      	ldr	r0, [pc, #268]	@ (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 8002036:	f7ff f82d 	bl	8001094 <LL_ADC_GetCommonPathInternalCh>
 800203a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a41      	ldr	r2, [pc, #260]	@ (8002148 <HAL_ADC_ConfigChannel+0x7c8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d12c      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800204c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d126      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3c      	ldr	r2, [pc, #240]	@ (800214c <HAL_ADC_ConfigChannel+0x7cc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_ADC_ConfigChannel+0x6e8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_ADC_ConfigChannel+0x7d0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d15d      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002070:	4619      	mov	r1, r3
 8002072:	4834      	ldr	r0, [pc, #208]	@ (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 8002074:	f7fe fffb 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002078:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <HAL_ADC_ConfigChannel+0x7d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a36      	ldr	r2, [pc, #216]	@ (8002158 <HAL_ADC_ConfigChannel+0x7d8>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002092:	e002      	b.n	800209a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3b01      	subs	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a0:	e040      	b.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <HAL_ADC_ConfigChannel+0x7dc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d118      	bne.n	80020de <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d112      	bne.n	80020de <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a23      	ldr	r2, [pc, #140]	@ (800214c <HAL_ADC_ConfigChannel+0x7cc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_ConfigChannel+0x74c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_ADC_ConfigChannel+0x7d0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d12d      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d4:	4619      	mov	r1, r3
 80020d6:	481b      	ldr	r0, [pc, #108]	@ (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 80020d8:	f7fe ffc9 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020dc:	e024      	b.n	8002128 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_ADC_ConfigChannel+0x7e0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d120      	bne.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11a      	bne.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <HAL_ADC_ConfigChannel+0x7cc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d115      	bne.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002106:	4619      	mov	r1, r3
 8002108:	480e      	ldr	r0, [pc, #56]	@ (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 800210a:	f7fe ffb0 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
 800210e:	e00c      	b.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002128:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002132:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002136:	4618      	mov	r0, r3
 8002138:	37d8      	adds	r7, #216	@ 0xd8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	80080000 	.word	0x80080000
 8002144:	50040300 	.word	0x50040300
 8002148:	c7520000 	.word	0xc7520000
 800214c:	50040000 	.word	0x50040000
 8002150:	50040200 	.word	0x50040200
 8002154:	20000000 	.word	0x20000000
 8002158:	053e2d63 	.word	0x053e2d63
 800215c:	cb840000 	.word	0xcb840000
 8002160:	80000001 	.word	0x80000001

08002164 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f94e 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 8002180:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f96f 	bl	800146a <LL_ADC_INJ_IsConversionOngoing>
 800218c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8098 	beq.w	80022cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d02a      	beq.n	8002200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e5b      	ldrb	r3, [r3, #25]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d126      	bne.n	8002200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7e1b      	ldrb	r3, [r3, #24]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d122      	bne.n	8002200 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80021be:	e014      	b.n	80021ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4a45      	ldr	r2, [pc, #276]	@ (80022d8 <ADC_ConversionStop+0x174>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d90d      	bls.n	80021e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e074      	b.n	80022ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d1e3      	bne.n	80021c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2240      	movs	r2, #64	@ 0x40
 80021fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d014      	beq.n	8002230 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f906 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f8c3 	bl	80013a6 <LL_ADC_IsDisableOngoing>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f8e2 	bl	80013f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d014      	beq.n	8002260 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f915 	bl	800146a <LL_ADC_INJ_IsConversionOngoing>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f8ab 	bl	80013a6 <LL_ADC_IsDisableOngoing>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f8f1 	bl	8001442 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d005      	beq.n	8002272 <ADC_ConversionStop+0x10e>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d105      	bne.n	8002278 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800226c:	230c      	movs	r3, #12
 800226e:	617b      	str	r3, [r7, #20]
        break;
 8002270:	e005      	b.n	800227e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002272:	2308      	movs	r3, #8
 8002274:	617b      	str	r3, [r7, #20]
        break;
 8002276:	e002      	b.n	800227e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002278:	2304      	movs	r3, #4
 800227a:	617b      	str	r3, [r7, #20]
        break;
 800227c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800227e:	f7fe feb3 	bl	8000fe8 <HAL_GetTick>
 8002282:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002284:	e01b      	b.n	80022be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002286:	f7fe feaf 	bl	8000fe8 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b05      	cmp	r3, #5
 8002292:	d914      	bls.n	80022be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00d      	beq.n	80022be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1dc      	bne.n	8002286 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	a33fffff 	.word	0xa33fffff

080022dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f847 	bl	8001380 <LL_ADC_IsEnabled>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d169      	bne.n	80023cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b36      	ldr	r3, [pc, #216]	@ (80023d8 <ADC_Enable+0xfc>)
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e055      	b.n	80023ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f802 	bl	8001330 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800232c:	482b      	ldr	r0, [pc, #172]	@ (80023dc <ADC_Enable+0x100>)
 800232e:	f7fe feb1 	bl	8001094 <LL_ADC_GetCommonPathInternalCh>
 8002332:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233c:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <ADC_Enable+0x104>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	4a28      	ldr	r2, [pc, #160]	@ (80023e4 <ADC_Enable+0x108>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002356:	e002      	b.n	800235e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3b01      	subs	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002364:	f7fe fe40 	bl	8000fe8 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236a:	e028      	b.n	80023be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f805 	bl	8001380 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe ffd5 	bl	8001330 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002386:	f7fe fe2f 	bl	8000fe8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d914      	bls.n	80023be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d00d      	beq.n	80023be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e007      	b.n	80023ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d1cf      	bne.n	800236c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	8000003f 	.word	0x8000003f
 80023dc:	50040300 	.word	0x50040300
 80023e0:	20000000 	.word	0x20000000
 80023e4:	053e2d63 	.word	0x053e2d63

080023e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe ffd6 	bl	80013a6 <LL_ADC_IsDisableOngoing>
 80023fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe ffbd 	bl	8001380 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d047      	beq.n	800249c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d144      	bne.n	800249c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030d 	and.w	r3, r3, #13
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10c      	bne.n	800243a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe ff97 	bl	8001358 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2203      	movs	r2, #3
 8002430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002432:	f7fe fdd9 	bl	8000fe8 <HAL_GetTick>
 8002436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002438:	e029      	b.n	800248e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e023      	b.n	800249e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002456:	f7fe fdc7 	bl	8000fe8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d914      	bls.n	800248e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1dc      	bne.n	8002456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d14b      	bne.n	8002558 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d021      	beq.n	800251e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fe3b 	bl	800115a <LL_ADC_REG_IsTriggerSourceSWStart>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d032      	beq.n	8002550 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12b      	bne.n	8002550 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11f      	bne.n	8002550 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54
 800251c:	e018      	b.n	8002550 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7fe fa65 	bl	8000a20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002556:	e00e      	b.n	8002576 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fa00 	bl	800196a <HAL_ADC_ErrorCallback>
}
 800256a:	e004      	b.n	8002576 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7fe fa3d 	bl	8000a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff f9d2 	bl	800196a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <LL_ADC_IsEnabled>:
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_IsEnabled+0x18>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_IsEnabled+0x1a>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d101      	bne.n	800260c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b09f      	sub	sp, #124	@ 0x7c
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002636:	2302      	movs	r3, #2
 8002638:	e093      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002642:	2300      	movs	r3, #0
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002646:	2300      	movs	r3, #0
 8002648:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a47      	ldr	r2, [pc, #284]	@ (800276c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d102      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002654:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	e001      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e072      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffb8 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002684:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffb2 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d154      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002698:	2b00      	cmp	r3, #0
 800269a:	d151      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800269c:	4b35      	ldr	r3, [pc, #212]	@ (8002774 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800269e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d02c      	beq.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ba:	035b      	lsls	r3, r3, #13
 80026bc:	430b      	orrs	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c4:	4829      	ldr	r0, [pc, #164]	@ (800276c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026c6:	f7ff ff82 	bl	80025ce <LL_ADC_IsEnabled>
 80026ca:	4604      	mov	r4, r0
 80026cc:	4828      	ldr	r0, [pc, #160]	@ (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ce:	f7ff ff7e 	bl	80025ce <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	431c      	orrs	r4, r3
 80026d6:	4828      	ldr	r0, [pc, #160]	@ (8002778 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026d8:	f7ff ff79 	bl	80025ce <LL_ADC_IsEnabled>
 80026dc:	4603      	mov	r3, r0
 80026de:	4323      	orrs	r3, r4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d137      	bne.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026ec:	f023 030f 	bic.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	6811      	ldr	r1, [r2, #0]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026fe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002700:	e028      	b.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800270a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270e:	4817      	ldr	r0, [pc, #92]	@ (800276c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002710:	f7ff ff5d 	bl	80025ce <LL_ADC_IsEnabled>
 8002714:	4604      	mov	r4, r0
 8002716:	4816      	ldr	r0, [pc, #88]	@ (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002718:	f7ff ff59 	bl	80025ce <LL_ADC_IsEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	431c      	orrs	r4, r3
 8002720:	4815      	ldr	r0, [pc, #84]	@ (8002778 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002722:	f7ff ff54 	bl	80025ce <LL_ADC_IsEnabled>
 8002726:	4603      	mov	r3, r0
 8002728:	4323      	orrs	r3, r4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d112      	bne.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800272e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002736:	f023 030f 	bic.w	r3, r3, #15
 800273a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800273c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800273e:	e009      	b.n	8002754 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002752:	e000      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002754:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800275e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002762:	4618      	mov	r0, r3
 8002764:	377c      	adds	r7, #124	@ 0x7c
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	bf00      	nop
 800276c:	50040000 	.word	0x50040000
 8002770:	50040100 	.word	0x50040100
 8002774:	50040300 	.word	0x50040300
 8002778:	50040200 	.word	0x50040200

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	@ (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	@ (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	@ (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e014      	b.n	80029da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	791b      	ldrb	r3, [r3, #4]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f92f 	bl	8000c24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	795b      	ldrb	r3, [r3, #5]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_DAC_Start_DMA+0x1e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e0ab      	b.n	8002b5a <HAL_DAC_Start_DMA+0x176>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12f      	bne.n	8002a74 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a52      	ldr	r2, [pc, #328]	@ (8002b64 <HAL_DAC_Start_DMA+0x180>)
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a51      	ldr	r2, [pc, #324]	@ (8002b68 <HAL_DAC_Start_DMA+0x184>)
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a50      	ldr	r2, [pc, #320]	@ (8002b6c <HAL_DAC_Start_DMA+0x188>)
 8002a2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d013      	beq.n	8002a6a <HAL_DAC_Start_DMA+0x86>
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d845      	bhi.n	8002ad4 <HAL_DAC_Start_DMA+0xf0>
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DAC_Start_DMA+0x72>
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d005      	beq.n	8002a60 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002a54:	e03e      	b.n	8002ad4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	613b      	str	r3, [r7, #16]
        break;
 8002a5e:	e03c      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	613b      	str	r3, [r7, #16]
        break;
 8002a68:	e037      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3310      	adds	r3, #16
 8002a70:	613b      	str	r3, [r7, #16]
        break;
 8002a72:	e032      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a3d      	ldr	r2, [pc, #244]	@ (8002b70 <HAL_DAC_Start_DMA+0x18c>)
 8002a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <HAL_DAC_Start_DMA+0x190>)
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_DAC_Start_DMA+0x194>)
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d013      	beq.n	8002aca <HAL_DAC_Start_DMA+0xe6>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d817      	bhi.n	8002ad8 <HAL_DAC_Start_DMA+0xf4>
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_DAC_Start_DMA+0xd2>
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d005      	beq.n	8002ac0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ab4:	e010      	b.n	8002ad8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	613b      	str	r3, [r7, #16]
        break;
 8002abe:	e00c      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	613b      	str	r3, [r7, #16]
        break;
 8002ac8:	e007      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	331c      	adds	r3, #28
 8002ad0:	613b      	str	r3, [r7, #16]
        break;
 8002ad2:	e002      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ad8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6898      	ldr	r0, [r3, #8]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	f000 faf7 	bl	80030ec <HAL_DMA_Start_IT>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]
 8002b02:	e010      	b.n	8002b26 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68d8      	ldr	r0, [r3, #12]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	f000 fae5 	bl	80030ec <HAL_DMA_Start_IT>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2201      	movs	r2, #1
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e005      	b.n	8002b58 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	08002e69 	.word	0x08002e69
 8002b68:	08002e8b 	.word	0x08002e8b
 8002b6c:	08002ea7 	.word	0x08002ea7
 8002b70:	08002f11 	.word	0x08002f11
 8002b74:	08002f33 	.word	0x08002f33
 8002b78:	08002f4f 	.word	0x08002f4f

08002b7c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 faee 	bl	80031ac <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e00c      	b.n	8002bfc <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fae0 	bl	80031ac <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002bfa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b088      	sub	sp, #32
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	795b      	ldrb	r3, [r3, #5]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_DAC_ConfigChannel+0x1c>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e114      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x246>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	f040 8081 	bne.w	8002d4e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe f9cc 	bl	8000fe8 <HAL_GetTick>
 8002c50:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d140      	bne.n	8002cda <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c58:	e018      	b.n	8002c8c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c5a:	f7fe f9c5 	bl	8000fe8 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d911      	bls.n	8002c8c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f043 0208 	orr.w	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2203      	movs	r2, #3
 8002c86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0e9      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1df      	bne.n	8002c5a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fe f9b0 	bl	8001000 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	6992      	ldr	r2, [r2, #24]
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002caa:	e023      	b.n	8002cf4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cac:	f7fe f99c 	bl	8000fe8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d90f      	bls.n	8002cda <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0a      	bge.n	8002cda <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f043 0208 	orr.w	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0c2      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dbe3      	blt.n	8002cac <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe f98b 	bl	8001000 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	6992      	ldr	r2, [r2, #24]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	ea02 0103 	and.w	r1, r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	21ff      	movs	r1, #255	@ 0xff
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	ea02 0103 	and.w	r1, r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d11d      	bne.n	8002d92 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2207      	movs	r2, #7
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	22c0      	movs	r2, #192	@ 0xc0
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fd fdfc 	bl	8000a74 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	711a      	strb	r2, [r3, #4]
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fd fde1 	bl	8000a60 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fea0 	bl	8002c06 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	711a      	strb	r2, [r3, #4]
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ffd8 	bl	8002ed4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	711a      	strb	r2, [r3, #4]
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ffd1 	bl	8002ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff ffc7 	bl	8002efc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	711a      	strb	r2, [r3, #4]
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e098      	b.n	80030c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b4d      	ldr	r3, [pc, #308]	@ (80030cc <HAL_DMA_Init+0x150>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d80f      	bhi.n	8002fba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_DMA_Init+0x154>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80030d4 <HAL_DMA_Init+0x158>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	009a      	lsls	r2, r3, #2
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a48      	ldr	r2, [pc, #288]	@ (80030d8 <HAL_DMA_Init+0x15c>)
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fb8:	e00e      	b.n	8002fd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b46      	ldr	r3, [pc, #280]	@ (80030dc <HAL_DMA_Init+0x160>)
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a43      	ldr	r2, [pc, #268]	@ (80030d4 <HAL_DMA_Init+0x158>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	@ (80030e0 <HAL_DMA_Init+0x164>)
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003032:	d039      	beq.n	80030a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	4a27      	ldr	r2, [pc, #156]	@ (80030d8 <HAL_DMA_Init+0x15c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11a      	bne.n	8003074 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_DMA_Init+0x168>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	f003 031c 	and.w	r3, r3, #28
 800304a:	210f      	movs	r1, #15
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4924      	ldr	r1, [pc, #144]	@ (80030e4 <HAL_DMA_Init+0x168>)
 8003054:	4013      	ands	r3, r2
 8003056:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003058:	4b22      	ldr	r3, [pc, #136]	@ (80030e4 <HAL_DMA_Init+0x168>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 031c 	and.w	r3, r3, #28
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	491d      	ldr	r1, [pc, #116]	@ (80030e4 <HAL_DMA_Init+0x168>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
 8003072:	e019      	b.n	80030a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003074:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <HAL_DMA_Init+0x16c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	f003 031c 	and.w	r3, r3, #28
 8003080:	210f      	movs	r1, #15
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	4917      	ldr	r1, [pc, #92]	@ (80030e8 <HAL_DMA_Init+0x16c>)
 800308a:	4013      	ands	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <HAL_DMA_Init+0x16c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f003 031c 	and.w	r3, r3, #28
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	4911      	ldr	r1, [pc, #68]	@ (80030e8 <HAL_DMA_Init+0x16c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40020407 	.word	0x40020407
 80030d0:	bffdfff8 	.word	0xbffdfff8
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	40020000 	.word	0x40020000
 80030dc:	bffdfbf8 	.word	0xbffdfbf8
 80030e0:	40020400 	.word	0x40020400
 80030e4:	400200a8 	.word	0x400200a8
 80030e8:	400204a8 	.word	0x400204a8

080030ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_DMA_Start_IT+0x20>
 8003108:	2302      	movs	r3, #2
 800310a:	e04b      	b.n	80031a4 <HAL_DMA_Start_IT+0xb8>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d13a      	bne.n	8003196 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f91e 	bl	8003386 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 020e 	orr.w	r2, r2, #14
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e00f      	b.n	8003184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0204 	bic.w	r2, r2, #4
 8003172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 020a 	orr.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e005      	b.n	80031a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d008      	beq.n	80031d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2204      	movs	r2, #4
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020e 	bic.w	r2, r2, #14
 80031e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f003 021c 	and.w	r2, r3, #28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f003 031c 	and.w	r3, r3, #28
 8003248:	2204      	movs	r2, #4
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d026      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x7a>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d021      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	f003 021c 	and.w	r2, r3, #28
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	2104      	movs	r1, #4
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	2b00      	cmp	r3, #0
 8003296:	d071      	beq.n	800337c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032a0:	e06c      	b.n	800337c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f003 031c 	and.w	r3, r3, #28
 80032aa:	2202      	movs	r2, #2
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d02e      	beq.n	8003314 <HAL_DMA_IRQHandler+0xec>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 020a 	bic.w	r2, r2, #10
 80032dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f003 021c 	and.w	r2, r3, #28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	2102      	movs	r1, #2
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d038      	beq.n	800337c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003312:	e033      	b.n	800337c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003318:	f003 031c 	and.w	r3, r3, #28
 800331c:	2208      	movs	r2, #8
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d02a      	beq.n	800337e <HAL_DMA_IRQHandler+0x156>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d025      	beq.n	800337e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 020e 	bic.w	r2, r2, #14
 8003340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f003 021c 	and.w	r2, r3, #28
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f202 	lsl.w	r2, r1, r2
 8003354:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800337c:	bf00      	nop
 800337e:	bf00      	nop
}
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	f003 021c 	and.w	r2, r3, #28
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d108      	bne.n	80033ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033c8:	e007      	b.n	80033da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	60da      	str	r2, [r3, #12]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	e17f      	b.n	80036f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8171 	beq.w	80036f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d005      	beq.n	8003428 <HAL_GPIO_Init+0x40>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d130      	bne.n	800348a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800345e:	2201      	movs	r2, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0201 	and.w	r2, r3, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d118      	bne.n	80034c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	6939      	ldr	r1, [r7, #16]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80ac 	beq.w	80036f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_GPIO_Init+0x330>)
 800359c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359e:	4a5e      	ldr	r2, [pc, #376]	@ (8003718 <HAL_GPIO_Init+0x330>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80035a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003718 <HAL_GPIO_Init+0x330>)
 80035a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035b2:	4a5a      	ldr	r2, [pc, #360]	@ (800371c <HAL_GPIO_Init+0x334>)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035dc:	d025      	beq.n	800362a <HAL_GPIO_Init+0x242>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003720 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_GPIO_Init+0x23e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003724 <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x23a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003728 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x236>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4c      	ldr	r2, [pc, #304]	@ (800372c <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x232>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4b      	ldr	r2, [pc, #300]	@ (8003730 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x22e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x22a>
 800360e:	2306      	movs	r3, #6
 8003610:	e00c      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003612:	2307      	movs	r3, #7
 8003614:	e00a      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003616:	2305      	movs	r3, #5
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x244>
 800361a:	2304      	movs	r3, #4
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x244>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x244>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x244>
 800362a:	2300      	movs	r3, #0
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800363c:	4937      	ldr	r1, [pc, #220]	@ (800371c <HAL_GPIO_Init+0x334>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <HAL_GPIO_Init+0x350>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800366e:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <HAL_GPIO_Init+0x350>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <HAL_GPIO_Init+0x350>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003698:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <HAL_GPIO_Init+0x350>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800369e:	4b26      	ldr	r3, [pc, #152]	@ (8003738 <HAL_GPIO_Init+0x350>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <HAL_GPIO_Init+0x350>)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_GPIO_Init+0x350>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ec:	4a12      	ldr	r2, [pc, #72]	@ (8003738 <HAL_GPIO_Init+0x350>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	f47f ae78 	bne.w	80033f8 <HAL_GPIO_Init+0x10>
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40010000 	.word	0x40010000
 8003720:	48000400 	.word	0x48000400
 8003724:	48000800 	.word	0x48000800
 8003728:	48000c00 	.word	0x48000c00
 800372c:	48001000 	.word	0x48001000
 8003730:	48001400 	.word	0x48001400
 8003734:	48001800 	.word	0x48001800
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003758:	e002      	b.n	8003760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003776:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd f92c 	bl	80009e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a0:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40007000 	.word	0x40007000

080037b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c6:	d130      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c8:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d4:	d038      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037de:	4a1e      	ldr	r2, [pc, #120]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037e6:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2232      	movs	r2, #50	@ 0x32
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fc:	e002      	b.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3b01      	subs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003810:	d102      	bne.n	8003818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f2      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003818:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003824:	d110      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e00f      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003836:	d007      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003838:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003840:	4a05      	ldr	r2, [pc, #20]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40007000 	.word	0x40007000
 800385c:	20000000 	.word	0x20000000
 8003860:	431bde83 	.word	0x431bde83

08003864 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e3ca      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003876:	4b97      	ldr	r3, [pc, #604]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003880:	4b94      	ldr	r3, [pc, #592]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80e4 	beq.w	8003a60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_RCC_OscConfig+0x4a>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	f040 808b 	bne.w	80039bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 8087 	bne.w	80039bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ae:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e3a2      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	4b82      	ldr	r3, [pc, #520]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_RCC_OscConfig+0x7c>
 80038d6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038de:	e005      	b.n	80038ec <HAL_RCC_OscConfig+0x88>
 80038e0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d223      	bcs.n	8003938 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd55 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e383      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b73      	ldr	r3, [pc, #460]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a72      	ldr	r2, [pc, #456]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	496d      	ldr	r1, [pc, #436]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	4968      	ldr	r1, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
 8003936:	e025      	b.n	8003984 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a65      	ldr	r2, [pc, #404]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 800393e:	f043 0308 	orr.w	r3, r3, #8
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4960      	ldr	r1, [pc, #384]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003956:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	495b      	ldr	r1, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd15 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e343      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003984:	f000 fc4a 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b52      	ldr	r3, [pc, #328]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	4950      	ldr	r1, [pc, #320]	@ (8003ad8 <HAL_RCC_OscConfig+0x274>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
 80039a0:	4a4e      	ldr	r2, [pc, #312]	@ (8003adc <HAL_RCC_OscConfig+0x278>)
 80039a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039a4:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae0 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd facd 	bl	8000f48 <HAL_InitTick>
 80039ae:	4603      	mov	r3, r0
 80039b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d052      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	e327      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d032      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039c4:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a42      	ldr	r2, [pc, #264]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039d0:	f7fd fb0a 	bl	8000fe8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039d8:	f7fd fb06 	bl	8000fe8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e310      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f6:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a36      	ldr	r2, [pc, #216]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4931      	ldr	r1, [pc, #196]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a14:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	492c      	ldr	r1, [pc, #176]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	e01a      	b.n	8003a60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a36:	f7fd fad7 	bl	8000fe8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a3e:	f7fd fad3 	bl	8000fe8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e2dd      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a50:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x1da>
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d074      	beq.n	8003b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x21a>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d10e      	bne.n	8003a96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d064      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2f0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d160      	bne.n	8003b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e2ba      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x24a>
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e026      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab6:	d115      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x280>
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003abe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a02      	ldr	r2, [pc, #8]	@ (8003ad4 <HAL_RCC_OscConfig+0x270>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	0800702c 	.word	0x0800702c
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	4ba0      	ldr	r3, [pc, #640]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a9f      	ldr	r2, [pc, #636]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b9d      	ldr	r3, [pc, #628]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a9c      	ldr	r2, [pc, #624]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fa70 	bl	8000fe8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fa6c 	bl	8000fe8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e276      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1e:	4b92      	ldr	r3, [pc, #584]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2a8>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fa5c 	bl	8000fe8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fa58 	bl	8000fe8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e262      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b46:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2d0>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d060      	beq.n	8003c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_OscConfig+0x310>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b0c      	cmp	r3, #12
 8003b6c:	d119      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d116      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b74:	4b7c      	ldr	r3, [pc, #496]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_OscConfig+0x328>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e23f      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b76      	ldr	r3, [pc, #472]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	4973      	ldr	r1, [pc, #460]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	e040      	b.n	8003c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d023      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003baa:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6e      	ldr	r2, [pc, #440]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fa17 	bl	8000fe8 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fa13 	bl	8000fe8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e21d      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd0:	4b65      	ldr	r3, [pc, #404]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b62      	ldr	r3, [pc, #392]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	495f      	ldr	r1, [pc, #380]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	e018      	b.n	8003c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f9f3 	bl	8000fe8 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd f9ef 	bl	8000fe8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1f9      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03c      	beq.n	8003caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c38:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd f9ce 	bl	8000fe8 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fd f9ca 	bl	8000fe8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1d4      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ef      	beq.n	8003c50 <HAL_RCC_OscConfig+0x3ec>
 8003c70:	e01b      	b.n	8003caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c78:	4a3b      	ldr	r2, [pc, #236]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fd f9b1 	bl	8000fe8 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fd f9ad 	bl	8000fe8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1b7      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c9c:	4b32      	ldr	r3, [pc, #200]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ef      	bne.n	8003c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a6 	beq.w	8003e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc8:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	4a26      	ldr	r2, [pc, #152]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd4:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce4:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <HAL_RCC_OscConfig+0x508>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d118      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d6c <HAL_RCC_OscConfig+0x508>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d6c <HAL_RCC_OscConfig+0x508>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f974 	bl	8000fe8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fd f970 	bl	8000fe8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e17a      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <HAL_RCC_OscConfig+0x508>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d108      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4d8>
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	4a0d      	ldr	r2, [pc, #52]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d3a:	e029      	b.n	8003d90 <HAL_RCC_OscConfig+0x52c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d115      	bne.n	8003d70 <HAL_RCC_OscConfig+0x50c>
 8003d44:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a03      	ldr	r2, [pc, #12]	@ (8003d68 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d64:	e014      	b.n	8003d90 <HAL_RCC_OscConfig+0x52c>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	4b9c      	ldr	r3, [pc, #624]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	4a9b      	ldr	r2, [pc, #620]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d80:	4b98      	ldr	r3, [pc, #608]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	4a97      	ldr	r2, [pc, #604]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d016      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd f926 	bl	8000fe8 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd f922 	bl	8000fe8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e12a      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ed      	beq.n	8003da0 <HAL_RCC_OscConfig+0x53c>
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd f90f 	bl	8000fe8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd f90b 	bl	8000fe8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e113      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de4:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ed      	bne.n	8003dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	4a79      	ldr	r2, [pc, #484]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80fe 	beq.w	800400a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	f040 80d0 	bne.w	8003fb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e18:	4b72      	ldr	r3, [pc, #456]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d130      	bne.n	8003e8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	3b01      	subs	r3, #1
 8003e38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d127      	bne.n	8003e8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e58:	2a07      	cmp	r2, #7
 8003e5a:	bf14      	ite	ne
 8003e5c:	2201      	movne	r2, #1
 8003e5e:	2200      	moveq	r2, #0
 8003e60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	3b01      	subs	r3, #1
 8003e88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d06e      	beq.n	8003f6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d069      	beq.n	8003f68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e94:	4b53      	ldr	r3, [pc, #332]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0ad      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ebc:	f7fd f894 	bl	8000fe8 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd f890 	bl	8000fe8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e09a      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed6:	4b43      	ldr	r3, [pc, #268]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee2:	4b40      	ldr	r3, [pc, #256]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	4b40      	ldr	r3, [pc, #256]	@ (8003fe8 <HAL_RCC_OscConfig+0x784>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ef2:	3a01      	subs	r2, #1
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003efc:	0212      	lsls	r2, r2, #8
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f04:	0852      	lsrs	r2, r2, #1
 8003f06:	3a01      	subs	r2, #1
 8003f08:	0552      	lsls	r2, r2, #21
 8003f0a:	4311      	orrs	r1, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f10:	0852      	lsrs	r2, r2, #1
 8003f12:	3a01      	subs	r2, #1
 8003f14:	0652      	lsls	r2, r2, #25
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f1c:	0912      	lsrs	r2, r2, #4
 8003f1e:	0452      	lsls	r2, r2, #17
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4930      	ldr	r1, [pc, #192]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f28:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f34:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f40:	f7fd f852 	bl	8000fe8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fd f84e 	bl	8000fe8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e058      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f66:	e050      	b.n	800400a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e04f      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d148      	bne.n	800400a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f84:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f90:	f7fd f82a 	bl	8000fe8 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd f826 	bl	8000fe8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e030      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x734>
 8003fb6:	e028      	b.n	800400a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d023      	beq.n	8004006 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	@ (8003fe4 <HAL_RCC_OscConfig+0x780>)
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fd f80d 	bl	8000fe8 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd0:	e00c      	b.n	8003fec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fd f809 	bl	8000fe8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d905      	bls.n	8003fec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e013      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_OscConfig+0x7b0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ec      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_OscConfig+0x7b0>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4905      	ldr	r1, [pc, #20]	@ (8004014 <HAL_RCC_OscConfig+0x7b0>)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_RCC_OscConfig+0x7b4>)
 8004000:	4013      	ands	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e001      	b.n	800400a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	feeefffc 	.word	0xfeeefffc

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0e7      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004030:	4b75      	ldr	r3, [pc, #468]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d910      	bls.n	8004060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b72      	ldr	r3, [pc, #456]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 0207 	bic.w	r2, r3, #7
 8004046:	4970      	ldr	r1, [pc, #448]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b6e      	ldr	r3, [pc, #440]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0cf      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	4b66      	ldr	r3, [pc, #408]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004078:	429a      	cmp	r2, r3
 800407a:	d908      	bls.n	800408e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4960      	ldr	r1, [pc, #384]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d04c      	beq.n	8004134 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	4b5a      	ldr	r3, [pc, #360]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d121      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0a6      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b54      	ldr	r3, [pc, #336]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d115      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e09a      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d2:	4b4e      	ldr	r3, [pc, #312]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e08e      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e086      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b46      	ldr	r3, [pc, #280]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4943      	ldr	r1, [pc, #268]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fc ff70 	bl	8000fe8 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fc ff6c 	bl	8000fe8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e06e      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b3a      	ldr	r3, [pc, #232]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	4b31      	ldr	r3, [pc, #196]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800414c:	429a      	cmp	r2, r3
 800414e:	d208      	bcs.n	8004162 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b2e      	ldr	r3, [pc, #184]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	492b      	ldr	r1, [pc, #172]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004162:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d210      	bcs.n	8004192 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 0207 	bic.w	r2, r3, #7
 8004178:	4923      	ldr	r1, [pc, #140]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCC_ClockConfig+0x1ec>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e036      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800419e:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4918      	ldr	r1, [pc, #96]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4910      	ldr	r1, [pc, #64]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d0:	f000 f824 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	490b      	ldr	r1, [pc, #44]	@ (8004210 <HAL_RCC_ClockConfig+0x1f4>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	4a09      	ldr	r2, [pc, #36]	@ (8004214 <HAL_RCC_ClockConfig+0x1f8>)
 80041ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0x1fc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fea7 	bl	8000f48 <HAL_InitTick>
 80041fa:	4603      	mov	r3, r0
 80041fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40022000 	.word	0x40022000
 800420c:	40021000 	.word	0x40021000
 8004210:	0800702c 	.word	0x0800702c
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	@ 0x24
 8004220:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422a:	4b3e      	ldr	r3, [pc, #248]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004234:	4b3b      	ldr	r3, [pc, #236]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x34>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d121      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d11e      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004250:	4b34      	ldr	r3, [pc, #208]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800425c:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800426c:	4b2d      	ldr	r3, [pc, #180]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004278:	4a2b      	ldr	r2, [pc, #172]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x10c>)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004280:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d102      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004294:	4b25      	ldr	r3, [pc, #148]	@ (800432c <HAL_RCC_GetSysClockFreq+0x110>)
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e004      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a0:	4b23      	ldr	r3, [pc, #140]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x114>)
 80042a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	d134      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d003      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d003      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0xac>
 80042c0:	e005      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042c2:	4b1a      	ldr	r3, [pc, #104]	@ (800432c <HAL_RCC_GetSysClockFreq+0x110>)
 80042c4:	617b      	str	r3, [r7, #20]
      break;
 80042c6:	e005      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ca:	617b      	str	r3, [r7, #20]
      break;
 80042cc:	e002      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	617b      	str	r3, [r7, #20]
      break;
 80042d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	3301      	adds	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	fb03 f202 	mul.w	r2, r3, r2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	0e5b      	lsrs	r3, r3, #25
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	3301      	adds	r3, #1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004314:	69bb      	ldr	r3, [r7, #24]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	08007044 	.word	0x08007044
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_RCC_GetHCLKFreq+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000000 	.word	0x20000000

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004350:	f7ff fff0 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4904      	ldr	r1, [pc, #16]	@ (8004374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	0800703c 	.word	0x0800703c

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800437c:	f7ff ffda 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	@ (80043a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800703c 	.word	0x0800703c

080043a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b0:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff f9ee 	bl	800379c <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
 80043c2:	e014      	b.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b25      	ldr	r3, [pc, #148]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	4a24      	ldr	r2, [pc, #144]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d0:	4b22      	ldr	r3, [pc, #136]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff f9de 	bl	800379c <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f4:	d10b      	bne.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b80      	cmp	r3, #128	@ 0x80
 80043fa:	d919      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004400:	d902      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004402:	2302      	movs	r3, #2
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e013      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e010      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b80      	cmp	r3, #128	@ 0x80
 8004412:	d902      	bls.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004414:	2303      	movs	r3, #3
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e00a      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	@ 0x80
 800441e:	d102      	bne.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004420:	2302      	movs	r3, #2
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e004      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b70      	cmp	r3, #112	@ 0x70
 800442a:	d101      	bne.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	4909      	ldr	r1, [pc, #36]	@ (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004440:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40022000 	.word	0x40022000

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800446c:	2300      	movs	r3, #0
 800446e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004470:	2300      	movs	r3, #0
 8004472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d041      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004484:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004488:	d02a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800448a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800448e:	d824      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004494:	d008      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004496:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800449a:	d81e      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a4:	d010      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044a6:	e018      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a8:	4b86      	ldr	r3, [pc, #536]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a85      	ldr	r2, [pc, #532]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b4:	e015      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fabb 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c6:	e00c      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3320      	adds	r3, #32
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fba6 	bl	8004c20 <RCCEx_PLLSAI2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d8:	e003      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	74fb      	strb	r3, [r7, #19]
      break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e8:	4b76      	ldr	r3, [pc, #472]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044f6:	4973      	ldr	r1, [pc, #460]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044fe:	e001      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d041      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004514:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004518:	d02a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800451a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800451e:	d824      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800452a:	d81e      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004536:	e018      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004538:	4b62      	ldr	r3, [pc, #392]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a61      	ldr	r2, [pc, #388]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004542:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa73 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fb5e 	bl	8004c20 <RCCEx_PLLSAI2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	74fb      	strb	r3, [r7, #19]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004578:	4b52      	ldr	r3, [pc, #328]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004586:	494f      	ldr	r1, [pc, #316]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800458e:	e001      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a0 	beq.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b41      	ldr	r3, [pc, #260]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	4a40      	ldr	r2, [pc, #256]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c8:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d8:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3a      	ldr	r2, [pc, #232]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045e4:	f7fc fd00 	bl	8000fe8 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ea:	e009      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ec:	f7fc fcfc 	bl	8000fe8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d902      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	74fb      	strb	r3, [r7, #19]
        break;
 80045fe:	e005      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004600:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ef      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d15c      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	429a      	cmp	r2, r3
 800462e:	d019      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004630:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800463a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800463c:	4b21      	ldr	r3, [pc, #132]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800464c:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	4a1c      	ldr	r2, [pc, #112]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800465c:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fc fcbb 	bl	8000fe8 <HAL_GetTick>
 8004672:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004674:	e00b      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fc fcb7 	bl	8000fe8 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d902      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	74fb      	strb	r3, [r7, #19]
            break;
 800468c:	e006      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ec      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a2:	4b08      	ldr	r3, [pc, #32]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b2:	4904      	ldr	r1, [pc, #16]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046ba:	e009      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	74bb      	strb	r3, [r7, #18]
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d0:	7c7b      	ldrb	r3, [r7, #17]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	4a9d      	ldr	r2, [pc, #628]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ee:	4b98      	ldr	r3, [pc, #608]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f023 0203 	bic.w	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	4994      	ldr	r1, [pc, #592]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004710:	4b8f      	ldr	r3, [pc, #572]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f023 020c 	bic.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	498c      	ldr	r1, [pc, #560]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004732:	4b87      	ldr	r3, [pc, #540]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	4983      	ldr	r1, [pc, #524]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004754:	4b7e      	ldr	r3, [pc, #504]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	497b      	ldr	r1, [pc, #492]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004776:	4b76      	ldr	r3, [pc, #472]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004784:	4972      	ldr	r1, [pc, #456]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004798:	4b6d      	ldr	r3, [pc, #436]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	496a      	ldr	r1, [pc, #424]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ba:	4b65      	ldr	r3, [pc, #404]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c8:	4961      	ldr	r1, [pc, #388]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ea:	4959      	ldr	r1, [pc, #356]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fe:	4b54      	ldr	r3, [pc, #336]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	4950      	ldr	r1, [pc, #320]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004820:	4b4b      	ldr	r3, [pc, #300]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	4948      	ldr	r1, [pc, #288]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004842:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	493f      	ldr	r1, [pc, #252]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d028      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004864:	4b3a      	ldr	r3, [pc, #232]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004872:	4937      	ldr	r1, [pc, #220]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800487e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004882:	d106      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004884:	4b32      	ldr	r3, [pc, #200]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a31      	ldr	r2, [pc, #196]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488e:	60d3      	str	r3, [r2, #12]
 8004890:	e011      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004896:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800489a:	d10c      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f8c8 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d028      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c2:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d0:	491f      	ldr	r1, [pc, #124]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ec:	60d3      	str	r3, [r2, #12]
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f899 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02b      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492e:	4908      	ldr	r1, [pc, #32]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800493e:	d109      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a02      	ldr	r2, [pc, #8]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494a:	60d3      	str	r3, [r2, #12]
 800494c:	e014      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800495c:	d10c      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f867 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004984:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004992:	4928      	ldr	r1, [pc, #160]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049a2:	d10d      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	2102      	movs	r1, #2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f844 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d014      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	74bb      	strb	r3, [r7, #18]
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3320      	adds	r3, #32
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f925 	bl	8004c20 <RCCEx_PLLSAI2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049f0:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049fe:	490d      	ldr	r1, [pc, #52]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a12:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a22:	4904      	ldr	r1, [pc, #16]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000

08004a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a46:	4b75      	ldr	r3, [pc, #468]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d018      	beq.n	8004a84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a52:	4b72      	ldr	r3, [pc, #456]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0203 	and.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d10d      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
       ||
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
       ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d047      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e044      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d018      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x86>
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d825      	bhi.n	8004adc <RCCEx_PLLSAI1_Config+0xa4>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <RCCEx_PLLSAI1_Config+0x62>
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d009      	beq.n	8004aac <RCCEx_PLLSAI1_Config+0x74>
 8004a98:	e020      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a9a:	4b60      	ldr	r3, [pc, #384]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11d      	bne.n	8004ae2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aaa:	e01a      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aac:	4b5b      	ldr	r3, [pc, #364]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e013      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004abe:	4b57      	ldr	r3, [pc, #348]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aca:	4b54      	ldr	r3, [pc, #336]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ada:	e006      	b.n	8004aea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e004      	b.n	8004aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004af2:	4b4a      	ldr	r3, [pc, #296]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	430b      	orrs	r3, r1
 8004b08:	4944      	ldr	r1, [pc, #272]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d17d      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b14:	4b41      	ldr	r3, [pc, #260]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a40      	ldr	r2, [pc, #256]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fc fa62 	bl	8000fe8 <HAL_GetTick>
 8004b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b26:	e009      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b28:	f7fc fa5e 	bl	8000fe8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d902      	bls.n	8004b3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	73fb      	strb	r3, [r7, #15]
        break;
 8004b3a:	e005      	b.n	8004b48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b3c:	4b37      	ldr	r3, [pc, #220]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ef      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d160      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d111      	bne.n	8004b78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b54:	4b31      	ldr	r3, [pc, #196]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6892      	ldr	r2, [r2, #8]
 8004b64:	0211      	lsls	r1, r2, #8
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68d2      	ldr	r2, [r2, #12]
 8004b6a:	0912      	lsrs	r2, r2, #4
 8004b6c:	0452      	lsls	r2, r2, #17
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	492a      	ldr	r1, [pc, #168]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	610b      	str	r3, [r1, #16]
 8004b76:	e027      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d112      	bne.n	8004ba4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b7e:	4b27      	ldr	r3, [pc, #156]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b86:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6892      	ldr	r2, [r2, #8]
 8004b8e:	0211      	lsls	r1, r2, #8
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6912      	ldr	r2, [r2, #16]
 8004b94:	0852      	lsrs	r2, r2, #1
 8004b96:	3a01      	subs	r2, #1
 8004b98:	0552      	lsls	r2, r2, #21
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	491f      	ldr	r1, [pc, #124]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	610b      	str	r3, [r1, #16]
 8004ba2:	e011      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
 8004bb4:	0211      	lsls	r1, r2, #8
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6952      	ldr	r2, [r2, #20]
 8004bba:	0852      	lsrs	r2, r2, #1
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	0652      	lsls	r2, r2, #25
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	4916      	ldr	r1, [pc, #88]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bc8:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fa08 	bl	8000fe8 <HAL_GetTick>
 8004bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bda:	e009      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bdc:	f7fc fa04 	bl	8000fe8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d902      	bls.n	8004bf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	73fb      	strb	r3, [r7, #15]
          break;
 8004bee:	e005      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ef      	beq.n	8004bdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c02:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	4904      	ldr	r1, [pc, #16]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000

08004c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c3a:	4b67      	ldr	r3, [pc, #412]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d10d      	bne.n	8004c66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c52:	4b61      	ldr	r3, [pc, #388]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
       ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d047      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
 8004c6a:	e044      	b.n	8004cf6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d018      	beq.n	8004ca6 <RCCEx_PLLSAI2_Config+0x86>
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d825      	bhi.n	8004cc4 <RCCEx_PLLSAI2_Config+0xa4>
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d002      	beq.n	8004c82 <RCCEx_PLLSAI2_Config+0x62>
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d009      	beq.n	8004c94 <RCCEx_PLLSAI2_Config+0x74>
 8004c80:	e020      	b.n	8004cc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c82:	4b55      	ldr	r3, [pc, #340]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d11d      	bne.n	8004cca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c92:	e01a      	b.n	8004cca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d116      	bne.n	8004cce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca4:	e013      	b.n	8004cce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cb2:	4b49      	ldr	r3, [pc, #292]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cc2:	e006      	b.n	8004cd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc8:	e004      	b.n	8004cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cda:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	4939      	ldr	r1, [pc, #228]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d167      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cfc:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a35      	ldr	r2, [pc, #212]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fc f96e 	bl	8000fe8 <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d0e:	e009      	b.n	8004d24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d10:	f7fc f96a 	bl	8000fe8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d902      	bls.n	8004d24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	73fb      	strb	r3, [r7, #15]
        break;
 8004d22:	e005      	b.n	8004d30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d24:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ef      	bne.n	8004d10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d14a      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d111      	bne.n	8004d60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d3c:	4b26      	ldr	r3, [pc, #152]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6892      	ldr	r2, [r2, #8]
 8004d4c:	0211      	lsls	r1, r2, #8
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68d2      	ldr	r2, [r2, #12]
 8004d52:	0912      	lsrs	r2, r2, #4
 8004d54:	0452      	lsls	r2, r2, #17
 8004d56:	430a      	orrs	r2, r1
 8004d58:	491f      	ldr	r1, [pc, #124]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	614b      	str	r3, [r1, #20]
 8004d5e:	e011      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d60:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6892      	ldr	r2, [r2, #8]
 8004d70:	0211      	lsls	r1, r2, #8
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6912      	ldr	r2, [r2, #16]
 8004d76:	0852      	lsrs	r2, r2, #1
 8004d78:	3a01      	subs	r2, #1
 8004d7a:	0652      	lsls	r2, r2, #25
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	4916      	ldr	r1, [pc, #88]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d84:	4b14      	ldr	r3, [pc, #80]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a13      	ldr	r2, [pc, #76]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fc f92a 	bl	8000fe8 <HAL_GetTick>
 8004d94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d96:	e009      	b.n	8004dac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d98:	f7fc f926 	bl	8000fe8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d902      	bls.n	8004dac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	73fb      	strb	r3, [r7, #15]
          break;
 8004daa:	e005      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ef      	beq.n	8004d98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dbe:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4904      	ldr	r1, [pc, #16]	@ (8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e049      	b.n	8004e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fb ff7c 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 f89e 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e047      	b.n	8004f34 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a23      	ldr	r2, [pc, #140]	@ (8004f40 <HAL_TIM_Base_Start+0xb4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebe:	d018      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f44 <HAL_TIM_Base_Start+0xb8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	@ (8004f48 <HAL_TIM_Base_Start+0xbc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <HAL_TIM_Base_Start+0xc0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f50 <HAL_TIM_Base_Start+0xc4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIM_Base_Start+0x66>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	@ (8004f54 <HAL_TIM_Base_Start+0xc8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d115      	bne.n	8004f1e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <HAL_TIM_Base_Start+0xcc>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d015      	beq.n	8004f30 <HAL_TIM_Base_Start+0xa4>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0a:	d011      	beq.n	8004f30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	e008      	b.n	8004f30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e000      	b.n	8004f32 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	00010007 	.word	0x00010007

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	@ (8005088 <TIM_Base_SetConfig+0x12c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7a:	d00f      	beq.n	8004f9c <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a43      	ldr	r2, [pc, #268]	@ (800508c <TIM_Base_SetConfig+0x130>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a42      	ldr	r2, [pc, #264]	@ (8005090 <TIM_Base_SetConfig+0x134>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a41      	ldr	r2, [pc, #260]	@ (8005094 <TIM_Base_SetConfig+0x138>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <TIM_Base_SetConfig+0x13c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d108      	bne.n	8004fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a35      	ldr	r2, [pc, #212]	@ (8005088 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01f      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbc:	d01b      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a32      	ldr	r2, [pc, #200]	@ (800508c <TIM_Base_SetConfig+0x130>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d017      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a31      	ldr	r2, [pc, #196]	@ (8005090 <TIM_Base_SetConfig+0x134>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	@ (8005094 <TIM_Base_SetConfig+0x138>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005098 <TIM_Base_SetConfig+0x13c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800509c <TIM_Base_SetConfig+0x140>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <TIM_Base_SetConfig+0x144>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <TIM_Base_SetConfig+0x148>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a16      	ldr	r2, [pc, #88]	@ (8005088 <TIM_Base_SetConfig+0x12c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00f      	beq.n	8005054 <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <TIM_Base_SetConfig+0x13c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0xf8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a17      	ldr	r2, [pc, #92]	@ (800509c <TIM_Base_SetConfig+0x140>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <TIM_Base_SetConfig+0x144>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <TIM_Base_SetConfig+0x148>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]
  }
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050bc:	2302      	movs	r3, #2
 80050be:	e068      	b.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1e      	ldr	r2, [pc, #120]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01d      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005132:	d018      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1a      	ldr	r2, [pc, #104]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a13      	ldr	r2, [pc, #76]	@ (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a14      	ldr	r2, [pc, #80]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10c      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800516c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40014000 	.word	0x40014000

080051b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e040      	b.n	800524c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb fdb0 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fae0 	bl	80057c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f825 	bl	8005254 <UART_SetConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01b      	b.n	800524c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb5f 	bl	8005908 <UART_CheckIdleState>
 800524a:	4603      	mov	r3, r0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b08a      	sub	sp, #40	@ 0x28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba4      	ldr	r3, [pc, #656]	@ (8005514 <UART_SetConfig+0x2c0>)
 8005284:	4013      	ands	r3, r2
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a99      	ldr	r2, [pc, #612]	@ (8005518 <UART_SetConfig+0x2c4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	4313      	orrs	r3, r2
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a90      	ldr	r2, [pc, #576]	@ (800551c <UART_SetConfig+0x2c8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d126      	bne.n	800532c <UART_SetConfig+0xd8>
 80052de:	4b90      	ldr	r3, [pc, #576]	@ (8005520 <UART_SetConfig+0x2cc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d81b      	bhi.n	8005324 <UART_SetConfig+0xd0>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0xa0>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005315 	.word	0x08005315
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	0800531d 	.word	0x0800531d
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530a:	e116      	b.n	800553a <UART_SetConfig+0x2e6>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005312:	e112      	b.n	800553a <UART_SetConfig+0x2e6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531a:	e10e      	b.n	800553a <UART_SetConfig+0x2e6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005322:	e10a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800532a:	e106      	b.n	800553a <UART_SetConfig+0x2e6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7c      	ldr	r2, [pc, #496]	@ (8005524 <UART_SetConfig+0x2d0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d138      	bne.n	80053a8 <UART_SetConfig+0x154>
 8005336:	4b7a      	ldr	r3, [pc, #488]	@ (8005520 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d82d      	bhi.n	80053a0 <UART_SetConfig+0x14c>
 8005344:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <UART_SetConfig+0xf8>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	08005381 	.word	0x08005381
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a1 	.word	0x080053a1
 8005358:	080053a1 	.word	0x080053a1
 800535c:	08005391 	.word	0x08005391
 8005360:	080053a1 	.word	0x080053a1
 8005364:	080053a1 	.word	0x080053a1
 8005368:	080053a1 	.word	0x080053a1
 800536c:	08005389 	.word	0x08005389
 8005370:	080053a1 	.word	0x080053a1
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053a1 	.word	0x080053a1
 800537c:	08005399 	.word	0x08005399
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005386:	e0d8      	b.n	800553a <UART_SetConfig+0x2e6>
 8005388:	2302      	movs	r3, #2
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800538e:	e0d4      	b.n	800553a <UART_SetConfig+0x2e6>
 8005390:	2304      	movs	r3, #4
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005396:	e0d0      	b.n	800553a <UART_SetConfig+0x2e6>
 8005398:	2308      	movs	r3, #8
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800539e:	e0cc      	b.n	800553a <UART_SetConfig+0x2e6>
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a6:	e0c8      	b.n	800553a <UART_SetConfig+0x2e6>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005528 <UART_SetConfig+0x2d4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d125      	bne.n	80053fe <UART_SetConfig+0x1aa>
 80053b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005520 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053bc:	2b30      	cmp	r3, #48	@ 0x30
 80053be:	d016      	beq.n	80053ee <UART_SetConfig+0x19a>
 80053c0:	2b30      	cmp	r3, #48	@ 0x30
 80053c2:	d818      	bhi.n	80053f6 <UART_SetConfig+0x1a2>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d00a      	beq.n	80053de <UART_SetConfig+0x18a>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d814      	bhi.n	80053f6 <UART_SetConfig+0x1a2>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <UART_SetConfig+0x182>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d008      	beq.n	80053e6 <UART_SetConfig+0x192>
 80053d4:	e00f      	b.n	80053f6 <UART_SetConfig+0x1a2>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053dc:	e0ad      	b.n	800553a <UART_SetConfig+0x2e6>
 80053de:	2302      	movs	r3, #2
 80053e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e4:	e0a9      	b.n	800553a <UART_SetConfig+0x2e6>
 80053e6:	2304      	movs	r3, #4
 80053e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ec:	e0a5      	b.n	800553a <UART_SetConfig+0x2e6>
 80053ee:	2308      	movs	r3, #8
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f4:	e0a1      	b.n	800553a <UART_SetConfig+0x2e6>
 80053f6:	2310      	movs	r3, #16
 80053f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fc:	e09d      	b.n	800553a <UART_SetConfig+0x2e6>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a4a      	ldr	r2, [pc, #296]	@ (800552c <UART_SetConfig+0x2d8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d125      	bne.n	8005454 <UART_SetConfig+0x200>
 8005408:	4b45      	ldr	r3, [pc, #276]	@ (8005520 <UART_SetConfig+0x2cc>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005412:	2bc0      	cmp	r3, #192	@ 0xc0
 8005414:	d016      	beq.n	8005444 <UART_SetConfig+0x1f0>
 8005416:	2bc0      	cmp	r3, #192	@ 0xc0
 8005418:	d818      	bhi.n	800544c <UART_SetConfig+0x1f8>
 800541a:	2b80      	cmp	r3, #128	@ 0x80
 800541c:	d00a      	beq.n	8005434 <UART_SetConfig+0x1e0>
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d814      	bhi.n	800544c <UART_SetConfig+0x1f8>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <UART_SetConfig+0x1d8>
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d008      	beq.n	800543c <UART_SetConfig+0x1e8>
 800542a:	e00f      	b.n	800544c <UART_SetConfig+0x1f8>
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005432:	e082      	b.n	800553a <UART_SetConfig+0x2e6>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543a:	e07e      	b.n	800553a <UART_SetConfig+0x2e6>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005442:	e07a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544a:	e076      	b.n	800553a <UART_SetConfig+0x2e6>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005452:	e072      	b.n	800553a <UART_SetConfig+0x2e6>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <UART_SetConfig+0x2dc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d12a      	bne.n	80054b4 <UART_SetConfig+0x260>
 800545e:	4b30      	ldr	r3, [pc, #192]	@ (8005520 <UART_SetConfig+0x2cc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005468:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800546c:	d01a      	beq.n	80054a4 <UART_SetConfig+0x250>
 800546e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005472:	d81b      	bhi.n	80054ac <UART_SetConfig+0x258>
 8005474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005478:	d00c      	beq.n	8005494 <UART_SetConfig+0x240>
 800547a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800547e:	d815      	bhi.n	80054ac <UART_SetConfig+0x258>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <UART_SetConfig+0x238>
 8005484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x248>
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x258>
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005492:	e052      	b.n	800553a <UART_SetConfig+0x2e6>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549a:	e04e      	b.n	800553a <UART_SetConfig+0x2e6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a2:	e04a      	b.n	800553a <UART_SetConfig+0x2e6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054aa:	e046      	b.n	800553a <UART_SetConfig+0x2e6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b2:	e042      	b.n	800553a <UART_SetConfig+0x2e6>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <UART_SetConfig+0x2c4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d13a      	bne.n	8005534 <UART_SetConfig+0x2e0>
 80054be:	4b18      	ldr	r3, [pc, #96]	@ (8005520 <UART_SetConfig+0x2cc>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054cc:	d01a      	beq.n	8005504 <UART_SetConfig+0x2b0>
 80054ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054d2:	d81b      	bhi.n	800550c <UART_SetConfig+0x2b8>
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d8:	d00c      	beq.n	80054f4 <UART_SetConfig+0x2a0>
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054de:	d815      	bhi.n	800550c <UART_SetConfig+0x2b8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <UART_SetConfig+0x298>
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0x2a8>
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x2b8>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e022      	b.n	800553a <UART_SetConfig+0x2e6>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e01e      	b.n	800553a <UART_SetConfig+0x2e6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e01a      	b.n	800553a <UART_SetConfig+0x2e6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e016      	b.n	800553a <UART_SetConfig+0x2e6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e012      	b.n	800553a <UART_SetConfig+0x2e6>
 8005514:	efff69f3 	.word	0xefff69f3
 8005518:	40008000 	.word	0x40008000
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	40004400 	.word	0x40004400
 8005528:	40004800 	.word	0x40004800
 800552c:	40004c00 	.word	0x40004c00
 8005530:	40005000 	.word	0x40005000
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a9f      	ldr	r2, [pc, #636]	@ (80057bc <UART_SetConfig+0x568>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d17a      	bne.n	800563a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005544:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005548:	2b08      	cmp	r3, #8
 800554a:	d824      	bhi.n	8005596 <UART_SetConfig+0x342>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <UART_SetConfig+0x300>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005579 	.word	0x08005579
 8005558:	08005597 	.word	0x08005597
 800555c:	08005581 	.word	0x08005581
 8005560:	08005597 	.word	0x08005597
 8005564:	08005587 	.word	0x08005587
 8005568:	08005597 	.word	0x08005597
 800556c:	08005597 	.word	0x08005597
 8005570:	08005597 	.word	0x08005597
 8005574:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7fe fee8 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b8f      	ldr	r3, [pc, #572]	@ (80057c0 <UART_SetConfig+0x56c>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe fe49 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80fb 	beq.w	80057a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d903      	bls.n	80055ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055cc:	e0e8      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2200      	movs	r2, #0
 80055d2:	461c      	mov	r4, r3
 80055d4:	4615      	mov	r5, r2
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	022b      	lsls	r3, r5, #8
 80055e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055e4:	0222      	lsls	r2, r4, #8
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	6849      	ldr	r1, [r1, #4]
 80055ea:	0849      	lsrs	r1, r1, #1
 80055ec:	2000      	movs	r0, #0
 80055ee:	4688      	mov	r8, r1
 80055f0:	4681      	mov	r9, r0
 80055f2:	eb12 0a08 	adds.w	sl, r2, r8
 80055f6:	eb43 0b09 	adc.w	fp, r3, r9
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005608:	4650      	mov	r0, sl
 800560a:	4659      	mov	r1, fp
 800560c:	f7fa fddc 	bl	80001c8 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561e:	d308      	bcc.n	8005632 <UART_SetConfig+0x3de>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005626:	d204      	bcs.n	8005632 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e0b6      	b.n	80057a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005638:	e0b2      	b.n	80057a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005642:	d15e      	bne.n	8005702 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005644:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005648:	2b08      	cmp	r3, #8
 800564a:	d828      	bhi.n	800569e <UART_SetConfig+0x44a>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x400>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fe68 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e014      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe fe7a 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8005684:	61f8      	str	r0, [r7, #28]
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b4d      	ldr	r3, [pc, #308]	@ (80057c0 <UART_SetConfig+0x56c>)
 800568a:	61fb      	str	r3, [r7, #28]
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fe fdc5 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8005692:	61f8      	str	r0, [r7, #28]
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569a:	61fb      	str	r3, [r7, #28]
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d077      	beq.n	80057a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005a      	lsls	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	d916      	bls.n	80056fa <UART_SetConfig+0x4a6>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d2:	d212      	bcs.n	80056fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	8afb      	ldrh	r3, [r7, #22]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	8afa      	ldrh	r2, [r7, #22]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e052      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005700:	e04e      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005702:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005706:	2b08      	cmp	r3, #8
 8005708:	d827      	bhi.n	800575a <UART_SetConfig+0x506>
 800570a:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <UART_SetConfig+0x4bc>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575b 	.word	0x0800575b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800575b 	.word	0x0800575b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005753 	.word	0x08005753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe fe0a 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8005738:	61f8      	str	r0, [r7, #28]
        break;
 800573a:	e014      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573c:	f7fe fe1c 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8005740:	61f8      	str	r0, [r7, #28]
        break;
 8005742:	e010      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005744:	4b1e      	ldr	r3, [pc, #120]	@ (80057c0 <UART_SetConfig+0x56c>)
 8005746:	61fb      	str	r3, [r7, #28]
        break;
 8005748:	e00d      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574a:	f7fe fd67 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800574e:	61f8      	str	r0, [r7, #28]
        break;
 8005750:	e009      	b.n	8005766 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005756:	61fb      	str	r3, [r7, #28]
        break;
 8005758:	e005      	b.n	8005766 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005764:	bf00      	nop
    }

    if (pclk != 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d019      	beq.n	80057a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	085a      	lsrs	r2, r3, #1
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	441a      	add	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d909      	bls.n	800579a <UART_SetConfig+0x546>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578c:	d205      	bcs.n	800579a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	e002      	b.n	80057a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	@ 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ba:	bf00      	nop
 80057bc:	40008000 	.word	0x40008000
 80057c0:	00f42400 	.word	0x00f42400

080057c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01a      	beq.n	80058da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c2:	d10a      	bne.n	80058da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b098      	sub	sp, #96	@ 0x60
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005918:	f7fb fb66 	bl	8000fe8 <HAL_GetTick>
 800591c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d12e      	bne.n	800598a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f88c 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d021      	beq.n	800598a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800595a:	653b      	str	r3, [r7, #80]	@ 0x50
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800596a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e062      	b.n	8005a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d149      	bne.n	8005a2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f856 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03c      	beq.n	8005a2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	623b      	str	r3, [r7, #32]
   return(result);
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	69b9      	ldr	r1, [r7, #24]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	617b      	str	r3, [r7, #20]
   return(result);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e011      	b.n	8005a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3758      	adds	r7, #88	@ 0x58
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	e04f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a70:	d04b      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fb fab9 	bl	8000fe8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e04e      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d037      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b80      	cmp	r3, #128	@ 0x80
 8005a9e:	d034      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	d031      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d110      	bne.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f838 	bl	8005b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e029      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae4:	d111      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f81e 	bl	8005b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00f      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4013      	ands	r3, r2
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d0a0      	beq.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b095      	sub	sp, #84	@ 0x54
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d118      	bne.n	8005bda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0310 	bic.w	r3, r3, #16
 8005bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	@ 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <arm_rfft_32_fast_init_f32>:
 8005bfc:	b178      	cbz	r0, 8005c1e <arm_rfft_32_fast_init_f32+0x22>
 8005bfe:	b430      	push	{r4, r5}
 8005c00:	4908      	ldr	r1, [pc, #32]	@ (8005c24 <arm_rfft_32_fast_init_f32+0x28>)
 8005c02:	4a09      	ldr	r2, [pc, #36]	@ (8005c28 <arm_rfft_32_fast_init_f32+0x2c>)
 8005c04:	2310      	movs	r3, #16
 8005c06:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005c0a:	8003      	strh	r3, [r0, #0]
 8005c0c:	2520      	movs	r5, #32
 8005c0e:	2414      	movs	r4, #20
 8005c10:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <arm_rfft_32_fast_init_f32+0x30>)
 8005c12:	8205      	strh	r5, [r0, #16]
 8005c14:	8184      	strh	r4, [r0, #12]
 8005c16:	6143      	str	r3, [r0, #20]
 8005c18:	bc30      	pop	{r4, r5}
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	4770      	bx	lr
 8005c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c22:	4770      	bx	lr
 8005c24:	08008024 	.word	0x08008024
 8005c28:	0800d160 	.word	0x0800d160
 8005c2c:	08015ee0 	.word	0x08015ee0

08005c30 <arm_rfft_64_fast_init_f32>:
 8005c30:	b178      	cbz	r0, 8005c52 <arm_rfft_64_fast_init_f32+0x22>
 8005c32:	b430      	push	{r4, r5}
 8005c34:	4908      	ldr	r1, [pc, #32]	@ (8005c58 <arm_rfft_64_fast_init_f32+0x28>)
 8005c36:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <arm_rfft_64_fast_init_f32+0x2c>)
 8005c38:	2320      	movs	r3, #32
 8005c3a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005c3e:	8003      	strh	r3, [r0, #0]
 8005c40:	2540      	movs	r5, #64	@ 0x40
 8005c42:	2430      	movs	r4, #48	@ 0x30
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <arm_rfft_64_fast_init_f32+0x30>)
 8005c46:	8205      	strh	r5, [r0, #16]
 8005c48:	8184      	strh	r4, [r0, #12]
 8005c4a:	6143      	str	r3, [r0, #20]
 8005c4c:	bc30      	pop	{r4, r5}
 8005c4e:	2000      	movs	r0, #0
 8005c50:	4770      	bx	lr
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c56:	4770      	bx	lr
 8005c58:	0800a17c 	.word	0x0800a17c
 8005c5c:	080119e0 	.word	0x080119e0
 8005c60:	0801a760 	.word	0x0801a760

08005c64 <arm_rfft_256_fast_init_f32>:
 8005c64:	b180      	cbz	r0, 8005c88 <arm_rfft_256_fast_init_f32+0x24>
 8005c66:	b430      	push	{r4, r5}
 8005c68:	4909      	ldr	r1, [pc, #36]	@ (8005c90 <arm_rfft_256_fast_init_f32+0x2c>)
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c94 <arm_rfft_256_fast_init_f32+0x30>)
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005c72:	8003      	strh	r3, [r0, #0]
 8005c74:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8005c78:	24d0      	movs	r4, #208	@ 0xd0
 8005c7a:	4b07      	ldr	r3, [pc, #28]	@ (8005c98 <arm_rfft_256_fast_init_f32+0x34>)
 8005c7c:	8205      	strh	r5, [r0, #16]
 8005c7e:	8184      	strh	r4, [r0, #12]
 8005c80:	6143      	str	r3, [r0, #20]
 8005c82:	bc30      	pop	{r4, r5}
 8005c84:	2000      	movs	r0, #0
 8005c86:	4770      	bx	lr
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	08007e84 	.word	0x08007e84
 8005c94:	0800cd60 	.word	0x0800cd60
 8005c98:	08015ae0 	.word	0x08015ae0

08005c9c <arm_rfft_512_fast_init_f32>:
 8005c9c:	b190      	cbz	r0, 8005cc4 <arm_rfft_512_fast_init_f32+0x28>
 8005c9e:	b430      	push	{r4, r5}
 8005ca0:	490a      	ldr	r1, [pc, #40]	@ (8005ccc <arm_rfft_512_fast_init_f32+0x30>)
 8005ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd0 <arm_rfft_512_fast_init_f32+0x34>)
 8005ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ca8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005cac:	8003      	strh	r3, [r0, #0]
 8005cae:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8005cb2:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8005cb6:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <arm_rfft_512_fast_init_f32+0x38>)
 8005cb8:	8205      	strh	r5, [r0, #16]
 8005cba:	8184      	strh	r4, [r0, #12]
 8005cbc:	6143      	str	r3, [r0, #20]
 8005cbe:	bc30      	pop	{r4, r5}
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4770      	bx	lr
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	08009e0c 	.word	0x08009e0c
 8005cd0:	080111e0 	.word	0x080111e0
 8005cd4:	08019f60 	.word	0x08019f60

08005cd8 <arm_rfft_1024_fast_init_f32>:
 8005cd8:	b190      	cbz	r0, 8005d00 <arm_rfft_1024_fast_init_f32+0x28>
 8005cda:	b430      	push	{r4, r5}
 8005cdc:	490a      	ldr	r1, [pc, #40]	@ (8005d08 <arm_rfft_1024_fast_init_f32+0x30>)
 8005cde:	4a0b      	ldr	r2, [pc, #44]	@ (8005d0c <arm_rfft_1024_fast_init_f32+0x34>)
 8005ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ce4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005ce8:	8003      	strh	r3, [r0, #0]
 8005cea:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8005cee:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <arm_rfft_1024_fast_init_f32+0x38>)
 8005cf4:	8205      	strh	r5, [r0, #16]
 8005cf6:	8184      	strh	r4, [r0, #12]
 8005cf8:	6143      	str	r3, [r0, #20]
 8005cfa:	bc30      	pop	{r4, r5}
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	4770      	bx	lr
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	0800a1dc 	.word	0x0800a1dc
 8005d0c:	08011ae0 	.word	0x08011ae0
 8005d10:	08012ae0 	.word	0x08012ae0

08005d14 <arm_rfft_2048_fast_init_f32>:
 8005d14:	b190      	cbz	r0, 8005d3c <arm_rfft_2048_fast_init_f32+0x28>
 8005d16:	b430      	push	{r4, r5}
 8005d18:	490a      	ldr	r1, [pc, #40]	@ (8005d44 <arm_rfft_2048_fast_init_f32+0x30>)
 8005d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8005d48 <arm_rfft_2048_fast_init_f32+0x34>)
 8005d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d20:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005d24:	8003      	strh	r3, [r0, #0]
 8005d26:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8005d2a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8005d2e:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <arm_rfft_2048_fast_init_f32+0x38>)
 8005d30:	8205      	strh	r5, [r0, #16]
 8005d32:	8184      	strh	r4, [r0, #12]
 8005d34:	6143      	str	r3, [r0, #20]
 8005d36:	bc30      	pop	{r4, r5}
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	08007074 	.word	0x08007074
 8005d48:	0800ad60 	.word	0x0800ad60
 8005d4c:	08013ae0 	.word	0x08013ae0

08005d50 <arm_rfft_4096_fast_init_f32>:
 8005d50:	b190      	cbz	r0, 8005d78 <arm_rfft_4096_fast_init_f32+0x28>
 8005d52:	b430      	push	{r4, r5}
 8005d54:	490a      	ldr	r1, [pc, #40]	@ (8005d80 <arm_rfft_4096_fast_init_f32+0x30>)
 8005d56:	4a0b      	ldr	r2, [pc, #44]	@ (8005d84 <arm_rfft_4096_fast_init_f32+0x34>)
 8005d58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d5c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005d60:	8003      	strh	r3, [r0, #0]
 8005d62:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005d66:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005d6a:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <arm_rfft_4096_fast_init_f32+0x38>)
 8005d6c:	8205      	strh	r5, [r0, #16]
 8005d6e:	8184      	strh	r4, [r0, #12]
 8005d70:	6143      	str	r3, [r0, #20]
 8005d72:	bc30      	pop	{r4, r5}
 8005d74:	2000      	movs	r0, #0
 8005d76:	4770      	bx	lr
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	0800804c 	.word	0x0800804c
 8005d84:	0800d1e0 	.word	0x0800d1e0
 8005d88:	08015f60 	.word	0x08015f60

08005d8c <arm_rfft_fast_init_f32>:
 8005d8c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005d90:	d01f      	beq.n	8005dd2 <arm_rfft_fast_init_f32+0x46>
 8005d92:	d90b      	bls.n	8005dac <arm_rfft_fast_init_f32+0x20>
 8005d94:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005d98:	d019      	beq.n	8005dce <arm_rfft_fast_init_f32+0x42>
 8005d9a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8005d9e:	d012      	beq.n	8005dc6 <arm_rfft_fast_init_f32+0x3a>
 8005da0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005da4:	d00d      	beq.n	8005dc2 <arm_rfft_fast_init_f32+0x36>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005daa:	4770      	bx	lr
 8005dac:	2940      	cmp	r1, #64	@ 0x40
 8005dae:	d00c      	beq.n	8005dca <arm_rfft_fast_init_f32+0x3e>
 8005db0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005db4:	d003      	beq.n	8005dbe <arm_rfft_fast_init_f32+0x32>
 8005db6:	2920      	cmp	r1, #32
 8005db8:	d1f5      	bne.n	8005da6 <arm_rfft_fast_init_f32+0x1a>
 8005dba:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <arm_rfft_fast_init_f32+0x4c>)
 8005dbc:	4718      	bx	r3
 8005dbe:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <arm_rfft_fast_init_f32+0x50>)
 8005dc0:	4718      	bx	r3
 8005dc2:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <arm_rfft_fast_init_f32+0x54>)
 8005dc4:	4718      	bx	r3
 8005dc6:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <arm_rfft_fast_init_f32+0x58>)
 8005dc8:	4718      	bx	r3
 8005dca:	4b07      	ldr	r3, [pc, #28]	@ (8005de8 <arm_rfft_fast_init_f32+0x5c>)
 8005dcc:	e7f6      	b.n	8005dbc <arm_rfft_fast_init_f32+0x30>
 8005dce:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <arm_rfft_fast_init_f32+0x60>)
 8005dd0:	e7f4      	b.n	8005dbc <arm_rfft_fast_init_f32+0x30>
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <arm_rfft_fast_init_f32+0x64>)
 8005dd4:	e7f2      	b.n	8005dbc <arm_rfft_fast_init_f32+0x30>
 8005dd6:	bf00      	nop
 8005dd8:	08005bfd 	.word	0x08005bfd
 8005ddc:	08005c65 	.word	0x08005c65
 8005de0:	08005cd9 	.word	0x08005cd9
 8005de4:	08005d51 	.word	0x08005d51
 8005de8:	08005c31 	.word	0x08005c31
 8005dec:	08005d15 	.word	0x08005d15
 8005df0:	08005c9d 	.word	0x08005c9d

08005df4 <stage_rfft_f32>:
 8005df4:	b410      	push	{r4}
 8005df6:	edd1 7a00 	vldr	s15, [r1]
 8005dfa:	ed91 7a01 	vldr	s14, [r1, #4]
 8005dfe:	8804      	ldrh	r4, [r0, #0]
 8005e00:	6940      	ldr	r0, [r0, #20]
 8005e02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005e06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e0a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005e0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e16:	3c01      	subs	r4, #1
 8005e18:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005e1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005e20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8005e24:	ed82 7a00 	vstr	s14, [r2]
 8005e28:	edc2 7a01 	vstr	s15, [r2, #4]
 8005e2c:	3010      	adds	r0, #16
 8005e2e:	3210      	adds	r2, #16
 8005e30:	3b08      	subs	r3, #8
 8005e32:	3110      	adds	r1, #16
 8005e34:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005e38:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005e40:	edd3 4a03 	vldr	s9, [r3, #12]
 8005e44:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005e48:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005e4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005e50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005e54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005e58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005e5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005e60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005e64:	ee37 7a23 	vadd.f32	s14, s14, s7
 8005e68:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005e6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005e70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005e74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005e80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005e84:	3c01      	subs	r4, #1
 8005e86:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005e8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005e8e:	f1a3 0308 	sub.w	r3, r3, #8
 8005e92:	f101 0108 	add.w	r1, r1, #8
 8005e96:	f100 0008 	add.w	r0, r0, #8
 8005e9a:	f102 0208 	add.w	r2, r2, #8
 8005e9e:	d1c9      	bne.n	8005e34 <stage_rfft_f32+0x40>
 8005ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop

08005ea8 <merge_rfft_f32>:
 8005ea8:	b410      	push	{r4}
 8005eaa:	edd1 7a00 	vldr	s15, [r1]
 8005eae:	edd1 6a01 	vldr	s13, [r1, #4]
 8005eb2:	8804      	ldrh	r4, [r0, #0]
 8005eb4:	6940      	ldr	r0, [r0, #20]
 8005eb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005eba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ebe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8005ec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005ec6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005eca:	3c01      	subs	r4, #1
 8005ecc:	ed82 7a00 	vstr	s14, [r2]
 8005ed0:	edc2 7a01 	vstr	s15, [r2, #4]
 8005ed4:	b3dc      	cbz	r4, 8005f4e <merge_rfft_f32+0xa6>
 8005ed6:	00e3      	lsls	r3, r4, #3
 8005ed8:	3b08      	subs	r3, #8
 8005eda:	440b      	add	r3, r1
 8005edc:	3010      	adds	r0, #16
 8005ede:	3210      	adds	r2, #16
 8005ee0:	3110      	adds	r1, #16
 8005ee2:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005ee6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005eea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005eee:	edd3 4a03 	vldr	s9, [r3, #12]
 8005ef2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005ef6:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005efa:	ee75 5a47 	vsub.f32	s11, s10, s14
 8005efe:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005f02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005f06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005f0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005f0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005f12:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005f16:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005f1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005f1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005f22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005f26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005f2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005f32:	3c01      	subs	r4, #1
 8005f34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005f38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005f3c:	f1a3 0308 	sub.w	r3, r3, #8
 8005f40:	f101 0108 	add.w	r1, r1, #8
 8005f44:	f100 0008 	add.w	r0, r0, #8
 8005f48:	f102 0208 	add.w	r2, r2, #8
 8005f4c:	d1c9      	bne.n	8005ee2 <merge_rfft_f32+0x3a>
 8005f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <arm_rfft_fast_f32>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	8a05      	ldrh	r5, [r0, #16]
 8005f5a:	086d      	lsrs	r5, r5, #1
 8005f5c:	8005      	strh	r5, [r0, #0]
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4616      	mov	r6, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	b14b      	cbz	r3, 8005f7a <arm_rfft_fast_f32+0x26>
 8005f66:	f7ff ff9f 	bl	8005ea8 <merge_rfft_f32>
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4620      	mov	r0, r4
 8005f70:	2301      	movs	r3, #1
 8005f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f76:	f000 bb33 	b.w	80065e0 <arm_cfft_f32>
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f000 fb2e 	bl	80065e0 <arm_cfft_f32>
 8005f84:	4632      	mov	r2, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	4620      	mov	r0, r4
 8005f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	f7ff bf31 	b.w	8005df4 <stage_rfft_f32>
 8005f92:	bf00      	nop

08005f94 <arm_cfft_radix8by2_f32>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	ed2d 8b08 	vpush	{d8-d11}
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	f8b7 c000 	ldrh.w	ip, [r7]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8005faa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8005fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005fb2:	f000 80b0 	beq.w	8006116 <arm_cfft_radix8by2_f32+0x182>
 8005fb6:	008c      	lsls	r4, r1, #2
 8005fb8:	3410      	adds	r4, #16
 8005fba:	f100 0310 	add.w	r3, r0, #16
 8005fbe:	1906      	adds	r6, r0, r4
 8005fc0:	3210      	adds	r2, #16
 8005fc2:	4444      	add	r4, r8
 8005fc4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005fc8:	f108 0510 	add.w	r5, r8, #16
 8005fcc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005fd0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005fd4:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005fd8:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005fdc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005fe0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005fe4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005fe8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8005fec:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005ff0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005ff4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005ff8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005ffc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006000:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006004:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006008:	ed56 1a01 	vldr	s3, [r6, #-4]
 800600c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006010:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006014:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006018:	ee33 9a04 	vadd.f32	s18, s6, s8
 800601c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006020:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006024:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006028:	ee71 8a06 	vadd.f32	s17, s2, s12
 800602c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006030:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006034:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006038:	ed03 aa01 	vstr	s20, [r3, #-4]
 800603c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006040:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006044:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006048:	ed46 8a02 	vstr	s17, [r6, #-8]
 800604c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006050:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006054:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006058:	ed52 6a03 	vldr	s13, [r2, #-12]
 800605c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006060:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006064:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006068:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800606c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006070:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006074:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006078:	ee27 7a03 	vmul.f32	s14, s14, s6
 800607c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006080:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006084:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006088:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800608c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006090:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006094:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006098:	ed05 3a04 	vstr	s6, [r5, #-16]
 800609c:	ed04 4a04 	vstr	s8, [r4, #-16]
 80060a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80060a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80060a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80060ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 80060b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80060b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80060b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80060bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80060c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 80060c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 80060c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80060cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80060d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80060d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80060d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80060dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80060e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80060e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80060e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80060ec:	3310      	adds	r3, #16
 80060ee:	4563      	cmp	r3, ip
 80060f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80060f4:	f106 0610 	add.w	r6, r6, #16
 80060f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80060fc:	f102 0210 	add.w	r2, r2, #16
 8006100:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006104:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006108:	f105 0510 	add.w	r5, r5, #16
 800610c:	f104 0410 	add.w	r4, r4, #16
 8006110:	f47f af5c 	bne.w	8005fcc <arm_cfft_radix8by2_f32+0x38>
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	b28c      	uxth	r4, r1
 8006118:	4621      	mov	r1, r4
 800611a:	2302      	movs	r3, #2
 800611c:	f000 fc66 	bl	80069ec <arm_radix8_butterfly_f32>
 8006120:	ecbd 8b08 	vpop	{d8-d11}
 8006124:	4621      	mov	r1, r4
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4640      	mov	r0, r8
 800612a:	2302      	movs	r3, #2
 800612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	f000 bc5c 	b.w	80069ec <arm_radix8_butterfly_f32>

08006134 <arm_cfft_radix8by4_f32>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	ed2d 8b0a 	vpush	{d8-d12}
 800613c:	b08d      	sub	sp, #52	@ 0x34
 800613e:	460d      	mov	r5, r1
 8006140:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006142:	8801      	ldrh	r1, [r0, #0]
 8006144:	6842      	ldr	r2, [r0, #4]
 8006146:	900a      	str	r0, [sp, #40]	@ 0x28
 8006148:	0849      	lsrs	r1, r1, #1
 800614a:	008b      	lsls	r3, r1, #2
 800614c:	18ee      	adds	r6, r5, r3
 800614e:	18f0      	adds	r0, r6, r3
 8006150:	edd0 5a00 	vldr	s11, [r0]
 8006154:	edd5 7a00 	vldr	s15, [r5]
 8006158:	ed96 7a00 	vldr	s14, [r6]
 800615c:	edd0 3a01 	vldr	s7, [r0, #4]
 8006160:	ed96 4a01 	vldr	s8, [r6, #4]
 8006164:	ed95 5a01 	vldr	s10, [r5, #4]
 8006168:	9008      	str	r0, [sp, #32]
 800616a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800616e:	18c7      	adds	r7, r0, r3
 8006170:	edd7 4a00 	vldr	s9, [r7]
 8006174:	ed97 3a01 	vldr	s6, [r7, #4]
 8006178:	9701      	str	r7, [sp, #4]
 800617a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800617e:	462c      	mov	r4, r5
 8006180:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006184:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006188:	ee16 ca90 	vmov	ip, s13
 800618c:	f844 cb08 	str.w	ip, [r4], #8
 8006190:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006194:	edd6 5a01 	vldr	s11, [r6, #4]
 8006198:	edd7 2a01 	vldr	s5, [r7, #4]
 800619c:	9404      	str	r4, [sp, #16]
 800619e:	ee35 5a63 	vsub.f32	s10, s10, s7
 80061a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 80061a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80061aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80061ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80061b2:	0849      	lsrs	r1, r1, #1
 80061b4:	f102 0e08 	add.w	lr, r2, #8
 80061b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80061bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80061c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80061c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 80061c6:	f1a1 0902 	sub.w	r9, r1, #2
 80061ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80061ce:	4631      	mov	r1, r6
 80061d0:	ee13 ea90 	vmov	lr, s7
 80061d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80061d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80061dc:	4604      	mov	r4, r0
 80061de:	edc5 5a01 	vstr	s11, [r5, #4]
 80061e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80061e6:	f841 eb08 	str.w	lr, [r1], #8
 80061ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 80061ee:	ee16 ea10 	vmov	lr, s12
 80061f2:	ed86 5a01 	vstr	s10, [r6, #4]
 80061f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80061fa:	f844 eb08 	str.w	lr, [r4], #8
 80061fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006202:	edc0 6a01 	vstr	s13, [r0, #4]
 8006206:	9405      	str	r4, [sp, #20]
 8006208:	4604      	mov	r4, r0
 800620a:	ee17 0a90 	vmov	r0, s15
 800620e:	9106      	str	r1, [sp, #24]
 8006210:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006214:	f102 0110 	add.w	r1, r2, #16
 8006218:	46bc      	mov	ip, r7
 800621a:	9100      	str	r1, [sp, #0]
 800621c:	f847 0b08 	str.w	r0, [r7], #8
 8006220:	f102 0118 	add.w	r1, r2, #24
 8006224:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006228:	9102      	str	r1, [sp, #8]
 800622a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800622e:	9007      	str	r0, [sp, #28]
 8006230:	f000 8134 	beq.w	800649c <arm_cfft_radix8by4_f32+0x368>
 8006234:	f102 0920 	add.w	r9, r2, #32
 8006238:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	f8dd a000 	ldr.w	sl, [sp]
 8006242:	3b0c      	subs	r3, #12
 8006244:	4683      	mov	fp, r0
 8006246:	4463      	add	r3, ip
 8006248:	f105 0e10 	add.w	lr, r5, #16
 800624c:	f1a4 010c 	sub.w	r1, r4, #12
 8006250:	f104 0510 	add.w	r5, r4, #16
 8006254:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006258:	f1a2 040c 	sub.w	r4, r2, #12
 800625c:	f106 0010 	add.w	r0, r6, #16
 8006260:	3210      	adds	r2, #16
 8006262:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006266:	ed55 5a02 	vldr	s11, [r5, #-8]
 800626a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800626e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006272:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006276:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800627a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800627e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006282:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006286:	ee30 6a26 	vadd.f32	s12, s0, s13
 800628a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800628e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006292:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006296:	ee75 5a65 	vsub.f32	s11, s10, s11
 800629a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800629e:	ed10 7a01 	vldr	s14, [r0, #-4]
 80062a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 80062a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80062aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 80062ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80062b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 80062b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80062ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80062be:	ed9c 2a02 	vldr	s4, [ip, #8]
 80062c2:	ed91 ba02 	vldr	s22, [r1, #8]
 80062c6:	edd3 9a02 	vldr	s19, [r3, #8]
 80062ca:	edd4 2a01 	vldr	s5, [r4, #4]
 80062ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 80062d2:	ed93 5a01 	vldr	s10, [r3, #4]
 80062d6:	edd1 0a01 	vldr	s1, [r1, #4]
 80062da:	ee72 6a07 	vadd.f32	s13, s4, s14
 80062de:	ee32 2a47 	vsub.f32	s4, s4, s14
 80062e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80062e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80062ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80062ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 80062f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80062f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80062fa:	edd3 8a01 	vldr	s17, [r3, #4]
 80062fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006302:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006306:	ee37 7a28 	vadd.f32	s14, s14, s17
 800630a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800630e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006312:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006316:	ed1a aa02 	vldr	s20, [sl, #-8]
 800631a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800631e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006322:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006326:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800632a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800632e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006332:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006336:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800633a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800633e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006342:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006346:	ee68 8a87 	vmul.f32	s17, s17, s14
 800634a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800634e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006352:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006356:	ee3b aaca 	vsub.f32	s20, s23, s20
 800635a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800635e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006362:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006366:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800636a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800636e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006372:	edc1 8a01 	vstr	s17, [r1, #4]
 8006376:	ed81 aa02 	vstr	s20, [r1, #8]
 800637a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800637e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006382:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006386:	ed59 6a03 	vldr	s13, [r9, #-12]
 800638a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800638e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006392:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006396:	ee66 9a26 	vmul.f32	s19, s12, s13
 800639a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800639e:	ee26 6a23 	vmul.f32	s12, s12, s7
 80063a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80063a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80063ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80063b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80063b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80063ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80063be:	ee79 3a29 	vadd.f32	s7, s18, s19
 80063c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80063c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80063ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80063ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 80063d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80063d6:	ed84 7a01 	vstr	s14, [r4, #4]
 80063da:	ed84 4a02 	vstr	s8, [r4, #8]
 80063de:	ee35 6a81 	vadd.f32	s12, s11, s2
 80063e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80063e6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80063ea:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80063ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80063f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80063f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80063fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80063fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006402:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006406:	ee26 6a26 	vmul.f32	s12, s12, s13
 800640a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800640e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006412:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006416:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800641a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800641e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006422:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006426:	f1bb 0b01 	subs.w	fp, fp, #1
 800642a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800642e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006432:	f10e 0e08 	add.w	lr, lr, #8
 8006436:	ed83 3a02 	vstr	s6, [r3, #8]
 800643a:	ed83 7a01 	vstr	s14, [r3, #4]
 800643e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006442:	f10a 0a08 	add.w	sl, sl, #8
 8006446:	f100 0008 	add.w	r0, r0, #8
 800644a:	f1a1 0108 	sub.w	r1, r1, #8
 800644e:	f109 0910 	add.w	r9, r9, #16
 8006452:	f105 0508 	add.w	r5, r5, #8
 8006456:	f1a4 0408 	sub.w	r4, r4, #8
 800645a:	f108 0818 	add.w	r8, r8, #24
 800645e:	f102 0208 	add.w	r2, r2, #8
 8006462:	f1a3 0308 	sub.w	r3, r3, #8
 8006466:	f47f aefc 	bne.w	8006262 <arm_cfft_radix8by4_f32+0x12e>
 800646a:	9907      	ldr	r1, [sp, #28]
 800646c:	9800      	ldr	r0, [sp, #0]
 800646e:	00cb      	lsls	r3, r1, #3
 8006470:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006474:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006478:	9100      	str	r1, [sp, #0]
 800647a:	9904      	ldr	r1, [sp, #16]
 800647c:	4419      	add	r1, r3
 800647e:	9104      	str	r1, [sp, #16]
 8006480:	9903      	ldr	r1, [sp, #12]
 8006482:	4419      	add	r1, r3
 8006484:	9103      	str	r1, [sp, #12]
 8006486:	9906      	ldr	r1, [sp, #24]
 8006488:	4419      	add	r1, r3
 800648a:	9106      	str	r1, [sp, #24]
 800648c:	9905      	ldr	r1, [sp, #20]
 800648e:	441f      	add	r7, r3
 8006490:	4419      	add	r1, r3
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	9105      	str	r1, [sp, #20]
 8006496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800649a:	9302      	str	r3, [sp, #8]
 800649c:	9904      	ldr	r1, [sp, #16]
 800649e:	9805      	ldr	r0, [sp, #20]
 80064a0:	ed91 4a00 	vldr	s8, [r1]
 80064a4:	edd0 6a00 	vldr	s13, [r0]
 80064a8:	9b06      	ldr	r3, [sp, #24]
 80064aa:	ed97 3a00 	vldr	s6, [r7]
 80064ae:	edd3 7a00 	vldr	s15, [r3]
 80064b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80064b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80064ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80064be:	ed93 7a01 	vldr	s14, [r3, #4]
 80064c2:	9a03      	ldr	r2, [sp, #12]
 80064c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80064c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80064cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80064d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80064d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80064d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80064dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80064e0:	ed81 5a00 	vstr	s10, [r1]
 80064e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80064e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80064ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80064f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80064f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80064f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80064fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8006500:	edd2 1a00 	vldr	s3, [r2]
 8006504:	edd2 2a01 	vldr	s5, [r2, #4]
 8006508:	ee34 5a83 	vadd.f32	s10, s9, s6
 800650c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006510:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006514:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006518:	ee24 4a22 	vmul.f32	s8, s8, s5
 800651c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006520:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006524:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006528:	ee35 5a44 	vsub.f32	s10, s10, s8
 800652c:	edc3 2a00 	vstr	s5, [r3]
 8006530:	ed83 5a01 	vstr	s10, [r3, #4]
 8006534:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800653e:	ed93 4a01 	vldr	s8, [r3, #4]
 8006542:	ed93 5a00 	vldr	s10, [r3]
 8006546:	9b02      	ldr	r3, [sp, #8]
 8006548:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800654c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006550:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006554:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006558:	ee65 5a84 	vmul.f32	s11, s11, s8
 800655c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006560:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006564:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006568:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800656c:	ed80 6a01 	vstr	s12, [r0, #4]
 8006570:	edc0 5a00 	vstr	s11, [r0]
 8006574:	edd3 5a01 	vldr	s11, [r3, #4]
 8006578:	edd3 6a00 	vldr	s13, [r3]
 800657c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006580:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006584:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006588:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800658c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006590:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006594:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006598:	ee76 7a27 	vadd.f32	s15, s12, s15
 800659c:	ed87 7a01 	vstr	s14, [r7, #4]
 80065a0:	edc7 7a00 	vstr	s15, [r7]
 80065a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80065a8:	4621      	mov	r1, r4
 80065aa:	686a      	ldr	r2, [r5, #4]
 80065ac:	2304      	movs	r3, #4
 80065ae:	f000 fa1d 	bl	80069ec <arm_radix8_butterfly_f32>
 80065b2:	4630      	mov	r0, r6
 80065b4:	4621      	mov	r1, r4
 80065b6:	686a      	ldr	r2, [r5, #4]
 80065b8:	2304      	movs	r3, #4
 80065ba:	f000 fa17 	bl	80069ec <arm_radix8_butterfly_f32>
 80065be:	9808      	ldr	r0, [sp, #32]
 80065c0:	686a      	ldr	r2, [r5, #4]
 80065c2:	4621      	mov	r1, r4
 80065c4:	2304      	movs	r3, #4
 80065c6:	f000 fa11 	bl	80069ec <arm_radix8_butterfly_f32>
 80065ca:	686a      	ldr	r2, [r5, #4]
 80065cc:	9801      	ldr	r0, [sp, #4]
 80065ce:	4621      	mov	r1, r4
 80065d0:	2304      	movs	r3, #4
 80065d2:	b00d      	add	sp, #52	@ 0x34
 80065d4:	ecbd 8b0a 	vpop	{d8-d12}
 80065d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	f000 ba06 	b.w	80069ec <arm_radix8_butterfly_f32>

080065e0 <arm_cfft_f32>:
 80065e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	2a01      	cmp	r2, #1
 80065e6:	4606      	mov	r6, r0
 80065e8:	4617      	mov	r7, r2
 80065ea:	460c      	mov	r4, r1
 80065ec:	4698      	mov	r8, r3
 80065ee:	8805      	ldrh	r5, [r0, #0]
 80065f0:	d056      	beq.n	80066a0 <arm_cfft_f32+0xc0>
 80065f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80065f6:	d063      	beq.n	80066c0 <arm_cfft_f32+0xe0>
 80065f8:	d916      	bls.n	8006628 <arm_cfft_f32+0x48>
 80065fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80065fe:	d01a      	beq.n	8006636 <arm_cfft_f32+0x56>
 8006600:	d947      	bls.n	8006692 <arm_cfft_f32+0xb2>
 8006602:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006606:	d05b      	beq.n	80066c0 <arm_cfft_f32+0xe0>
 8006608:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800660c:	d105      	bne.n	800661a <arm_cfft_f32+0x3a>
 800660e:	2301      	movs	r3, #1
 8006610:	6872      	ldr	r2, [r6, #4]
 8006612:	4629      	mov	r1, r5
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f9e9 	bl	80069ec <arm_radix8_butterfly_f32>
 800661a:	f1b8 0f00 	cmp.w	r8, #0
 800661e:	d111      	bne.n	8006644 <arm_cfft_f32+0x64>
 8006620:	2f01      	cmp	r7, #1
 8006622:	d016      	beq.n	8006652 <arm_cfft_f32+0x72>
 8006624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006628:	2d20      	cmp	r5, #32
 800662a:	d049      	beq.n	80066c0 <arm_cfft_f32+0xe0>
 800662c:	d935      	bls.n	800669a <arm_cfft_f32+0xba>
 800662e:	2d40      	cmp	r5, #64	@ 0x40
 8006630:	d0ed      	beq.n	800660e <arm_cfft_f32+0x2e>
 8006632:	2d80      	cmp	r5, #128	@ 0x80
 8006634:	d1f1      	bne.n	800661a <arm_cfft_f32+0x3a>
 8006636:	4621      	mov	r1, r4
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff fcab 	bl	8005f94 <arm_cfft_radix8by2_f32>
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	d0ed      	beq.n	8006620 <arm_cfft_f32+0x40>
 8006644:	68b2      	ldr	r2, [r6, #8]
 8006646:	89b1      	ldrh	r1, [r6, #12]
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f841 	bl	80066d0 <arm_bitreversal_32>
 800664e:	2f01      	cmp	r7, #1
 8006650:	d1e8      	bne.n	8006624 <arm_cfft_f32+0x44>
 8006652:	ee07 5a90 	vmov	s15, r5
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800665e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006662:	2d00      	cmp	r5, #0
 8006664:	d0de      	beq.n	8006624 <arm_cfft_f32+0x44>
 8006666:	f104 0108 	add.w	r1, r4, #8
 800666a:	2300      	movs	r3, #0
 800666c:	3301      	adds	r3, #1
 800666e:	429d      	cmp	r5, r3
 8006670:	f101 0108 	add.w	r1, r1, #8
 8006674:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006678:	ed51 7a03 	vldr	s15, [r1, #-12]
 800667c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006680:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006684:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006688:	ed41 7a03 	vstr	s15, [r1, #-12]
 800668c:	d1ee      	bne.n	800666c <arm_cfft_f32+0x8c>
 800668e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006692:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006696:	d0ba      	beq.n	800660e <arm_cfft_f32+0x2e>
 8006698:	e7bf      	b.n	800661a <arm_cfft_f32+0x3a>
 800669a:	2d10      	cmp	r5, #16
 800669c:	d0cb      	beq.n	8006636 <arm_cfft_f32+0x56>
 800669e:	e7bc      	b.n	800661a <arm_cfft_f32+0x3a>
 80066a0:	b19d      	cbz	r5, 80066ca <arm_cfft_f32+0xea>
 80066a2:	f101 030c 	add.w	r3, r1, #12
 80066a6:	2200      	movs	r2, #0
 80066a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80066ac:	3201      	adds	r2, #1
 80066ae:	eef1 7a67 	vneg.f32	s15, s15
 80066b2:	4295      	cmp	r5, r2
 80066b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80066b8:	f103 0308 	add.w	r3, r3, #8
 80066bc:	d1f4      	bne.n	80066a8 <arm_cfft_f32+0xc8>
 80066be:	e798      	b.n	80065f2 <arm_cfft_f32+0x12>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7ff fd36 	bl	8006134 <arm_cfft_radix8by4_f32>
 80066c8:	e7a7      	b.n	800661a <arm_cfft_f32+0x3a>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0aa      	beq.n	8006624 <arm_cfft_f32+0x44>
 80066ce:	e7b9      	b.n	8006644 <arm_cfft_f32+0x64>

080066d0 <arm_bitreversal_32>:
 80066d0:	b1e9      	cbz	r1, 800670e <arm_bitreversal_32+0x3e>
 80066d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d4:	2500      	movs	r5, #0
 80066d6:	f102 0e02 	add.w	lr, r2, #2
 80066da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80066de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80066e2:	08a4      	lsrs	r4, r4, #2
 80066e4:	089b      	lsrs	r3, r3, #2
 80066e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80066ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80066ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80066f2:	00a6      	lsls	r6, r4, #2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80066fa:	3304      	adds	r3, #4
 80066fc:	1d34      	adds	r4, r6, #4
 80066fe:	3502      	adds	r5, #2
 8006700:	58c6      	ldr	r6, [r0, r3]
 8006702:	5907      	ldr	r7, [r0, r4]
 8006704:	50c7      	str	r7, [r0, r3]
 8006706:	428d      	cmp	r5, r1
 8006708:	5106      	str	r6, [r0, r4]
 800670a:	d3e6      	bcc.n	80066da <arm_bitreversal_32+0xa>
 800670c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670e:	4770      	bx	lr

08006710 <arm_cmplx_mag_f32>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	ed2d 8b02 	vpush	{d8}
 8006718:	0897      	lsrs	r7, r2, #2
 800671a:	b084      	sub	sp, #16
 800671c:	d077      	beq.n	800680e <arm_cmplx_mag_f32+0xfe>
 800671e:	f04f 0800 	mov.w	r8, #0
 8006722:	f100 0420 	add.w	r4, r0, #32
 8006726:	f101 0510 	add.w	r5, r1, #16
 800672a:	463e      	mov	r6, r7
 800672c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8006730:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8006734:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006738:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800673c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006740:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	f2c0 80c5 	blt.w	80068d6 <arm_cmplx_mag_f32+0x1c6>
 800674c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006758:	f100 80cb 	bmi.w	80068f2 <arm_cmplx_mag_f32+0x1e2>
 800675c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006760:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8006764:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006768:	ee20 0a00 	vmul.f32	s0, s0, s0
 800676c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006770:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006774:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677c:	f2c0 80a8 	blt.w	80068d0 <arm_cmplx_mag_f32+0x1c0>
 8006780:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006788:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800678c:	f100 80a8 	bmi.w	80068e0 <arm_cmplx_mag_f32+0x1d0>
 8006790:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006794:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006798:	ed54 7a03 	vldr	s15, [r4, #-12]
 800679c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80067a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b0:	f2c0 808b 	blt.w	80068ca <arm_cmplx_mag_f32+0x1ba>
 80067b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80067b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80067c0:	f100 80a9 	bmi.w	8006916 <arm_cmplx_mag_f32+0x206>
 80067c4:	ed05 8a02 	vstr	s16, [r5, #-8]
 80067c8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80067cc:	ed54 7a01 	vldr	s15, [r4, #-4]
 80067d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80067d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e4:	db6e      	blt.n	80068c4 <arm_cmplx_mag_f32+0x1b4>
 80067e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80067ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80067f2:	f100 8087 	bmi.w	8006904 <arm_cmplx_mag_f32+0x1f4>
 80067f6:	ed05 8a01 	vstr	s16, [r5, #-4]
 80067fa:	3e01      	subs	r6, #1
 80067fc:	f104 0420 	add.w	r4, r4, #32
 8006800:	f105 0510 	add.w	r5, r5, #16
 8006804:	d192      	bne.n	800672c <arm_cmplx_mag_f32+0x1c>
 8006806:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800680a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800680e:	f012 0203 	ands.w	r2, r2, #3
 8006812:	d052      	beq.n	80068ba <arm_cmplx_mag_f32+0x1aa>
 8006814:	ed90 0a00 	vldr	s0, [r0]
 8006818:	edd0 7a01 	vldr	s15, [r0, #4]
 800681c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006820:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006824:	2300      	movs	r3, #0
 8006826:	ee37 0a80 	vadd.f32	s0, s15, s0
 800682a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006832:	bfb8      	it	lt
 8006834:	600b      	strlt	r3, [r1, #0]
 8006836:	db08      	blt.n	800684a <arm_cmplx_mag_f32+0x13a>
 8006838:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006844:	d479      	bmi.n	800693a <arm_cmplx_mag_f32+0x22a>
 8006846:	ed81 8a00 	vstr	s16, [r1]
 800684a:	3a01      	subs	r2, #1
 800684c:	d035      	beq.n	80068ba <arm_cmplx_mag_f32+0x1aa>
 800684e:	ed90 0a02 	vldr	s0, [r0, #8]
 8006852:	edd0 7a03 	vldr	s15, [r0, #12]
 8006856:	ee20 0a00 	vmul.f32	s0, s0, s0
 800685a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800685e:	2300      	movs	r3, #0
 8006860:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006864:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686c:	bfb8      	it	lt
 800686e:	604b      	strlt	r3, [r1, #4]
 8006870:	db08      	blt.n	8006884 <arm_cmplx_mag_f32+0x174>
 8006872:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800687e:	d453      	bmi.n	8006928 <arm_cmplx_mag_f32+0x218>
 8006880:	ed81 8a01 	vstr	s16, [r1, #4]
 8006884:	2a01      	cmp	r2, #1
 8006886:	d018      	beq.n	80068ba <arm_cmplx_mag_f32+0x1aa>
 8006888:	ed90 0a04 	vldr	s0, [r0, #16]
 800688c:	edd0 7a05 	vldr	s15, [r0, #20]
 8006890:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006894:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006898:	2300      	movs	r3, #0
 800689a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800689e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80068a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a6:	db19      	blt.n	80068dc <arm_cmplx_mag_f32+0x1cc>
 80068a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80068b4:	d44a      	bmi.n	800694c <arm_cmplx_mag_f32+0x23c>
 80068b6:	ed81 8a02 	vstr	s16, [r1, #8]
 80068ba:	b004      	add	sp, #16
 80068bc:	ecbd 8b02 	vpop	{d8}
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c4:	f845 8c04 	str.w	r8, [r5, #-4]
 80068c8:	e797      	b.n	80067fa <arm_cmplx_mag_f32+0xea>
 80068ca:	f845 8c08 	str.w	r8, [r5, #-8]
 80068ce:	e77b      	b.n	80067c8 <arm_cmplx_mag_f32+0xb8>
 80068d0:	f845 8c0c 	str.w	r8, [r5, #-12]
 80068d4:	e75e      	b.n	8006794 <arm_cmplx_mag_f32+0x84>
 80068d6:	f845 8c10 	str.w	r8, [r5, #-16]
 80068da:	e741      	b.n	8006760 <arm_cmplx_mag_f32+0x50>
 80068dc:	608b      	str	r3, [r1, #8]
 80068de:	e7ec      	b.n	80068ba <arm_cmplx_mag_f32+0x1aa>
 80068e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80068e4:	9001      	str	r0, [sp, #4]
 80068e6:	f000 fb73 	bl	8006fd0 <sqrtf>
 80068ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80068ee:	9801      	ldr	r0, [sp, #4]
 80068f0:	e74e      	b.n	8006790 <arm_cmplx_mag_f32+0x80>
 80068f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80068f6:	9001      	str	r0, [sp, #4]
 80068f8:	f000 fb6a 	bl	8006fd0 <sqrtf>
 80068fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	e72b      	b.n	800675c <arm_cmplx_mag_f32+0x4c>
 8006904:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006908:	9001      	str	r0, [sp, #4]
 800690a:	f000 fb61 	bl	8006fd0 <sqrtf>
 800690e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006912:	9801      	ldr	r0, [sp, #4]
 8006914:	e76f      	b.n	80067f6 <arm_cmplx_mag_f32+0xe6>
 8006916:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800691a:	9001      	str	r0, [sp, #4]
 800691c:	f000 fb58 	bl	8006fd0 <sqrtf>
 8006920:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006924:	9801      	ldr	r0, [sp, #4]
 8006926:	e74d      	b.n	80067c4 <arm_cmplx_mag_f32+0xb4>
 8006928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	f000 fb4f 	bl	8006fd0 <sqrtf>
 8006932:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006936:	9903      	ldr	r1, [sp, #12]
 8006938:	e7a2      	b.n	8006880 <arm_cmplx_mag_f32+0x170>
 800693a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693e:	9201      	str	r2, [sp, #4]
 8006940:	f000 fb46 	bl	8006fd0 <sqrtf>
 8006944:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006948:	9903      	ldr	r1, [sp, #12]
 800694a:	e77c      	b.n	8006846 <arm_cmplx_mag_f32+0x136>
 800694c:	9101      	str	r1, [sp, #4]
 800694e:	f000 fb3f 	bl	8006fd0 <sqrtf>
 8006952:	9901      	ldr	r1, [sp, #4]
 8006954:	e7af      	b.n	80068b6 <arm_cmplx_mag_f32+0x1a6>
 8006956:	bf00      	nop

08006958 <arm_cos_f32>:
 8006958:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80069e0 <arm_cos_f32+0x88>
 800695c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006960:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8006964:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006968:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006974:	d504      	bpl.n	8006980 <arm_cos_f32+0x28>
 8006976:	ee17 3a90 	vmov	r3, s15
 800697a:	3b01      	subs	r3, #1
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006984:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80069e4 <arm_cos_f32+0x8c>
 8006988:	ee30 0a67 	vsub.f32	s0, s0, s15
 800698c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006990:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006994:	ee17 3a90 	vmov	r3, s15
 8006998:	b29b      	uxth	r3, r3
 800699a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699e:	d21a      	bcs.n	80069d6 <arm_cos_f32+0x7e>
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80069ae:	4a0e      	ldr	r2, [pc, #56]	@ (80069e8 <arm_cos_f32+0x90>)
 80069b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80069b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80069bc:	ed93 7a00 	vldr	s14, [r3]
 80069c0:	edd2 6a00 	vldr	s13, [r2]
 80069c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80069c8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80069cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80069d4:	4770      	bx	lr
 80069d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80069da:	2101      	movs	r1, #1
 80069dc:	2300      	movs	r3, #0
 80069de:	e7e6      	b.n	80069ae <arm_cos_f32+0x56>
 80069e0:	3e22f983 	.word	0x3e22f983
 80069e4:	44000000 	.word	0x44000000
 80069e8:	0800a55c 	.word	0x0800a55c

080069ec <arm_radix8_butterfly_f32>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	ed2d 8b10 	vpush	{d8-d15}
 80069f4:	b095      	sub	sp, #84	@ 0x54
 80069f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 80069fa:	4603      	mov	r3, r0
 80069fc:	3304      	adds	r3, #4
 80069fe:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006ce4 <arm_radix8_butterfly_f32+0x2f8>
 8006a02:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a04:	468b      	mov	fp, r1
 8006a06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a08:	4689      	mov	r9, r1
 8006a0a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006a0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a10:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006a12:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006a16:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006a1a:	eb03 0508 	add.w	r5, r3, r8
 8006a1e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006a22:	eb05 040e 	add.w	r4, r5, lr
 8006a26:	0137      	lsls	r7, r6, #4
 8006a28:	eba6 030a 	sub.w	r3, r6, sl
 8006a2c:	eb04 000e 	add.w	r0, r4, lr
 8006a30:	44b2      	add	sl, r6
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	9702      	str	r7, [sp, #8]
 8006a36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006a3a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006a3e:	ebae 0c06 	sub.w	ip, lr, r6
 8006a42:	9703      	str	r7, [sp, #12]
 8006a44:	eb03 0708 	add.w	r7, r3, r8
 8006a48:	9701      	str	r7, [sp, #4]
 8006a4a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006a4e:	9706      	str	r7, [sp, #24]
 8006a50:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006a52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006a56:	f10e 0104 	add.w	r1, lr, #4
 8006a5a:	4439      	add	r1, r7
 8006a5c:	443a      	add	r2, r7
 8006a5e:	0137      	lsls	r7, r6, #4
 8006a60:	00f6      	lsls	r6, r6, #3
 8006a62:	9704      	str	r7, [sp, #16]
 8006a64:	9605      	str	r6, [sp, #20]
 8006a66:	9f01      	ldr	r7, [sp, #4]
 8006a68:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a6a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006a6e:	f04f 0c00 	mov.w	ip, #0
 8006a72:	edd4 6a00 	vldr	s13, [r4]
 8006a76:	edd7 1a00 	vldr	s3, [r7]
 8006a7a:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006a7e:	edd5 5a00 	vldr	s11, [r5]
 8006a82:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006a86:	ed90 6a00 	vldr	s12, [r0]
 8006a8a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006a8e:	ed93 3a00 	vldr	s6, [r3]
 8006a92:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006a96:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006a9a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006a9e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006aa2:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006aa6:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006aaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006aae:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006ab2:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006ab6:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006aba:	ed85 4a00 	vstr	s8, [r5]
 8006abe:	edd1 6a00 	vldr	s13, [r1]
 8006ac2:	ed94 9a01 	vldr	s18, [r4, #4]
 8006ac6:	edd3 2a01 	vldr	s5, [r3, #4]
 8006aca:	edd7 8a01 	vldr	s17, [r7, #4]
 8006ace:	edd6 0a00 	vldr	s1, [r6]
 8006ad2:	edd5 3a01 	vldr	s7, [r5, #4]
 8006ad6:	ed90 8a01 	vldr	s16, [r0, #4]
 8006ada:	ed92 7a00 	vldr	s14, [r2]
 8006ade:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006ae2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006ae6:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006aea:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006aee:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006af2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006af6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006afa:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006afe:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006b02:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006b06:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006b0a:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006b0e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006b12:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006b16:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006b1a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006b1e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006b22:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006b26:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006b2a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006b2e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006b32:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006b36:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006b3a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006b3e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006b42:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006b46:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006b4a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006b4e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006b52:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006b56:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006b5a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006b5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006b62:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006b66:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006b6a:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006b6e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006b72:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006b76:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006b7a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006b7e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006b82:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006b86:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006b8a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006b8e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006b92:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006b96:	44dc      	add	ip, fp
 8006b98:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006b9c:	45e1      	cmp	r9, ip
 8006b9e:	ed86 8a00 	vstr	s16, [r6]
 8006ba2:	ed85 2a01 	vstr	s4, [r5, #4]
 8006ba6:	4456      	add	r6, sl
 8006ba8:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006bac:	4455      	add	r5, sl
 8006bae:	edc0 6a00 	vstr	s13, [r0]
 8006bb2:	ed82 1a00 	vstr	s2, [r2]
 8006bb6:	ed80 5a01 	vstr	s10, [r0, #4]
 8006bba:	4452      	add	r2, sl
 8006bbc:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006bc0:	4450      	add	r0, sl
 8006bc2:	edc7 2a00 	vstr	s5, [r7]
 8006bc6:	edc4 4a00 	vstr	s9, [r4]
 8006bca:	ed83 7a00 	vstr	s14, [r3]
 8006bce:	edc1 5a00 	vstr	s11, [r1]
 8006bd2:	edc7 3a01 	vstr	s7, [r7, #4]
 8006bd6:	4451      	add	r1, sl
 8006bd8:	ed84 6a01 	vstr	s12, [r4, #4]
 8006bdc:	4457      	add	r7, sl
 8006bde:	edc3 7a01 	vstr	s15, [r3, #4]
 8006be2:	4454      	add	r4, sl
 8006be4:	4453      	add	r3, sl
 8006be6:	f63f af44 	bhi.w	8006a72 <arm_radix8_butterfly_f32+0x86>
 8006bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bec:	2b07      	cmp	r3, #7
 8006bee:	f240 81b7 	bls.w	8006f60 <arm_radix8_butterfly_f32+0x574>
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	9903      	ldr	r1, [sp, #12]
 8006bf6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006bf8:	9e05      	ldr	r6, [sp, #20]
 8006bfa:	9a04      	ldr	r2, [sp, #16]
 8006bfc:	f103 0c08 	add.w	ip, r3, #8
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	3108      	adds	r1, #8
 8006c04:	f108 0808 	add.w	r8, r8, #8
 8006c08:	1841      	adds	r1, r0, r1
 8006c0a:	3608      	adds	r6, #8
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4444      	add	r4, r8
 8006c12:	18c3      	adds	r3, r0, r3
 8006c14:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c16:	1981      	adds	r1, r0, r6
 8006c18:	f10e 0e08 	add.w	lr, lr, #8
 8006c1c:	3208      	adds	r2, #8
 8006c1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c20:	9107      	str	r1, [sp, #28]
 8006c22:	4604      	mov	r4, r0
 8006c24:	4601      	mov	r1, r0
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	f100 030c 	add.w	r3, r0, #12
 8006c2c:	4474      	add	r4, lr
 8006c2e:	f04f 0801 	mov.w	r8, #1
 8006c32:	1882      	adds	r2, r0, r2
 8006c34:	4461      	add	r1, ip
 8006c36:	9305      	str	r3, [sp, #20]
 8006c38:	464b      	mov	r3, r9
 8006c3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c3c:	46c1      	mov	r9, r8
 8006c3e:	9208      	str	r2, [sp, #32]
 8006c40:	46d8      	mov	r8, fp
 8006c42:	9106      	str	r1, [sp, #24]
 8006c44:	f04f 0e00 	mov.w	lr, #0
 8006c48:	469b      	mov	fp, r3
 8006c4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c4e:	449e      	add	lr, r3
 8006c50:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006c54:	441a      	add	r2, r3
 8006c56:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c58:	441a      	add	r2, r3
 8006c5a:	18d4      	adds	r4, r2, r3
 8006c5c:	18e5      	adds	r5, r4, r3
 8006c5e:	18ee      	adds	r6, r5, r3
 8006c60:	18f7      	adds	r7, r6, r3
 8006c62:	eb07 0c03 	add.w	ip, r7, r3
 8006c66:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c68:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006c6c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006c70:	910c      	str	r1, [sp, #48]	@ 0x30
 8006c72:	4419      	add	r1, r3
 8006c74:	9103      	str	r1, [sp, #12]
 8006c76:	4419      	add	r1, r3
 8006c78:	18ca      	adds	r2, r1, r3
 8006c7a:	9202      	str	r2, [sp, #8]
 8006c7c:	441a      	add	r2, r3
 8006c7e:	18d0      	adds	r0, r2, r3
 8006c80:	ed92 ea01 	vldr	s28, [r2, #4]
 8006c84:	9a02      	ldr	r2, [sp, #8]
 8006c86:	edd4 7a00 	vldr	s15, [r4]
 8006c8a:	edd2 da01 	vldr	s27, [r2, #4]
 8006c8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c90:	ed91 da01 	vldr	s26, [r1, #4]
 8006c94:	ed92 ca01 	vldr	s24, [r2, #4]
 8006c98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c9a:	9903      	ldr	r1, [sp, #12]
 8006c9c:	edcd 7a03 	vstr	s15, [sp, #12]
 8006ca0:	edd2 7a00 	vldr	s15, [r2]
 8006ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ca6:	edcd 7a02 	vstr	s15, [sp, #8]
 8006caa:	edd2 7a00 	vldr	s15, [r2]
 8006cae:	edd0 ea01 	vldr	s29, [r0, #4]
 8006cb2:	edd1 ca01 	vldr	s25, [r1, #4]
 8006cb6:	eddc ba00 	vldr	s23, [ip]
 8006cba:	edd7 aa00 	vldr	s21, [r7]
 8006cbe:	ed96 aa00 	vldr	s20, [r6]
 8006cc2:	edd5 9a00 	vldr	s19, [r5]
 8006cc6:	edcd 7a01 	vstr	s15, [sp, #4]
 8006cca:	4403      	add	r3, r0
 8006ccc:	ed93 fa01 	vldr	s30, [r3, #4]
 8006cd0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006cd4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006cd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006ce0:	46cc      	mov	ip, r9
 8006ce2:	e001      	b.n	8006ce8 <arm_radix8_butterfly_f32+0x2fc>
 8006ce4:	3f3504f3 	.word	0x3f3504f3
 8006ce8:	ed91 6a00 	vldr	s12, [r1]
 8006cec:	ed93 5a00 	vldr	s10, [r3]
 8006cf0:	edd0 fa00 	vldr	s31, [r0]
 8006cf4:	edd4 7a00 	vldr	s15, [r4]
 8006cf8:	ed95 7a00 	vldr	s14, [r5]
 8006cfc:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006d00:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006d04:	ed92 2a00 	vldr	s4, [r2]
 8006d08:	ed96 0a00 	vldr	s0, [r6]
 8006d0c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006d10:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006d14:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006d18:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006d1c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006d20:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006d24:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006d28:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d30:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006d34:	edd4 8a01 	vldr	s17, [r4, #4]
 8006d38:	ed92 9a01 	vldr	s18, [r2, #4]
 8006d3c:	edd7 0a00 	vldr	s1, [r7]
 8006d40:	edd1 2a01 	vldr	s5, [r1, #4]
 8006d44:	ed95 7a01 	vldr	s14, [r5, #4]
 8006d48:	ed93 6a01 	vldr	s12, [r3, #4]
 8006d4c:	edd0 5a01 	vldr	s11, [r0, #4]
 8006d50:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006d54:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006d58:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006d5c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006d60:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006d64:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006d68:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006d6c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006d70:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006d74:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006d78:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006d7c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006d80:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006d84:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006d88:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006d8c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006d90:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006d94:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006d98:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006d9c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006da0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006da4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006da8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006dac:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006db0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006db4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006db8:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006dbc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006dc0:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006dc4:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006dc8:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006dcc:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006dd0:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006dd4:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006dd8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006ddc:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006de0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006de4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006de8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006dec:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006df0:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006df4:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006df8:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006dfc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006e00:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006e04:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006e08:	eddd 1a02 	vldr	s3, [sp, #8]
 8006e0c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006e10:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006e14:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006e18:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006e1c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006e20:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006e24:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006e28:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006e2c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006e30:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006e34:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006e38:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006e3c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006e40:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006e44:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006e48:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006e4c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006e50:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006e54:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006e58:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006e5c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006e60:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006e64:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006e68:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006e6c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006e70:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006e74:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006e78:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006e7c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006e80:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006e84:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006e88:	eddd 5a03 	vldr	s11, [sp, #12]
 8006e8c:	edc6 fa00 	vstr	s31, [r6]
 8006e90:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006e94:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006e98:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006e9c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006ea0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006ea4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8006ea8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006eac:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006eb0:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006eb4:	ee74 4a89 	vadd.f32	s9, s9, s18
 8006eb8:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006ebc:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006ec0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006ec4:	44c4      	add	ip, r8
 8006ec6:	45e3      	cmp	fp, ip
 8006ec8:	edc3 3a00 	vstr	s7, [r3]
 8006ecc:	edc3 6a01 	vstr	s13, [r3, #4]
 8006ed0:	4456      	add	r6, sl
 8006ed2:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006ed6:	edc7 0a00 	vstr	s1, [r7]
 8006eda:	4453      	add	r3, sl
 8006edc:	ed80 2a00 	vstr	s4, [r0]
 8006ee0:	edc0 2a01 	vstr	s5, [r0, #4]
 8006ee4:	4457      	add	r7, sl
 8006ee6:	edc2 1a00 	vstr	s3, [r2]
 8006eea:	ed82 7a01 	vstr	s14, [r2, #4]
 8006eee:	4450      	add	r0, sl
 8006ef0:	ed85 8a00 	vstr	s16, [r5]
 8006ef4:	ed85 0a01 	vstr	s0, [r5, #4]
 8006ef8:	4452      	add	r2, sl
 8006efa:	edc1 4a00 	vstr	s9, [r1]
 8006efe:	4455      	add	r5, sl
 8006f00:	ed81 3a01 	vstr	s6, [r1, #4]
 8006f04:	edc4 8a00 	vstr	s17, [r4]
 8006f08:	ed84 6a01 	vstr	s12, [r4, #4]
 8006f0c:	4451      	add	r1, sl
 8006f0e:	4454      	add	r4, sl
 8006f10:	f63f aeea 	bhi.w	8006ce8 <arm_radix8_butterfly_f32+0x2fc>
 8006f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f16:	3308      	adds	r3, #8
 8006f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f22:	3308      	adds	r3, #8
 8006f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f26:	9b08      	ldr	r3, [sp, #32]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	9308      	str	r3, [sp, #32]
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	3308      	adds	r3, #8
 8006f36:	9306      	str	r3, [sp, #24]
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	3308      	adds	r3, #8
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f46:	f109 0901 	add.w	r9, r9, #1
 8006f4a:	454b      	cmp	r3, r9
 8006f4c:	f47f ae7d 	bne.w	8006c4a <arm_radix8_butterfly_f32+0x25e>
 8006f50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	46d9      	mov	r9, fp
 8006f58:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f5a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8006f5e:	e554      	b.n	8006a0a <arm_radix8_butterfly_f32+0x1e>
 8006f60:	b015      	add	sp, #84	@ 0x54
 8006f62:	ecbd 8b10 	vpop	{d8-d15}
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6a:	bf00      	nop

08006f6c <memset>:
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d100      	bne.n	8006f76 <memset+0xa>
 8006f74:	4770      	bx	lr
 8006f76:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7a:	e7f9      	b.n	8006f70 <memset+0x4>

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	@ (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	@ (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 f83a 	bl	8007014 <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	0801a868 	.word	0x0801a868
 8006fc4:	0801a868 	.word	0x0801a868
 8006fc8:	0801a868 	.word	0x0801a868
 8006fcc:	0801a86c 	.word	0x0801a86c

08006fd0 <sqrtf>:
 8006fd0:	b508      	push	{r3, lr}
 8006fd2:	ed2d 8b02 	vpush	{d8}
 8006fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8006fda:	f000 f817 	bl	800700c <__ieee754_sqrtf>
 8006fde:	eeb4 8a48 	vcmp.f32	s16, s16
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	d60c      	bvs.n	8007002 <sqrtf+0x32>
 8006fe8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007008 <sqrtf+0x38>
 8006fec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff4:	d505      	bpl.n	8007002 <sqrtf+0x32>
 8006ff6:	f7ff ffc1 	bl	8006f7c <__errno>
 8006ffa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006ffe:	2321      	movs	r3, #33	@ 0x21
 8007000:	6003      	str	r3, [r0, #0]
 8007002:	ecbd 8b02 	vpop	{d8}
 8007006:	bd08      	pop	{r3, pc}
 8007008:	00000000 	.word	0x00000000

0800700c <__ieee754_sqrtf>:
 800700c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007010:	4770      	bx	lr
	...

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
