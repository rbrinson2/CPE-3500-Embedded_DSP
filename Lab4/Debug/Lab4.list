
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b7c  08004b7c  00005b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc4  08004bc4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bc4  08004bc4  00005bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bcc  08004bcc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bcc  08004bcc  00005bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08004be0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004be0  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bd  00000000  00000000  00018ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e23  00000000  00000000  0001c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028910  00000000  00000000  0001d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013876  00000000  00000000  00045ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010608d  00000000  00000000  00059349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f3d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  0015f41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00164208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b64 	.word	0x08004b64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b64 	.word	0x08004b64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b0aa      	sub	sp, #168	@ 0xa8
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  float arr[N];
  float delta = 3 / ((3 / 3.3) * 4095);
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <main+0x6c>)
 80004c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  float voltage;
  voltage = 0.0 * delta;
 80004c4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80004c8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000528 <main+0x70>
 80004cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004d0:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb4a 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f830 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f934 	bl	800074c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f87c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM6_Init();
 80004e8:	f000 f8f0 	bl	80006cc <MX_TIM6_Init>
    arr[i] = voltage;
    HAL_Delay(50);
  }
  */
  /* -- Task 2 -- */
  HAL_TIM_Base_Start(&htim6);
 80004ec:	480f      	ldr	r0, [pc, #60]	@ (800052c <main+0x74>)
 80004ee:	f003 fbfb 	bl	8003ce8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    htim6.Instance->CNT = 0; // Reset Timer
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <main+0x74>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_ADC_Start(&hadc1);
 80004fa:	480d      	ldr	r0, [pc, #52]	@ (8000530 <main+0x78>)
 80004fc:	f000 fee6 	bl	80012cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000500:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000504:	480a      	ldr	r0, [pc, #40]	@ (8000530 <main+0x78>)
 8000506:	f000 ff9b 	bl	8001440 <HAL_ADC_PollForConversion>
    val = HAL_ADC_GetValue(&hadc1);
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <main+0x78>)
 800050c:	f001 f870 	bl	80015f0 <HAL_ADC_GetValue>
 8000510:	4603      	mov	r3, r0
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <main+0x7c>)
 8000514:	6013      	str	r3, [r2, #0]
    timer_counter = __HAL_TIM_GET_COUNTER(&htim6); // Read elapsed time
 8000516:	4b05      	ldr	r3, [pc, #20]	@ (800052c <main+0x74>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <main+0x80>)
 800051e:	6013      	str	r3, [r2, #0]
    htim6.Instance->CNT = 0; // Reset Timer
 8000520:	bf00      	nop
 8000522:	e7e6      	b.n	80004f2 <main+0x3a>
 8000524:	3a534067 	.word	0x3a534067
 8000528:	00000000 	.word	0x00000000
 800052c:	2000008c 	.word	0x2000008c
 8000530:	20000028 	.word	0x20000028
 8000534:	20000160 	.word	0x20000160
 8000538:	20000164 	.word	0x20000164

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	@ 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	@ 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fadd 	bl	8004b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000562:	f002 f857 	bl	8002614 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f984 	bl	8000878 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058a:	230a      	movs	r3, #10
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f88e 	bl	80026c0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005aa:	f000 f965 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fc56 	bl	8002e78 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 f951 	bl	8000878 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3758      	adds	r7, #88	@ 0x58
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000604:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000622:	2204      	movs	r2, #4
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000662:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000664:	f000 fce2 	bl	800102c <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066e:	f000 f903 	bl	8000878 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800067e:	f001 fc63 	bl	8001f48 <HAL_ADCEx_MultiModeConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000688:	f000 f8f6 	bl	8000878 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2306      	movs	r3, #6
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000698:	237f      	movs	r3, #127	@ 0x7f
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069c:	2304      	movs	r3, #4
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 80006aa:	f000 ffaf 	bl	800160c <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006b4:	f000 f8e0 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	@ 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028
 80006c4:	50040000 	.word	0x50040000
 80006c8:	14f00020 	.word	0x14f00020

080006cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006de:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <MX_TIM6_Init+0x7c>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006e4:	224f      	movs	r2, #79	@ 0x4f
 80006e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_TIM6_Init+0x78>)
 80006fe:	f003 fa9b 	bl	8003c38 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000708:	f000 f8b6 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800070c:	2108      	movs	r1, #8
 800070e:	480d      	ldr	r0, [pc, #52]	@ (8000744 <MX_TIM6_Init+0x78>)
 8000710:	f003 fb52 	bl	8003db8 <HAL_TIM_OnePulse_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f8ad 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <MX_TIM6_Init+0x78>)
 800072c:	f003 fc44 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 f89f 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40001000 	.word	0x40001000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f003 fc9a 	bl	80040c8 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f86d 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a24      	ldr	r2, [pc, #144]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <MX_GPIO_Init+0xc4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <MX_GPIO_Init+0xc4>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082a:	f001 fecd 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000834:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0xc8>)
 8000846:	f001 fd15 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084a:	2320      	movs	r3, #32
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000864:	f001 fd06 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	48000800 	.word	0x48000800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088e:	4a0e      	ldr	r2, [pc, #56]	@ (80008c8 <HAL_MspInit+0x44>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6613      	str	r3, [r2, #96]	@ 0x60
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <HAL_MspInit+0x44>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0ac      	sub	sp, #176	@ 0xb0
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2288      	movs	r2, #136	@ 0x88
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 f90c 	bl	8004b0a <memset>
  if(hadc->Instance==ADC1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a27      	ldr	r2, [pc, #156]	@ (8000994 <HAL_ADC_MspInit+0xc8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d147      	bne.n	800098c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000900:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000902:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000912:	2308      	movs	r3, #8
 8000914:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000922:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fcc7 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000938:	f7ff ff9e 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000940:	4a15      	ldr	r2, [pc, #84]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 8000942:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000958:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_ADC_MspInit+0xcc>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096c:	2301      	movs	r3, #1
 800096e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000972:	230b      	movs	r3, #11
 8000974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f001 fc74 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800098c:	bf00      	nop
 800098e:	37b0      	adds	r7, #176	@ 0xb0
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10b      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_TIM_Base_MspInit+0x3c>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <HAL_TIM_Base_MspInit+0x3c>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <HAL_TIM_Base_MspInit+0x3c>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40001000 	.word	0x40001000
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ac      	sub	sp, #176	@ 0xb0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2288      	movs	r2, #136	@ 0x88
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f884 	bl	8004b0a <memset>
  if(huart->Instance==USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_UART_MspInit+0xb0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13b      	bne.n	8000a84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fc51 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff28 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2c:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a70:	2307      	movs	r3, #7
 8000a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f001 fbf8 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	@ 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f89b 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f003 ffe9 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fcb5 	bl	80004b8 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	08004bd4 	.word	0x08004bd4
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	2000016c 	.word	0x2000016c

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_Init+0x3c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba8 <HAL_Init+0x3c>)
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f001 fb42 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f80f 	bl	8000bac <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f7ff fe73 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d023      	beq.n	8000c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_InitTick+0x70>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fb3f 	bl	800225a <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10f      	bne.n	8000c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d809      	bhi.n	8000bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	f001 fb17 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0x74>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e001      	b.n	8000c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000168 	.word	0x20000168

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000168 	.word	0x20000168

08000c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3360      	adds	r3, #96	@ 0x60
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <LL_ADC_SetOffset+0x44>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d04:	bf00      	nop
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	03fff000 	.word	0x03fff000

08000d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3360      	adds	r3, #96	@ 0x60
 8000d22:	461a      	mov	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3360      	adds	r3, #96	@ 0x60
 8000d50:	461a      	mov	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d6a:	bf00      	nop
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3330      	adds	r3, #48	@ 0x30
 8000dac:	461a      	mov	r2, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	4413      	add	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	211f      	movs	r1, #31
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	401a      	ands	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	0e9b      	lsrs	r3, r3, #26
 8000dd4:	f003 011f 	and.w	r1, r3, #31
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3314      	adds	r3, #20
 8000e04:	461a      	mov	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	0e5b      	lsrs	r3, r3, #25
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	0d1b      	lsrs	r3, r3, #20
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	2107      	movs	r1, #7
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	401a      	ands	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	0d1b      	lsrs	r3, r3, #20
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e3e:	bf00      	nop
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0318 	and.w	r3, r3, #24
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e70:	40d9      	lsrs	r1, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	400b      	ands	r3, r1
 8000e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	0007ffff 	.word	0x0007ffff

08000e94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 031f 	and.w	r3, r3, #31
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6093      	str	r3, [r2, #8]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f54:	d101      	bne.n	8000f5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <LL_ADC_IsEnabled+0x18>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <LL_ADC_IsEnabled+0x1a>
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fca:	f043 0204 	orr.w	r2, r3, #4
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b08      	cmp	r3, #8
 8001016:	d101      	bne.n	800101c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e130      	b.n	80012a8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fc39 	bl	80008cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff3f 	bl	8000ef0 <LL_ADC_IsDeepPowerDownEnabled>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff25 	bl	8000ecc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff5a 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d115      	bne.n	80010be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff3e 	bl	8000f18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800109c:	4b84      	ldr	r3, [pc, #528]	@ (80012b0 <HAL_ADC_Init+0x284>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	099b      	lsrs	r3, r3, #6
 80010a2:	4a84      	ldr	r2, [pc, #528]	@ (80012b4 <HAL_ADC_Init+0x288>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	099b      	lsrs	r3, r3, #6
 80010aa:	3301      	adds	r3, #1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f9      	bne.n	80010b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff3c 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d2:	f043 0210 	orr.w	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff75 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80010f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80c9 	bne.w	8001296 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80c5 	bne.w	8001296 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001110:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff35 	bl	8000f90 <LL_ADC_IsEnabled>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d115      	bne.n	8001158 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800112c:	4862      	ldr	r0, [pc, #392]	@ (80012b8 <HAL_ADC_Init+0x28c>)
 800112e:	f7ff ff2f 	bl	8000f90 <LL_ADC_IsEnabled>
 8001132:	4604      	mov	r4, r0
 8001134:	4861      	ldr	r0, [pc, #388]	@ (80012bc <HAL_ADC_Init+0x290>)
 8001136:	f7ff ff2b 	bl	8000f90 <LL_ADC_IsEnabled>
 800113a:	4603      	mov	r3, r0
 800113c:	431c      	orrs	r4, r3
 800113e:	4860      	ldr	r0, [pc, #384]	@ (80012c0 <HAL_ADC_Init+0x294>)
 8001140:	f7ff ff26 	bl	8000f90 <LL_ADC_IsEnabled>
 8001144:	4603      	mov	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4619      	mov	r1, r3
 8001152:	485c      	ldr	r0, [pc, #368]	@ (80012c4 <HAL_ADC_Init+0x298>)
 8001154:	f7ff fd86 	bl	8000c64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e5b      	ldrb	r3, [r3, #25]
 800115c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001162:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001168:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800116e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001176:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d106      	bne.n	8001194 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	3b01      	subs	r3, #1
 800118c:	045b      	lsls	r3, r3, #17
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HAL_ADC_Init+0x29c>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	430b      	orrs	r3, r1
 80011c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff1b 	bl	8001004 <LL_ADC_INJ_IsConversionOngoing>
 80011ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d13d      	bne.n	8001252 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d13a      	bne.n	8001252 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011e0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	69b9      	ldr	r1, [r7, #24]
 8001202:	430b      	orrs	r3, r1
 8001204:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800120c:	2b01      	cmp	r3, #1
 800120e:	d118      	bne.n	8001242 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001226:	4311      	orrs	r1, r2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800122c:	4311      	orrs	r1, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001232:	430a      	orrs	r2, r1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	e007      	b.n	8001252 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10c      	bne.n	8001274 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001260:	f023 010f 	bic.w	r1, r3, #15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
 8001272:	e007      	b.n	8001284 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020f 	bic.w	r2, r2, #15
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001288:	f023 0303 	bic.w	r3, r3, #3
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	@ 0x54
 8001294:	e007      	b.n	80012a6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3724      	adds	r7, #36	@ 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	053e2d63 	.word	0x053e2d63
 80012b8:	50040000 	.word	0x50040000
 80012bc:	50040100 	.word	0x50040100
 80012c0:	50040200 	.word	0x50040200
 80012c4:	50040300 	.word	0x50040300
 80012c8:	fff0c007 	.word	0xfff0c007

080012cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d4:	4857      	ldr	r0, [pc, #348]	@ (8001434 <HAL_ADC_Start+0x168>)
 80012d6:	f7ff fddd 	bl	8000e94 <LL_ADC_GetMultimode>
 80012da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe7c 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f040 809c 	bne.w	8001426 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_Start+0x30>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e097      	b.n	800142c <HAL_ADC_Start+0x160>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fd73 	bl	8001df0 <ADC_Enable>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 8083 	bne.w	800141c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a42      	ldr	r2, [pc, #264]	@ (8001438 <HAL_ADC_Start+0x16c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d002      	beq.n	800133a <HAL_ADC_Start+0x6e>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	e000      	b.n	800133c <HAL_ADC_Start+0x70>
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <HAL_ADC_Start+0x170>)
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4293      	cmp	r3, r2
 8001342:	d002      	beq.n	800134a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001362:	d106      	bne.n	8001372 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	f023 0206 	bic.w	r2, r3, #6
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001370:	e002      	b.n	8001378 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	221c      	movs	r2, #28
 800137e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2a      	ldr	r2, [pc, #168]	@ (8001438 <HAL_ADC_Start+0x16c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d002      	beq.n	8001398 <HAL_ADC_Start+0xcc>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	e000      	b.n	800139a <HAL_ADC_Start+0xce>
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <HAL_ADC_Start+0x170>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	4293      	cmp	r3, r2
 80013a0:	d008      	beq.n	80013b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d002      	beq.n	80013b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d114      	bne.n	80013de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fded 	bl	8000fb6 <LL_ADC_REG_StartConversion>
 80013dc:	e025      	b.n	800142a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_ADC_Start+0x16c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d002      	beq.n	80013fa <HAL_ADC_Start+0x12e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e000      	b.n	80013fc <HAL_ADC_Start+0x130>
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_Start+0x170>)
 80013fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00f      	beq.n	800142a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001412:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	655a      	str	r2, [r3, #84]	@ 0x54
 800141a:	e006      	b.n	800142a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001424:	e001      	b.n	800142a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001426:	2302      	movs	r3, #2
 8001428:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	50040300 	.word	0x50040300
 8001438:	50040100 	.word	0x50040100
 800143c:	50040000 	.word	0x50040000

08001440 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800144a:	4866      	ldr	r0, [pc, #408]	@ (80015e4 <HAL_ADC_PollForConversion+0x1a4>)
 800144c:	f7ff fd22 	bl	8000e94 <LL_ADC_GetMultimode>
 8001450:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b08      	cmp	r3, #8
 8001458:	d102      	bne.n	8001460 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800145a:	2308      	movs	r3, #8
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e02a      	b.n	80014b6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d002      	beq.n	8001472 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b09      	cmp	r3, #9
 8001470:	d111      	bne.n	8001496 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001484:	f043 0220 	orr.w	r2, r3, #32
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0a4      	b.n	80015da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001490:	2304      	movs	r3, #4
 8001492:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001494:	e00f      	b.n	80014b6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001496:	4853      	ldr	r0, [pc, #332]	@ (80015e4 <HAL_ADC_PollForConversion+0x1a4>)
 8001498:	f7ff fd0a 	bl	8000eb0 <LL_ADC_GetMultiDMATransfer>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e093      	b.n	80015da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014b2:	2304      	movs	r3, #4
 80014b4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014b6:	f7ff fbc9 	bl	8000c4c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014bc:	e021      	b.n	8001502 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014c4:	d01d      	beq.n	8001502 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80014c6:	f7ff fbc1 	bl	8000c4c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <HAL_ADC_PollForConversion+0x9c>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d112      	bne.n	8001502 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10b      	bne.n	8001502 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ee:	f043 0204 	orr.w	r2, r3, #4
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e06b      	b.n	80015da <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0d6      	beq.n	80014be <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001514:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fc28 	bl	8000d76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01c      	beq.n	8001566 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e5b      	ldrb	r3, [r3, #25]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b08      	cmp	r3, #8
 8001540:	d111      	bne.n	8001566 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_ADC_PollForConversion+0x1a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d002      	beq.n	8001576 <HAL_ADC_PollForConversion+0x136>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	e000      	b.n	8001578 <HAL_ADC_PollForConversion+0x138>
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_ADC_PollForConversion+0x1ac>)
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	4293      	cmp	r3, r2
 800157e:	d008      	beq.n	8001592 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d002      	beq.n	8001592 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b09      	cmp	r3, #9
 8001590:	d104      	bne.n	800159c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	e00c      	b.n	80015b6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <HAL_ADC_PollForConversion+0x1a8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d002      	beq.n	80015ac <HAL_ADC_PollForConversion+0x16c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e000      	b.n	80015ae <HAL_ADC_PollForConversion+0x16e>
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_ADC_PollForConversion+0x1ac>)
 80015ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d104      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2208      	movs	r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e008      	b.n	80015d8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	220c      	movs	r2, #12
 80015d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	50040300 	.word	0x50040300
 80015e8:	50040100 	.word	0x50040100
 80015ec:	50040000 	.word	0x50040000

080015f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b6      	sub	sp, #216	@ 0xd8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADC_ConfigChannel+0x22>
 800162a:	2302      	movs	r3, #2
 800162c:	e3c9      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x7b6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fccf 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 83aa 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d824      	bhi.n	80016a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3b02      	subs	r3, #2
 800165e:	2b03      	cmp	r3, #3
 8001660:	d81b      	bhi.n	800169a <HAL_ADC_ConfigChannel+0x8e>
 8001662:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <HAL_ADC_ConfigChannel+0x5c>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001679 	.word	0x08001679
 800166c:	08001681 	.word	0x08001681
 8001670:	08001689 	.word	0x08001689
 8001674:	08001691 	.word	0x08001691
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001678:	230c      	movs	r3, #12
 800167a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800167e:	e010      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001680:	2312      	movs	r3, #18
 8001682:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001686:	e00c      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001688:	2318      	movs	r3, #24
 800168a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800168e:	e008      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001698:	e003      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800169a:	2306      	movs	r3, #6
 800169c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80016b0:	f7ff fb74 	bl	8000d9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc90 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80016be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc9c 	bl	8001004 <LL_ADC_INJ_IsConversionOngoing>
 80016cc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f040 81a4 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 819f 	bne.w	8001a22 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f7ff fb7f 	bl	8000df4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00a      	beq.n	800172e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001728:	f7ff fad0 	bl	8000ccc <LL_ADC_SetOffset>
 800172c:	e179      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff faed 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <HAL_ADC_ConfigChannel+0x14e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fae2 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	0e9b      	lsrs	r3, r3, #26
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	e01e      	b.n	8001798 <HAL_ADC_ConfigChannel+0x18c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fad7 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800177c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001788:	2320      	movs	r3, #32
 800178a:	e004      	b.n	8001796 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800178c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1a4>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0e9b      	lsrs	r3, r3, #26
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	e018      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1d6>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80017c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80017cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80017d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d106      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff faa6 	bl	8000d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fa8a 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x214>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa7f 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	0e9b      	lsrs	r3, r3, #26
 800181a:	f003 021f 	and.w	r2, r3, #31
 800181e:	e01e      	b.n	800185e <HAL_ADC_ConfigChannel+0x252>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa74 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800183e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800184e:	2320      	movs	r3, #32
 8001850:	e004      	b.n	800185c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x26a>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	e018      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x29c>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800188a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800188e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001892:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800189e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa43 	bl	8000d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2102      	movs	r1, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fa27 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x2da>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2102      	movs	r1, #2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fa1c 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	0e9b      	lsrs	r3, r3, #26
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	e01e      	b.n	8001924 <HAL_ADC_ConfigChannel+0x318>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2102      	movs	r1, #2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fa11 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800190c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e004      	b.n	8001922 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_ConfigChannel+0x330>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0e9b      	lsrs	r3, r3, #26
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	e014      	b.n	8001966 <HAL_ADC_ConfigChannel+0x35a>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800194a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800194c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001950:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001958:	2320      	movs	r3, #32
 800195a:	e004      	b.n	8001966 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800195c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001966:	429a      	cmp	r2, r3
 8001968:	d106      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f9e4 	bl	8000d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2103      	movs	r1, #3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9c8 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x398>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2103      	movs	r1, #3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9bd 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 021f 	and.w	r2, r3, #31
 80019a2:	e017      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x3c8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2103      	movs	r1, #3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f9b2 	bl	8000d14 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80019bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019be:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80019c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e003      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80019ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x3e0>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	e011      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x404>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80019fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80019fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d106      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f98f 	bl	8000d40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fab2 	bl	8000f90 <LL_ADC_IsEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8140 	bne.w	8001cb4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6819      	ldr	r1, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	461a      	mov	r2, r3
 8001a42:	f7ff fa03 	bl	8000e4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4a8f      	ldr	r2, [pc, #572]	@ (8001c88 <HAL_ADC_ConfigChannel+0x67c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 8131 	bne.w	8001cb4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10b      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x46e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	bf94      	ite	ls
 8001a72:	2301      	movls	r3, #1
 8001a74:	2300      	movhi	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	e019      	b.n	8001aae <HAL_ADC_ConfigChannel+0x4a2>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e003      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d079      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x4c2>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	069b      	lsls	r3, r3, #26
 8001ac8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001acc:	e015      	b.n	8001afa <HAL_ADC_ConfigChannel+0x4ee>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ade:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e003      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x50e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	e017      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x53e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10a      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x564>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 021f 	and.w	r2, r3, #31
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	051b      	lsls	r3, r3, #20
 8001b6e:	e018      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x596>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	e003      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f003 021f 	and.w	r2, r3, #31
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	e081      	b.n	8001caa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x5b6>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	3301      	adds	r3, #1
 8001bba:	069b      	lsls	r3, r3, #26
 8001bbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc0:	e015      	b.n	8001bee <HAL_ADC_ConfigChannel+0x5e2>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x602>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	e017      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x632>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x65e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	051b      	lsls	r3, r3, #20
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	e01e      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x69c>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  return result;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d104      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e006      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x688>
 8001c86:	bf00      	nop
 8001c88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f003 021f 	and.w	r2, r3, #31
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	051b      	lsls	r3, r3, #20
 8001ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff f8a0 	bl	8000df4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b44      	ldr	r3, [pc, #272]	@ (8001dcc <HAL_ADC_ConfigChannel+0x7c0>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d07a      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc0:	4843      	ldr	r0, [pc, #268]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cc2:	f7fe fff5 	bl	8000cb0 <LL_ADC_GetCommonPathInternalCh>
 8001cc6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a41      	ldr	r2, [pc, #260]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d12c      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d126      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0x6e8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <HAL_ADC_ConfigChannel+0x7d0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d15d      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4834      	ldr	r0, [pc, #208]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d00:	f7fe ffc3 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d04:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	4a36      	ldr	r2, [pc, #216]	@ (8001de4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d1e:	e002      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d2c:	e040      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2d      	ldr	r2, [pc, #180]	@ (8001de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d118      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d112      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x74c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <HAL_ADC_ConfigChannel+0x7d0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d12d      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d60:	4619      	mov	r1, r3
 8001d62:	481b      	ldr	r0, [pc, #108]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d64:	f7fe ff91 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d68:	e024      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_ADC_ConfigChannel+0x7e0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d120      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11a      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d115      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d92:	4619      	mov	r1, r3
 8001d94:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d96:	f7fe ff78 	bl	8000c8a <LL_ADC_SetCommonPathInternalCh>
 8001d9a:	e00c      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001db0:	bf00      	nop
 8001db2:	e000      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	37d8      	adds	r7, #216	@ 0xd8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	80080000 	.word	0x80080000
 8001dd0:	50040300 	.word	0x50040300
 8001dd4:	c7520000 	.word	0xc7520000
 8001dd8:	50040000 	.word	0x50040000
 8001ddc:	50040200 	.word	0x50040200
 8001de0:	20000000 	.word	0x20000000
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	cb840000 	.word	0xcb840000
 8001dec:	80000001 	.word	0x80000001

08001df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f8c5 	bl	8000f90 <LL_ADC_IsEnabled>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d169      	bne.n	8001ee0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <ADC_Enable+0xfc>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e055      	b.n	8001ee2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f894 	bl	8000f68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e40:	482b      	ldr	r0, [pc, #172]	@ (8001ef0 <ADC_Enable+0x100>)
 8001e42:	f7fe ff35 	bl	8000cb0 <LL_ADC_GetCommonPathInternalCh>
 8001e46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e50:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <ADC_Enable+0x104>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <ADC_Enable+0x108>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e6a:	e002      	b.n	8001e72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fee8 	bl	8000c4c <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e7e:	e028      	b.n	8001ed2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f883 	bl	8000f90 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d104      	bne.n	8001e9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f867 	bl	8000f68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9a:	f7fe fed7 	bl	8000c4c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d914      	bls.n	8001ed2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00d      	beq.n	8001ed2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e007      	b.n	8001ee2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1cf      	bne.n	8001e80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	8000003f 	.word	0x8000003f
 8001ef0:	50040300 	.word	0x50040300
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	053e2d63 	.word	0x053e2d63

08001efc <LL_ADC_IsEnabled>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_IsEnabled+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_IsEnabled+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b09f      	sub	sp, #124	@ 0x7c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e093      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f72:	2300      	movs	r3, #0
 8001f74:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	@ (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d102      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f80:	4b46      	ldr	r3, [pc, #280]	@ (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	e001      	b.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e072      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ffb9 	bl	8001f22 <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffb3 	bl	8001f22 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d154      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d151      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	@ (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d02c      	beq.n	800202e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe6:	035b      	lsls	r3, r3, #13
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff0:	4829      	ldr	r0, [pc, #164]	@ (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ff2:	f7ff ff83 	bl	8001efc <LL_ADC_IsEnabled>
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	4828      	ldr	r0, [pc, #160]	@ (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ffa:	f7ff ff7f 	bl	8001efc <LL_ADC_IsEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	431c      	orrs	r4, r3
 8002002:	4828      	ldr	r0, [pc, #160]	@ (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002004:	f7ff ff7a 	bl	8001efc <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	4323      	orrs	r3, r4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d137      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002018:	f023 030f 	bic.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6811      	ldr	r1, [r2, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	430a      	orrs	r2, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800202a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800202c:	e028      	b.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800202e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002038:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203a:	4817      	ldr	r0, [pc, #92]	@ (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800203c:	f7ff ff5e 	bl	8001efc <LL_ADC_IsEnabled>
 8002040:	4604      	mov	r4, r0
 8002042:	4816      	ldr	r0, [pc, #88]	@ (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002044:	f7ff ff5a 	bl	8001efc <LL_ADC_IsEnabled>
 8002048:	4603      	mov	r3, r0
 800204a:	431c      	orrs	r4, r3
 800204c:	4815      	ldr	r0, [pc, #84]	@ (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800204e:	f7ff ff55 	bl	8001efc <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	4323      	orrs	r3, r4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d112      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800205a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002062:	f023 030f 	bic.w	r3, r3, #15
 8002066:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002068:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800206a:	e009      	b.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800207e:	e000      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002080:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800208a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800208e:	4618      	mov	r0, r3
 8002090:	377c      	adds	r7, #124	@ 0x7c
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	bf00      	nop
 8002098:	50040000 	.word	0x50040000
 800209c:	50040100 	.word	0x50040100
 80020a0:	50040300 	.word	0x50040300
 80020a4:	50040200 	.word	0x50040200

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff47 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5c 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb0 	bl	80021c8 <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e17f      	b.n	8002584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8171 	beq.w	800257e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_GPIO_Init+0x40>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d118      	bne.n	8002354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ac 	beq.w	800257e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b5f      	ldr	r3, [pc, #380]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	4a5e      	ldr	r2, [pc, #376]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6613      	str	r3, [r2, #96]	@ 0x60
 8002432:	4b5c      	ldr	r3, [pc, #368]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243e:	4a5a      	ldr	r2, [pc, #360]	@ (80025a8 <HAL_GPIO_Init+0x334>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x242>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	@ (80025ac <HAL_GPIO_Init+0x338>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	@ (80025b0 <HAL_GPIO_Init+0x33c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	@ (80025b4 <HAL_GPIO_Init+0x340>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	@ (80025b8 <HAL_GPIO_Init+0x344>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	@ (80025bc <HAL_GPIO_Init+0x348>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_GPIO_Init+0x34c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x22a>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c8:	4937      	ldr	r1, [pc, #220]	@ (80025a8 <HAL_GPIO_Init+0x334>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae78 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	48000c00 	.word	0x48000c00
 80025b8:	48001000 	.word	0x48001000
 80025bc:	48001400 	.word	0x48001400
 80025c0:	48001800 	.word	0x48001800
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <HAL_PWREx_GetVoltageRange+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002622:	d130      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800262c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002630:	d038      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800263a:	4a1e      	ldr	r2, [pc, #120]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2232      	movs	r2, #50	@ 0x32
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	e002      	b.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800266c:	d102      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002680:	d110      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e00f      	b.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d007      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269c:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40007000 	.word	0x40007000
 80026b8:	20000000 	.word	0x20000000
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e3ca      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b94      	ldr	r3, [pc, #592]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80e4 	beq.w	80028bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_RCC_OscConfig+0x4a>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	f040 808b 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8087 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270a:	4b89      	ldr	r3, [pc, #548]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e3a2      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_RCC_OscConfig+0x7c>
 8002732:	4b7f      	ldr	r3, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800273a:	e005      	b.n	8002748 <HAL_RCC_OscConfig+0x88>
 800273c:	4b7c      	ldr	r3, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002748:	4293      	cmp	r3, r2
 800274a:	d223      	bcs.n	8002794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd55 	bl	8003200 <RCC_SetFlashLatencyFromMSIRange>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e383      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a72      	ldr	r2, [pc, #456]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	496d      	ldr	r1, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277e:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4968      	ldr	r1, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e025      	b.n	80027e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002794:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4960      	ldr	r1, [pc, #384]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	495b      	ldr	r1, [pc, #364]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fd15 	bl	8003200 <RCC_SetFlashLatencyFromMSIRange>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e343      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 fc4a 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b52      	ldr	r3, [pc, #328]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	4950      	ldr	r1, [pc, #320]	@ (8002934 <HAL_RCC_OscConfig+0x274>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002938 <HAL_RCC_OscConfig+0x278>)
 80027fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002800:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_RCC_OscConfig+0x27c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe f9d1 	bl	8000bac <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d052      	beq.n	80028ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	e327      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d032      	beq.n	8002886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002820:	4b43      	ldr	r3, [pc, #268]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800282c:	f7fe fa0e 	bl	8000c4c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002834:	f7fe fa0a 	bl	8000c4c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e310      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b34      	ldr	r3, [pc, #208]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4931      	ldr	r1, [pc, #196]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	492c      	ldr	r1, [pc, #176]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e01a      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002886:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a29      	ldr	r2, [pc, #164]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002892:	f7fe f9db 	bl	8000c4c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7fe f9d7 	bl	8000c4c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e2dd      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ac:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x1da>
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d074      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x21a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d10e      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d064      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d160      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e2ba      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x24a>
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e026      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002912:	d115      	bne.n	8002940 <HAL_RCC_OscConfig+0x280>
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a02      	ldr	r2, [pc, #8]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	08004b7c 	.word	0x08004b7c
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004
 8002940:	4ba0      	ldr	r3, [pc, #640]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a9f      	ldr	r2, [pc, #636]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a9c      	ldr	r2, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe f974 	bl	8000c4c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe f970 	bl	8000c4c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e276      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b92      	ldr	r3, [pc, #584]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x2a8>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe f960 	bl	8000c4c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe f95c 	bl	8000c4c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e262      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a2:	4b88      	ldr	r3, [pc, #544]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x2d0>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d060      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x310>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d116      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x328>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e23f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b76      	ldr	r3, [pc, #472]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4973      	ldr	r1, [pc, #460]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fc:	e040      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a06:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe f91b 	bl	8000c4c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe f917 	bl	8000c4c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e21d      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b62      	ldr	r3, [pc, #392]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	495f      	ldr	r1, [pc, #380]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f8f7 	bl	8000c4c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe f8f3 	bl	8000c4c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1f9      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01c      	beq.n	8002ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f8d2 	bl	8000c4c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe f8ce 	bl	8000c4c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002abe:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCC_OscConfig+0x3ec>
 8002acc:	e01b      	b.n	8002b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe f8b5 	bl	8000c4c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe f8b1 	bl	8000c4c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1b7      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af8:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ef      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a6 	beq.w	8002c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b18:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10d      	bne.n	8002b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b27      	ldr	r3, [pc, #156]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b30:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d118      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b58:	f7fe f878 	bl	8000c4c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7fe f874 	bl	8000c4c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e17a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4d8>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b96:	e029      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d115      	bne.n	8002bcc <HAL_RCC_OscConfig+0x50c>
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a03      	ldr	r2, [pc, #12]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bdc:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a97      	ldr	r2, [pc, #604]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f82a 	bl	8000c4c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe f826 	bl	8000c4c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e12a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	4b8b      	ldr	r3, [pc, #556]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ed      	beq.n	8002bfc <HAL_RCC_OscConfig+0x53c>
 8002c20:	e015      	b.n	8002c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe f813 	bl	8000c4c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe f80f 	bl	8000c4c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e113      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	4b7f      	ldr	r3, [pc, #508]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ed      	bne.n	8002c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b7a      	ldr	r3, [pc, #488]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	4a79      	ldr	r2, [pc, #484]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80fe 	beq.w	8002e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 80d0 	bne.w	8002e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c74:	4b72      	ldr	r3, [pc, #456]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d130      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d127      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11f      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cb4:	2a07      	cmp	r2, #7
 8002cb6:	bf14      	ite	ne
 8002cb8:	2201      	movne	r2, #1
 8002cba:	2200      	moveq	r2, #0
 8002cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d06e      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d069      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ad      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d18:	f7fd ff98 	bl	8000c4c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fd ff94 	bl	8000c4c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e09a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3e:	4b40      	ldr	r3, [pc, #256]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x784>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d58:	0212      	lsls	r2, r2, #8
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0652      	lsls	r2, r2, #25
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d78:	0912      	lsrs	r2, r2, #4
 8002d7a:	0452      	lsls	r2, r2, #17
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4930      	ldr	r1, [pc, #192]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d84:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d9c:	f7fd ff56 	bl	8000c4c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd ff52 	bl	8000c4c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db6:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc2:	e050      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d148      	bne.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dec:	f7fd ff2e 	bl	8000c4c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fd ff2a 	bl	8000c4c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e030      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x734>
 8002e12:	e028      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d023      	beq.n	8002e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a08      	ldr	r2, [pc, #32]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd ff11 	bl	8000c4c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fd ff0d 	bl	8000c4c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d905      	bls.n	8002e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e013      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ec      	bne.n	8002e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	4905      	ldr	r1, [pc, #20]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x7b4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
 8002e60:	e001      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	feeefffc 	.word	0xfeeefffc

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0e7      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b75      	ldr	r3, [pc, #468]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b72      	ldr	r3, [pc, #456]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	4970      	ldr	r1, [pc, #448]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0cf      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d908      	bls.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b63      	ldr	r3, [pc, #396]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4960      	ldr	r1, [pc, #384]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04c      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d121      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a6      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f16:	4b54      	ldr	r3, [pc, #336]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09a      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e08e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e086      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4943      	ldr	r1, [pc, #268]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fd fe74 	bl	8000c4c <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fd fe70 	bl	8000c4c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e06e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d208      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	492b      	ldr	r1, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbe:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d210      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4923      	ldr	r1, [pc, #140]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e036      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4918      	ldr	r1, [pc, #96]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003018:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4910      	ldr	r1, [pc, #64]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302c:	f000 f824 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	490b      	ldr	r1, [pc, #44]	@ (800306c <HAL_RCC_ClockConfig+0x1f4>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1f8>)
 800304a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1fc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fdab 	bl	8000bac <HAL_InitTick>
 8003056:	4603      	mov	r3, r0
 8003058:	72fb      	strb	r3, [r7, #11]

  return status;
 800305a:	7afb      	ldrb	r3, [r7, #11]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	08004b7c 	.word	0x08004b7c
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11e      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b8:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e004      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030fc:	4b23      	ldr	r3, [pc, #140]	@ (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 80030fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d134      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xa6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xac>
 800311c:	e005      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0e5b      	lsrs	r3, r3, #25
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003170:	69bb      	ldr	r3, [r7, #24]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	@ 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	08004b94 	.word	0x08004b94
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08004b8c 	.word	0x08004b8c

080031d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d8:	f7ff ffda 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0adb      	lsrs	r3, r3, #11
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4904      	ldr	r1, [pc, #16]	@ (80031fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08004b8c 	.word	0x08004b8c

08003200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003218:	f7ff f9ee 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 800321c:	6178      	str	r0, [r7, #20]
 800321e:	e014      	b.n	800324a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	4a24      	ldr	r2, [pc, #144]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	@ 0x58
 800322c:	4b22      	ldr	r3, [pc, #136]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003238:	f7ff f9de 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 800323c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003248:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003250:	d10b      	bne.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b80      	cmp	r3, #128	@ 0x80
 8003256:	d919      	bls.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2ba0      	cmp	r3, #160	@ 0xa0
 800325c:	d902      	bls.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800325e:	2302      	movs	r3, #2
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	e013      	b.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003264:	2301      	movs	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e010      	b.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	@ 0x80
 800326e:	d902      	bls.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003270:	2303      	movs	r3, #3
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e00a      	b.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b80      	cmp	r3, #128	@ 0x80
 800327a:	d102      	bne.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800327c:	2302      	movs	r3, #2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e004      	b.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b70      	cmp	r3, #112	@ 0x70
 8003286:	d101      	bne.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 0207 	bic.w	r2, r3, #7
 8003294:	4909      	ldr	r1, [pc, #36]	@ (80032bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800329c:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40022000 	.word	0x40022000

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c8:	2300      	movs	r3, #0
 80032ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032cc:	2300      	movs	r3, #0
 80032ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d041      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032e4:	d02a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032ea:	d824      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f0:	d008      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f6:	d81e      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003300:	d010      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003302:	e018      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003304:	4b86      	ldr	r3, [pc, #536]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a85      	ldr	r2, [pc, #532]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003310:	e015      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fabb 	bl	8003894 <RCCEx_PLLSAI1_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003322:	e00c      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3320      	adds	r3, #32
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fba6 	bl	8003a7c <RCCEx_PLLSAI2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003334:	e003      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	74fb      	strb	r3, [r7, #19]
      break;
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800333c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003344:	4b76      	ldr	r3, [pc, #472]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003352:	4973      	ldr	r1, [pc, #460]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800335a:	e001      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d041      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003370:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003374:	d02a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003376:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800337a:	d824      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800337c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003386:	d81e      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003390:	d010      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003392:	e018      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003394:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a0:	e015      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa73 	bl	8003894 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b2:	e00c      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3320      	adds	r3, #32
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fb5e 	bl	8003a7c <RCCEx_PLLSAI2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c4:	e003      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d4:	4b52      	ldr	r3, [pc, #328]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e2:	494f      	ldr	r1, [pc, #316]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033ea:	e001      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a0 	beq.w	800353e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003402:	4b47      	ldr	r3, [pc, #284]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a40      	ldr	r2, [pc, #256]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
 8003424:	4b3e      	ldr	r3, [pc, #248]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003430:	2301      	movs	r3, #1
 8003432:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003434:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3a      	ldr	r2, [pc, #232]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003440:	f7fd fc04 	bl	8000c4c <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fd fc00 	bl	8000c4c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	74fb      	strb	r3, [r7, #19]
        break;
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345c:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d15c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800346e:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d019      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800348c:	4b24      	ldr	r3, [pc, #144]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003498:	4b21      	ldr	r3, [pc, #132]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a20      	ldr	r2, [pc, #128]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fd fbbf 	bl	8000c4c <HAL_GetTick>
 80034ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d0:	e00b      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd fbbb 	bl	8000c4c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d902      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	74fb      	strb	r3, [r7, #19]
            break;
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ec      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350e:	4904      	ldr	r1, [pc, #16]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352c:	7c7b      	ldrb	r3, [r7, #17]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4b9e      	ldr	r3, [pc, #632]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	4a9d      	ldr	r2, [pc, #628]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354a:	4b98      	ldr	r3, [pc, #608]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f023 0203 	bic.w	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	4994      	ldr	r1, [pc, #592]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800356c:	4b8f      	ldr	r3, [pc, #572]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003572:	f023 020c 	bic.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357a:	498c      	ldr	r1, [pc, #560]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358e:	4b87      	ldr	r3, [pc, #540]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003594:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4983      	ldr	r1, [pc, #524]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035b0:	4b7e      	ldr	r3, [pc, #504]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	497b      	ldr	r1, [pc, #492]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d2:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e0:	4972      	ldr	r1, [pc, #456]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f4:	4b6d      	ldr	r3, [pc, #436]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	496a      	ldr	r1, [pc, #424]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b65      	ldr	r3, [pc, #404]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	4961      	ldr	r1, [pc, #388]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003638:	4b5c      	ldr	r3, [pc, #368]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	4959      	ldr	r1, [pc, #356]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800365a:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003668:	4950      	ldr	r1, [pc, #320]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800367c:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	4948      	ldr	r1, [pc, #288]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800369e:	4b43      	ldr	r3, [pc, #268]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	493f      	ldr	r1, [pc, #252]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d028      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c0:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ce:	4937      	ldr	r1, [pc, #220]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036de:	d106      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b32      	ldr	r3, [pc, #200]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]
 80036ec:	e011      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f6:	d10c      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	2101      	movs	r1, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f8c8 	bl	8003894 <RCCEx_PLLSAI1_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800371e:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	491f      	ldr	r1, [pc, #124]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800373c:	d106      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800373e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4a1a      	ldr	r2, [pc, #104]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003748:	60d3      	str	r3, [r2, #12]
 800374a:	e011      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003754:	d10c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f899 	bl	8003894 <RCCEx_PLLSAI1_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02b      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	4908      	ldr	r1, [pc, #32]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379a:	d109      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a02      	ldr	r2, [pc, #8]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a6:	60d3      	str	r3, [r2, #12]
 80037a8:	e014      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f867 	bl	8003894 <RCCEx_PLLSAI1_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02f      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ee:	4928      	ldr	r1, [pc, #160]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fe:	d10d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f844 	bl	8003894 <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d014      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	74bb      	strb	r3, [r7, #18]
 800381a:	e011      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003824:	d10c      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3320      	adds	r3, #32
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f000 f925 	bl	8003a7c <RCCEx_PLLSAI2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800384c:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800385a:	490d      	ldr	r1, [pc, #52]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800386e:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387e:	4904      	ldr	r1, [pc, #16]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003886:	7cbb      	ldrb	r3, [r7, #18]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000

08003894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038a2:	4b75      	ldr	r3, [pc, #468]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d018      	beq.n	80038e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ae:	4b72      	ldr	r3, [pc, #456]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10d      	bne.n	80038da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
       ||
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
       ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d047      	beq.n	800396a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
 80038de:	e044      	b.n	800396a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d018      	beq.n	800391a <RCCEx_PLLSAI1_Config+0x86>
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d825      	bhi.n	8003938 <RCCEx_PLLSAI1_Config+0xa4>
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d002      	beq.n	80038f6 <RCCEx_PLLSAI1_Config+0x62>
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d009      	beq.n	8003908 <RCCEx_PLLSAI1_Config+0x74>
 80038f4:	e020      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038f6:	4b60      	ldr	r3, [pc, #384]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11d      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003906:	e01a      	b.n	800393e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003908:	4b5b      	ldr	r3, [pc, #364]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003918:	e013      	b.n	8003942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800391a:	4b57      	ldr	r3, [pc, #348]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003926:	4b54      	ldr	r3, [pc, #336]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003936:	e006      	b.n	8003946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
      break;
 800393c:	e004      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003946:	bf00      	nop
    }

    if(status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800394e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	430b      	orrs	r3, r1
 8003964:	4944      	ldr	r1, [pc, #272]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d17d      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003970:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a40      	ldr	r2, [pc, #256]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fd f966 	bl	8000c4c <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003984:	f7fd f962 	bl	8000c4c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
        break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003998:	4b37      	ldr	r3, [pc, #220]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ef      	bne.n	8003984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d160      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b0:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6892      	ldr	r2, [r2, #8]
 80039c0:	0211      	lsls	r1, r2, #8
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	0912      	lsrs	r2, r2, #4
 80039c8:	0452      	lsls	r2, r2, #17
 80039ca:	430a      	orrs	r2, r1
 80039cc:	492a      	ldr	r1, [pc, #168]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	610b      	str	r3, [r1, #16]
 80039d2:	e027      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d112      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6892      	ldr	r2, [r2, #8]
 80039ea:	0211      	lsls	r1, r2, #8
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6912      	ldr	r2, [r2, #16]
 80039f0:	0852      	lsrs	r2, r2, #1
 80039f2:	3a01      	subs	r2, #1
 80039f4:	0552      	lsls	r2, r2, #21
 80039f6:	430a      	orrs	r2, r1
 80039f8:	491f      	ldr	r1, [pc, #124]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]
 80039fe:	e011      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6952      	ldr	r2, [r2, #20]
 8003a16:	0852      	lsrs	r2, r2, #1
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0652      	lsls	r2, r2, #25
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd f90c 	bl	8000c4c <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fd f908 	bl	8000c4c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a96:	4b67      	ldr	r3, [pc, #412]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0203 	and.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10d      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aae:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
       ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d047      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e044      	b.n	8003b52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d018      	beq.n	8003b02 <RCCEx_PLLSAI2_Config+0x86>
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d825      	bhi.n	8003b20 <RCCEx_PLLSAI2_Config+0xa4>
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d002      	beq.n	8003ade <RCCEx_PLLSAI2_Config+0x62>
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d009      	beq.n	8003af0 <RCCEx_PLLSAI2_Config+0x74>
 8003adc:	e020      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ade:	4b55      	ldr	r3, [pc, #340]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11d      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aee:	e01a      	b.n	8003b26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af0:	4b50      	ldr	r3, [pc, #320]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d116      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e013      	b.n	8003b2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b02:	4b4c      	ldr	r3, [pc, #304]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b0e:	4b49      	ldr	r3, [pc, #292]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b1e:	e006      	b.n	8003b2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e004      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b26:	bf00      	nop
 8003b28:	e002      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b36:	4b3f      	ldr	r3, [pc, #252]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	4939      	ldr	r1, [pc, #228]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d167      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b58:	4b36      	ldr	r3, [pc, #216]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a35      	ldr	r2, [pc, #212]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fd f872 	bl	8000c4c <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b6a:	e009      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b6c:	f7fd f86e 	bl	8000c4c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d902      	bls.n	8003b80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b7e:	e005      	b.n	8003b8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b80:	4b2c      	ldr	r3, [pc, #176]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ef      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d14a      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b98:	4b26      	ldr	r3, [pc, #152]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	0211      	lsls	r1, r2, #8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	0912      	lsrs	r2, r2, #4
 8003bb0:	0452      	lsls	r2, r2, #17
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	491f      	ldr	r1, [pc, #124]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	614b      	str	r3, [r1, #20]
 8003bba:	e011      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	0211      	lsls	r1, r2, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6912      	ldr	r2, [r2, #16]
 8003bd2:	0852      	lsrs	r2, r2, #1
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0652      	lsls	r2, r2, #25
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4916      	ldr	r1, [pc, #88]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003be0:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a13      	ldr	r2, [pc, #76]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fd f82e 	bl	8000c4c <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf2:	e009      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bf4:	f7fd f82a 	bl	8000c4c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
          break;
 8003c06:	e005      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c08:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e049      	b.n	8003cde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc fe9c 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 f8f8 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d001      	beq.n	8003d00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e047      	b.n	8003d90 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <HAL_TIM_Base_Start+0xb4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1a:	d018      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <HAL_TIM_Base_Start+0xb8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <HAL_TIM_Base_Start+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <HAL_TIM_Base_Start+0xc0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <HAL_TIM_Base_Start+0xc4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIM_Base_Start+0x66>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <HAL_TIM_Base_Start+0xc8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d115      	bne.n	8003d7a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <HAL_TIM_Base_Start+0xcc>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d015      	beq.n	8003d8c <HAL_TIM_Base_Start+0xa4>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d66:	d011      	beq.n	8003d8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d78:	e008      	b.n	8003d8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e000      	b.n	8003d8e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40013400 	.word	0x40013400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	00010007 	.word	0x00010007

08003db8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e041      	b.n	8003e50 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f839 	bl	8003e58 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f837 	bl	8003e6c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0208 	bic.w	r2, r2, #8
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a46      	ldr	r2, [pc, #280]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a43      	ldr	r2, [pc, #268]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a42      	ldr	r2, [pc, #264]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d01b      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a32      	ldr	r2, [pc, #200]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <TIM_Base_SetConfig+0x140>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00f      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <TIM_Base_SetConfig+0x140>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40013400 	.word	0x40013400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e068      	b.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800400a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004042:	d018      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1a      	ldr	r2, [pc, #104]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10c      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40013400 	.word	0x40013400
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40014000 	.word	0x40014000

080040c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e040      	b.n	800415c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fc76 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	@ 0x24
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fae0 	bl	80046d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f825 	bl	8004164 <UART_SetConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01b      	b.n	800415c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fb5f 	bl	8004818 <UART_CheckIdleState>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b08a      	sub	sp, #40	@ 0x28
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4313      	orrs	r3, r2
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba4      	ldr	r3, [pc, #656]	@ (8004424 <UART_SetConfig+0x2c0>)
 8004194:	4013      	ands	r3, r2
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a99      	ldr	r2, [pc, #612]	@ (8004428 <UART_SetConfig+0x2c4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	4313      	orrs	r3, r2
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a90      	ldr	r2, [pc, #576]	@ (800442c <UART_SetConfig+0x2c8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d126      	bne.n	800423c <UART_SetConfig+0xd8>
 80041ee:	4b90      	ldr	r3, [pc, #576]	@ (8004430 <UART_SetConfig+0x2cc>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d81b      	bhi.n	8004234 <UART_SetConfig+0xd0>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <UART_SetConfig+0xa0>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	08004225 	.word	0x08004225
 800420c:	0800421d 	.word	0x0800421d
 8004210:	0800422d 	.word	0x0800422d
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421a:	e116      	b.n	800444a <UART_SetConfig+0x2e6>
 800421c:	2302      	movs	r3, #2
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004222:	e112      	b.n	800444a <UART_SetConfig+0x2e6>
 8004224:	2304      	movs	r3, #4
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422a:	e10e      	b.n	800444a <UART_SetConfig+0x2e6>
 800422c:	2308      	movs	r3, #8
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004232:	e10a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004234:	2310      	movs	r3, #16
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423a:	e106      	b.n	800444a <UART_SetConfig+0x2e6>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a7c      	ldr	r2, [pc, #496]	@ (8004434 <UART_SetConfig+0x2d0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d138      	bne.n	80042b8 <UART_SetConfig+0x154>
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <UART_SetConfig+0x2cc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d82d      	bhi.n	80042b0 <UART_SetConfig+0x14c>
 8004254:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <UART_SetConfig+0xf8>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004291 	.word	0x08004291
 8004260:	080042b1 	.word	0x080042b1
 8004264:	080042b1 	.word	0x080042b1
 8004268:	080042b1 	.word	0x080042b1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042b1 	.word	0x080042b1
 8004278:	080042b1 	.word	0x080042b1
 800427c:	08004299 	.word	0x08004299
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042a9 	.word	0x080042a9
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e0d8      	b.n	800444a <UART_SetConfig+0x2e6>
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e0d4      	b.n	800444a <UART_SetConfig+0x2e6>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a6:	e0d0      	b.n	800444a <UART_SetConfig+0x2e6>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ae:	e0cc      	b.n	800444a <UART_SetConfig+0x2e6>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b6:	e0c8      	b.n	800444a <UART_SetConfig+0x2e6>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004438 <UART_SetConfig+0x2d4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d125      	bne.n	800430e <UART_SetConfig+0x1aa>
 80042c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004430 <UART_SetConfig+0x2cc>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042cc:	2b30      	cmp	r3, #48	@ 0x30
 80042ce:	d016      	beq.n	80042fe <UART_SetConfig+0x19a>
 80042d0:	2b30      	cmp	r3, #48	@ 0x30
 80042d2:	d818      	bhi.n	8004306 <UART_SetConfig+0x1a2>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d00a      	beq.n	80042ee <UART_SetConfig+0x18a>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d814      	bhi.n	8004306 <UART_SetConfig+0x1a2>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <UART_SetConfig+0x182>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d008      	beq.n	80042f6 <UART_SetConfig+0x192>
 80042e4:	e00f      	b.n	8004306 <UART_SetConfig+0x1a2>
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ec:	e0ad      	b.n	800444a <UART_SetConfig+0x2e6>
 80042ee:	2302      	movs	r3, #2
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f4:	e0a9      	b.n	800444a <UART_SetConfig+0x2e6>
 80042f6:	2304      	movs	r3, #4
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fc:	e0a5      	b.n	800444a <UART_SetConfig+0x2e6>
 80042fe:	2308      	movs	r3, #8
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004304:	e0a1      	b.n	800444a <UART_SetConfig+0x2e6>
 8004306:	2310      	movs	r3, #16
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430c:	e09d      	b.n	800444a <UART_SetConfig+0x2e6>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4a      	ldr	r2, [pc, #296]	@ (800443c <UART_SetConfig+0x2d8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d125      	bne.n	8004364 <UART_SetConfig+0x200>
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <UART_SetConfig+0x2cc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004322:	2bc0      	cmp	r3, #192	@ 0xc0
 8004324:	d016      	beq.n	8004354 <UART_SetConfig+0x1f0>
 8004326:	2bc0      	cmp	r3, #192	@ 0xc0
 8004328:	d818      	bhi.n	800435c <UART_SetConfig+0x1f8>
 800432a:	2b80      	cmp	r3, #128	@ 0x80
 800432c:	d00a      	beq.n	8004344 <UART_SetConfig+0x1e0>
 800432e:	2b80      	cmp	r3, #128	@ 0x80
 8004330:	d814      	bhi.n	800435c <UART_SetConfig+0x1f8>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0x1d8>
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d008      	beq.n	800434c <UART_SetConfig+0x1e8>
 800433a:	e00f      	b.n	800435c <UART_SetConfig+0x1f8>
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e082      	b.n	800444a <UART_SetConfig+0x2e6>
 8004344:	2302      	movs	r3, #2
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e07e      	b.n	800444a <UART_SetConfig+0x2e6>
 800434c:	2304      	movs	r3, #4
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e07a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004354:	2308      	movs	r3, #8
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e076      	b.n	800444a <UART_SetConfig+0x2e6>
 800435c:	2310      	movs	r3, #16
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e072      	b.n	800444a <UART_SetConfig+0x2e6>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a35      	ldr	r2, [pc, #212]	@ (8004440 <UART_SetConfig+0x2dc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d12a      	bne.n	80043c4 <UART_SetConfig+0x260>
 800436e:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <UART_SetConfig+0x2cc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437c:	d01a      	beq.n	80043b4 <UART_SetConfig+0x250>
 800437e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004382:	d81b      	bhi.n	80043bc <UART_SetConfig+0x258>
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d00c      	beq.n	80043a4 <UART_SetConfig+0x240>
 800438a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438e:	d815      	bhi.n	80043bc <UART_SetConfig+0x258>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <UART_SetConfig+0x238>
 8004394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004398:	d008      	beq.n	80043ac <UART_SetConfig+0x248>
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x258>
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e052      	b.n	800444a <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e04e      	b.n	800444a <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e04a      	b.n	800444a <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e046      	b.n	800444a <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e042      	b.n	800444a <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <UART_SetConfig+0x2c4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d13a      	bne.n	8004444 <UART_SetConfig+0x2e0>
 80043ce:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043dc:	d01a      	beq.n	8004414 <UART_SetConfig+0x2b0>
 80043de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0x2b8>
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e8:	d00c      	beq.n	8004404 <UART_SetConfig+0x2a0>
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ee:	d815      	bhi.n	800441c <UART_SetConfig+0x2b8>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <UART_SetConfig+0x298>
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f8:	d008      	beq.n	800440c <UART_SetConfig+0x2a8>
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x2b8>
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e022      	b.n	800444a <UART_SetConfig+0x2e6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e01e      	b.n	800444a <UART_SetConfig+0x2e6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004412:	e01a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441a:	e016      	b.n	800444a <UART_SetConfig+0x2e6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004422:	e012      	b.n	800444a <UART_SetConfig+0x2e6>
 8004424:	efff69f3 	.word	0xefff69f3
 8004428:	40008000 	.word	0x40008000
 800442c:	40013800 	.word	0x40013800
 8004430:	40021000 	.word	0x40021000
 8004434:	40004400 	.word	0x40004400
 8004438:	40004800 	.word	0x40004800
 800443c:	40004c00 	.word	0x40004c00
 8004440:	40005000 	.word	0x40005000
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a9f      	ldr	r2, [pc, #636]	@ (80046cc <UART_SetConfig+0x568>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d17a      	bne.n	800454a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004458:	2b08      	cmp	r3, #8
 800445a:	d824      	bhi.n	80044a6 <UART_SetConfig+0x342>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0x300>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004489 	.word	0x08004489
 8004468:	080044a7 	.word	0x080044a7
 800446c:	08004491 	.word	0x08004491
 8004470:	080044a7 	.word	0x080044a7
 8004474:	08004497 	.word	0x08004497
 8004478:	080044a7 	.word	0x080044a7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044a7 	.word	0x080044a7
 8004484:	0800449f 	.word	0x0800449f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7fe fe8e 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800448c:	61f8      	str	r0, [r7, #28]
        break;
 800448e:	e010      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004490:	4b8f      	ldr	r3, [pc, #572]	@ (80046d0 <UART_SetConfig+0x56c>)
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e00d      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fe fdef 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800449a:	61f8      	str	r0, [r7, #28]
        break;
 800449c:	e009      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e005      	b.n	80044b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80fb 	beq.w	80046b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4413      	add	r3, r2
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d305      	bcc.n	80044d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d903      	bls.n	80044de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044dc:	e0e8      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2200      	movs	r2, #0
 80044e2:	461c      	mov	r4, r3
 80044e4:	4615      	mov	r5, r2
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	022b      	lsls	r3, r5, #8
 80044f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044f4:	0222      	lsls	r2, r4, #8
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	6849      	ldr	r1, [r1, #4]
 80044fa:	0849      	lsrs	r1, r1, #1
 80044fc:	2000      	movs	r0, #0
 80044fe:	4688      	mov	r8, r1
 8004500:	4681      	mov	r9, r0
 8004502:	eb12 0a08 	adds.w	sl, r2, r8
 8004506:	eb43 0b09 	adc.w	fp, r3, r9
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	f7fb fe54 	bl	80001c8 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452e:	d308      	bcc.n	8004542 <UART_SetConfig+0x3de>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d204      	bcs.n	8004542 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	60da      	str	r2, [r3, #12]
 8004540:	e0b6      	b.n	80046b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004548:	e0b2      	b.n	80046b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004552:	d15e      	bne.n	8004612 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004554:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004558:	2b08      	cmp	r3, #8
 800455a:	d828      	bhi.n	80045ae <UART_SetConfig+0x44a>
 800455c:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <UART_SetConfig+0x400>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fe0e 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e014      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fe20 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e010      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b4d      	ldr	r3, [pc, #308]	@ (80046d0 <UART_SetConfig+0x56c>)
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e00d      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fd6b 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80045a2:	61f8      	str	r0, [r7, #28]
        break;
 80045a4:	e009      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045aa:	61fb      	str	r3, [r7, #28]
        break;
 80045ac:	e005      	b.n	80045ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d077      	beq.n	80046b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005a      	lsls	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d916      	bls.n	800460a <UART_SetConfig+0x4a6>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e2:	d212      	bcs.n	800460a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f023 030f 	bic.w	r3, r3, #15
 80045ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	8afb      	ldrh	r3, [r7, #22]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	8afa      	ldrh	r2, [r7, #22]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e052      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004610:	e04e      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004612:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004616:	2b08      	cmp	r3, #8
 8004618:	d827      	bhi.n	800466a <UART_SetConfig+0x506>
 800461a:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0x4bc>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe fdb0 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8004648:	61f8      	str	r0, [r7, #28]
        break;
 800464a:	e014      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fdc2 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004650:	61f8      	str	r0, [r7, #28]
        break;
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b1e      	ldr	r3, [pc, #120]	@ (80046d0 <UART_SetConfig+0x56c>)
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fd0d 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800465e:	61f8      	str	r0, [r7, #28]
        break;
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004666:	61fb      	str	r3, [r7, #28]
        break;
 8004668:	e005      	b.n	8004676 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004674:	bf00      	nop
    }

    if (pclk != 0U)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d019      	beq.n	80046b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	085a      	lsrs	r2, r3, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d909      	bls.n	80046aa <UART_SetConfig+0x546>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469c:	d205      	bcs.n	80046aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e002      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3728      	adds	r7, #40	@ 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ca:	bf00      	nop
 80046cc:	40008000 	.word	0x40008000
 80046d0:	00f42400 	.word	0x00f42400

080046d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d2:	d10a      	bne.n	80047ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b098      	sub	sp, #96	@ 0x60
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004828:	f7fc fa10 	bl	8000c4c <HAL_GetTick>
 800482c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d12e      	bne.n	800489a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f88c 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d021      	beq.n	800489a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800486a:	653b      	str	r3, [r7, #80]	@ 0x50
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800487a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e6      	bne.n	8004856 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e062      	b.n	8004960 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d149      	bne.n	800493c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b0:	2200      	movs	r2, #0
 80048b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f856 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03c      	beq.n	800493c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	623b      	str	r3, [r7, #32]
   return(result);
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60fb      	str	r3, [r7, #12]
   return(result);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	61fa      	str	r2, [r7, #28]
 8004916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	617b      	str	r3, [r7, #20]
   return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e011      	b.n	8004960 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3758      	adds	r7, #88	@ 0x58
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004978:	e04f      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004980:	d04b      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fc f963 	bl	8000c4c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <UART_WaitOnFlagUntilTimeout+0x30>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e04e      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d037      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b80      	cmp	r3, #128	@ 0x80
 80049ae:	d034      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d031      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d110      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f838 	bl	8004a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2208      	movs	r2, #8
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e029      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f4:	d111      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f81e 	bl	8004a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e00f      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0a0      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b095      	sub	sp, #84	@ 0x54
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d118      	bne.n	8004aea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0310 	bic.w	r3, r3, #16
 8004acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6979      	ldr	r1, [r7, #20]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004afe:	bf00      	nop
 8004b00:	3754      	adds	r7, #84	@ 0x54
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <memset>:
 8004b0a:	4402      	add	r2, r0
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d100      	bne.n	8004b14 <memset+0xa>
 8004b12:	4770      	bx	lr
 8004b14:	f803 1b01 	strb.w	r1, [r3], #1
 8004b18:	e7f9      	b.n	8004b0e <memset+0x4>
	...

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	@ (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2600      	movs	r6, #0
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b60 <__libc_init_array+0x44>)
 8004b30:	f000 f818 	bl	8004b64 <_init>
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2600      	movs	r6, #0
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08004bcc 	.word	0x08004bcc
 8004b58:	08004bcc 	.word	0x08004bcc
 8004b5c:	08004bcc 	.word	0x08004bcc
 8004b60:	08004bd0 	.word	0x08004bd0

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
