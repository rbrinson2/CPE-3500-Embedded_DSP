
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004bd0  08004bd0  00005bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004e5c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004e5c  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3c7  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c1  00000000  00000000  00010453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00011c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b7  00000000  00000000  000124d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259bc  00000000  00000000  00012b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a27e  00000000  00000000  0003854b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80e7  00000000  00000000  000427c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a8b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  0012a8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bb8 	.word	0x08004bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004bb8 	.word	0x08004bb8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009a8:	f000 b96a 	b.w	8000c80 <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	460c      	mov	r4, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d14e      	bne.n	8000a6e <__udivmoddi4+0xaa>
 80009d0:	4694      	mov	ip, r2
 80009d2:	458c      	cmp	ip, r1
 80009d4:	4686      	mov	lr, r0
 80009d6:	fab2 f282 	clz	r2, r2
 80009da:	d962      	bls.n	8000aa2 <__udivmoddi4+0xde>
 80009dc:	b14a      	cbz	r2, 80009f2 <__udivmoddi4+0x2e>
 80009de:	f1c2 0320 	rsb	r3, r2, #32
 80009e2:	4091      	lsls	r1, r2
 80009e4:	fa20 f303 	lsr.w	r3, r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	4319      	orrs	r1, r3
 80009ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f6:	fa1f f68c 	uxth.w	r6, ip
 80009fa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a02:	fb07 1114 	mls	r1, r7, r4, r1
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb04 f106 	mul.w	r1, r4, r6
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d90a      	bls.n	8000a28 <__udivmoddi4+0x64>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a1a:	f080 8112 	bcs.w	8000c42 <__udivmoddi4+0x27e>
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	f240 810f 	bls.w	8000c42 <__udivmoddi4+0x27e>
 8000a24:	3c02      	subs	r4, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1a59      	subs	r1, r3, r1
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a32:	fb07 1110 	mls	r1, r7, r0, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb00 f606 	mul.w	r6, r0, r6
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x94>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a4a:	f080 80fc 	bcs.w	8000c46 <__udivmoddi4+0x282>
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	f240 80f9 	bls.w	8000c46 <__udivmoddi4+0x282>
 8000a54:	4463      	add	r3, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa6>
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xba>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb4>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x150>
 8000a86:	42a3      	cmp	r3, r4
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xcc>
 8000a8a:	4290      	cmp	r0, r2
 8000a8c:	f0c0 80f0 	bcc.w	8000c70 <__udivmoddi4+0x2ac>
 8000a90:	1a86      	subs	r6, r0, r2
 8000a92:	eb64 0303 	sbc.w	r3, r4, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d0e6      	beq.n	8000a6a <__udivmoddi4+0xa6>
 8000a9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000aa0:	e7e3      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	f040 8090 	bne.w	8000bc8 <__udivmoddi4+0x204>
 8000aa8:	eba1 040c 	sub.w	r4, r1, ip
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	fa1f f78c 	uxth.w	r7, ip
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000abe:	fb08 4416 	mls	r4, r8, r6, r4
 8000ac2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ac6:	fb07 f006 	mul.w	r0, r7, r6
 8000aca:	4298      	cmp	r0, r3
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x11c>
 8000ace:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x11a>
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	f200 80cd 	bhi.w	8000c78 <__udivmoddi4+0x2b4>
 8000ade:	4626      	mov	r6, r4
 8000ae0:	1a1c      	subs	r4, r3, r0
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aea:	fb08 4410 	mls	r4, r8, r0, r4
 8000aee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af2:	fb00 f707 	mul.w	r7, r0, r7
 8000af6:	429f      	cmp	r7, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x148>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x146>
 8000b04:	429f      	cmp	r7, r3
 8000b06:	f200 80b0 	bhi.w	8000c6a <__udivmoddi4+0x2a6>
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	1bdb      	subs	r3, r3, r7
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x9c>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b24:	fa04 f301 	lsl.w	r3, r4, r1
 8000b28:	ea43 030c 	orr.w	r3, r3, ip
 8000b2c:	40f4      	lsrs	r4, r6
 8000b2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b32:	0c38      	lsrs	r0, r7, #16
 8000b34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b38:	fbb4 fef0 	udiv	lr, r4, r0
 8000b3c:	fa1f fc87 	uxth.w	ip, r7
 8000b40:	fb00 441e 	mls	r4, r0, lr, r4
 8000b44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b48:	fb0e f90c 	mul.w	r9, lr, ip
 8000b4c:	45a1      	cmp	r9, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x1a6>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b5a:	f080 8084 	bcs.w	8000c66 <__udivmoddi4+0x2a2>
 8000b5e:	45a1      	cmp	r9, r4
 8000b60:	f240 8081 	bls.w	8000c66 <__udivmoddi4+0x2a2>
 8000b64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b68:	443c      	add	r4, r7
 8000b6a:	eba4 0409 	sub.w	r4, r4, r9
 8000b6e:	fa1f f983 	uxth.w	r9, r3
 8000b72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b76:	fb00 4413 	mls	r4, r0, r3, r4
 8000b7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b82:	45a4      	cmp	ip, r4
 8000b84:	d907      	bls.n	8000b96 <__udivmoddi4+0x1d2>
 8000b86:	193c      	adds	r4, r7, r4
 8000b88:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b8c:	d267      	bcs.n	8000c5e <__udivmoddi4+0x29a>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0x29a>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	469c      	mov	ip, r3
 8000ba8:	d351      	bcc.n	8000c4e <__udivmoddi4+0x28a>
 8000baa:	d04e      	beq.n	8000c4a <__udivmoddi4+0x286>
 8000bac:	b155      	cbz	r5, 8000bc4 <__udivmoddi4+0x200>
 8000bae:	ebb8 030e 	subs.w	r3, r8, lr
 8000bb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	40cb      	lsrs	r3, r1
 8000bbc:	431e      	orrs	r6, r3
 8000bbe:	40cc      	lsrs	r4, r1
 8000bc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e750      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	430c      	orrs	r4, r1
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be4:	fa1f f78c 	uxth.w	r7, ip
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3110 	mls	r1, r8, r0, r3
 8000bf0:	0c23      	lsrs	r3, r4, #16
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f107 	mul.w	r1, r0, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x24c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c06:	d22c      	bcs.n	8000c62 <__udivmoddi4+0x29e>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d92a      	bls.n	8000c62 <__udivmoddi4+0x29e>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c18:	fb08 3311 	mls	r3, r8, r1, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb01 f307 	mul.w	r3, r1, r7
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x276>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c30:	d213      	bcs.n	8000c5a <__udivmoddi4+0x296>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d911      	bls.n	8000c5a <__udivmoddi4+0x296>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4464      	add	r4, ip
 8000c3a:	1ae4      	subs	r4, r4, r3
 8000c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c40:	e739      	b.n	8000ab6 <__udivmoddi4+0xf2>
 8000c42:	4604      	mov	r4, r0
 8000c44:	e6f0      	b.n	8000a28 <__udivmoddi4+0x64>
 8000c46:	4608      	mov	r0, r1
 8000c48:	e706      	b.n	8000a58 <__udivmoddi4+0x94>
 8000c4a:	45c8      	cmp	r8, r9
 8000c4c:	d2ae      	bcs.n	8000bac <__udivmoddi4+0x1e8>
 8000c4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c56:	3801      	subs	r0, #1
 8000c58:	e7a8      	b.n	8000bac <__udivmoddi4+0x1e8>
 8000c5a:	4631      	mov	r1, r6
 8000c5c:	e7ed      	b.n	8000c3a <__udivmoddi4+0x276>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	e799      	b.n	8000b96 <__udivmoddi4+0x1d2>
 8000c62:	4630      	mov	r0, r6
 8000c64:	e7d4      	b.n	8000c10 <__udivmoddi4+0x24c>
 8000c66:	46d6      	mov	lr, sl
 8000c68:	e77f      	b.n	8000b6a <__udivmoddi4+0x1a6>
 8000c6a:	4463      	add	r3, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e74d      	b.n	8000b0c <__udivmoddi4+0x148>
 8000c70:	4606      	mov	r6, r0
 8000c72:	4623      	mov	r3, r4
 8000c74:	4608      	mov	r0, r1
 8000c76:	e70f      	b.n	8000a98 <__udivmoddi4+0xd4>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	e730      	b.n	8000ae0 <__udivmoddi4+0x11c>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_idiv0>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	0000      	movs	r0, r0
	...

08000c88 <system2>:
    if (n == 0) output[n] = input[n];
    else output[n] = input[n] + b * input[n - 1]; 
  }
}

void system2(float input[], float output[], int size){
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  int n;
  for (n = 0; n < size; n++) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e05d      	b.n	8000d56 <system2+0xce>
    if (n == 0) output[n] = input[n];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10a      	bne.n	8000cb6 <system2+0x2e>
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	441a      	add	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	440b      	add	r3, r1
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e04c      	b.n	8000d50 <system2+0xc8>
    else output[n] = a * input[n] + b * input[n - 1] + c * output[n - 1]; 
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd0f 	bl	80006e4 <__aeabi_f2d>
 8000cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8000d68 <system2+0xe0>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fa7c 	bl	80001c8 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcfb 	bl	80006e4 <__aeabi_f2d>
 8000cee:	a320      	add	r3, pc, #128	@ (adr r3, 8000d70 <system2+0xe8>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fa68 	bl	80001c8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	f7ff fb92 	bl	8000428 <__adddf3>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4614      	mov	r4, r2
 8000d0a:	461d      	mov	r5, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d12:	3b01      	subs	r3, #1
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fce1 	bl	80006e4 <__aeabi_f2d>
 8000d22:	a315      	add	r3, pc, #84	@ (adr r3, 8000d78 <system2+0xf0>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f7ff fa4e 	bl	80001c8 <__aeabi_dmul>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4620      	mov	r0, r4
 8000d32:	4629      	mov	r1, r5
 8000d34:	f7ff fb78 	bl	8000428 <__adddf3>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	18d4      	adds	r4, r2, r3
 8000d48:	f7ff fdd4 	bl	80008f4 <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	6023      	str	r3, [r4, #0]
  for (n = 0; n < size; n++) {
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	db9d      	blt.n	8000c9a <system2+0x12>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bdb0      	pop	{r4, r5, r7, pc}
 8000d68:	9999999a 	.word	0x9999999a
 8000d6c:	40019999 	.word	0x40019999
 8000d70:	9999999a 	.word	0x9999999a
 8000d74:	bff19999 	.word	0xbff19999
 8000d78:	66666666 	.word	0x66666666
 8000d7c:	3fe66666 	.word	0x3fe66666

08000d80 <convolution>:
void convolution(float x[], float h[], float y[], int sizeX, int sizeH)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08b      	sub	sp, #44	@ 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  int n, k;  // variables for loops
  int p=0;    // index variable for output signal y
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  float sum;  // convolutions sum accumulator variable
  int Low_lim = sizeH/2;      // Staring point of the center pick N elements of the output array
 8000d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d94:	0fda      	lsrs	r2, r3, #31
 8000d96:	4413      	add	r3, r2
 8000d98:	105b      	asrs	r3, r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  int L = sizeX + sizeH - 1;  // Original length of the convolution.
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000da0:	4413      	add	r3, r2
 8000da2:	3b01      	subs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]

  for (n = 0; n < L; n++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000daa:	e042      	b.n	8000e32 <convolution+0xb2>
    sum = 0;
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < sizeX; k++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	e023      	b.n	8000e00 <convolution+0x80>
      if ((n - k) >= 0 && (n - k) < sizeH) {
 8000db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db1b      	blt.n	8000dfa <convolution+0x7a>
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dd15      	ble.n	8000dfa <convolution+0x7a>
          sum = sum + x[k]*h[n-k];   // Main convolution sum calculation
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	ed97 7a06 	vldr	s14, [r7, #24]
 8000df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df6:	edc7 7a06 	vstr	s15, [r7, #24]
    for (k = 0; k < sizeX; k++) {
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
 8000e00:	6a3a      	ldr	r2, [r7, #32]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbd7      	blt.n	8000db8 <convolution+0x38>
      }
    }
    if(n>=Low_lim && n<(Low_lim+N))  // Only pick center N elements of the output array!
 8000e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	db0d      	blt.n	8000e2c <convolution+0xac>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3328      	adds	r3, #40	@ 0x28
 8000e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dc08      	bgt.n	8000e2c <convolution+0xac>
    {
      y[p] = sum;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	601a      	str	r2, [r3, #0]
      p++;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
  for (n = 0; n < L; n++) {
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbb8      	blt.n	8000dac <convolution+0x2c>
    }
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	372c      	adds	r7, #44	@ 0x2c
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b0d6      	sub	sp, #344	@ 0x158
 8000e4c:	af02      	add	r7, sp, #8
  float inp[N];
  float outp[N];
  for (int i = 0; i < N; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000e54:	e01d      	b.n	8000e92 <main+0x4a>
    if (i < 7) inp[i] = 1;
 8000e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	dc0a      	bgt.n	8000e74 <main+0x2c>
 8000e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e68:	443b      	add	r3, r7
 8000e6a:	3bac      	subs	r3, #172	@ 0xac
 8000e6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e009      	b.n	8000e88 <main+0x40>
    else inp[i] = 0;
 8000e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e7e:	443b      	add	r3, r7
 8000e80:	3bac      	subs	r3, #172	@ 0xac
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; i++) {
 8000e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000e92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e96:	2b28      	cmp	r3, #40	@ 0x28
 8000e98:	dddd      	ble.n	8000e56 <main+0xe>
  }
  /* USER CODE BEGIN 1 */
  // system1(inp, outp, N);
  system2(inp, outp, N);
 8000e9a:	4639      	mov	r1, r7
 8000e9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea0:	2229      	movs	r2, #41	@ 0x29
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fef0 	bl	8000c88 <system2>
    //Single Tone Sinusoidal signal and Four Frequency Combined Sinusoidal Signal
  for(int n = 0; n < N; n++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000eae:	e0bb      	b.n	8001028 <main+0x1e0>
  {
      sine1[n]=sin(2*PI*f1/fs*(float)n);
 8000eb0:	4b69      	ldr	r3, [pc, #420]	@ (8001058 <main+0x210>)
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800105c <main+0x214>
 8000eba:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000ebe:	4b68      	ldr	r3, [pc, #416]	@ (8001060 <main+0x218>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ec8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed8:	ee17 0a90 	vmov	r0, s15
 8000edc:	f7ff fc02 	bl	80006e4 <__aeabi_f2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	ec43 2b10 	vmov	d0, r2, r3
 8000ee8:	f002 fe36 	bl	8003b58 <sin>
 8000eec:	ec53 2b10 	vmov	r2, r3, d0
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fcfe 	bl	80008f4 <__aeabi_d2f>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	495a      	ldr	r1, [pc, #360]	@ (8001064 <main+0x21c>)
 8000efc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	601a      	str	r2, [r3, #0]
      sineComposite[n]=sine1[n]+sin(2*PI*f2/fs*(float)n)+sin(2*PI*f3/fs*(float)n)+sin(2*PI*f4/fs*(float)n);
 8000f06:	4a57      	ldr	r2, [pc, #348]	@ (8001064 <main+0x21c>)
 8000f08:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbe6 	bl	80006e4 <__aeabi_f2d>
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4b52      	ldr	r3, [pc, #328]	@ (8001068 <main+0x220>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800105c <main+0x214>
 8000f26:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001060 <main+0x218>)
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f34:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	ee17 0a90 	vmov	r0, s15
 8000f48:	f7ff fbcc 	bl	80006e4 <__aeabi_f2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	ec43 2b10 	vmov	d0, r2, r3
 8000f54:	f002 fe00 	bl	8003b58 <sin>
 8000f58:	ec53 2b10 	vmov	r2, r3, d0
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f7ff fa62 	bl	8000428 <__adddf3>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800106c <main+0x224>)
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800105c <main+0x214>
 8000f76:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f7a:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <main+0x218>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f84:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	ee17 0a90 	vmov	r0, s15
 8000f98:	f7ff fba4 	bl	80006e4 <__aeabi_f2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	ec43 2b10 	vmov	d0, r2, r3
 8000fa4:	f002 fdd8 	bl	8003b58 <sin>
 8000fa8:	ec53 2b10 	vmov	r2, r3, d0
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff fa3a 	bl	8000428 <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4614      	mov	r4, r2
 8000fba:	461d      	mov	r5, r3
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <main+0x228>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800105c <main+0x214>
 8000fc6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <main+0x218>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f7ff fb7c 	bl	80006e4 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	ec43 2b10 	vmov	d0, r2, r3
 8000ff4:	f002 fdb0 	bl	8003b58 <sin>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff fa12 	bl	8000428 <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fc72 	bl	80008f4 <__aeabi_d2f>
 8001010:	4602      	mov	r2, r0
 8001012:	4918      	ldr	r1, [pc, #96]	@ (8001074 <main+0x22c>)
 8001014:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	601a      	str	r2, [r3, #0]
  for(int n = 0; n < N; n++)
 800101e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001028:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800102c:	2b28      	cmp	r3, #40	@ 0x28
 800102e:	f77f af3f 	ble.w	8000eb0 <main+0x68>
  }
  // Call Convolution Function to filter Combined Signal
  convolution(sineComposite, filter, sineFiltered, N, FILTER_SIZE);
 8001032:	230f      	movs	r3, #15
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2329      	movs	r3, #41	@ 0x29
 8001038:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <main+0x230>)
 800103a:	4910      	ldr	r1, [pc, #64]	@ (800107c <main+0x234>)
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <main+0x22c>)
 800103e:	f7ff fe9f 	bl	8000d80 <convolution>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f000 f9f7 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f81b 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f89b 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800104e:	f000 f869 	bl	8001124 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001052:	bf00      	nop
 8001054:	e7fd      	b.n	8001052 <main+0x20a>
 8001056:	bf00      	nop
 8001058:	2000003c 	.word	0x2000003c
 800105c:	40c90fdb 	.word	0x40c90fdb
 8001060:	2000004c 	.word	0x2000004c
 8001064:	20000100 	.word	0x20000100
 8001068:	20000040 	.word	0x20000040
 800106c:	20000044 	.word	0x20000044
 8001070:	20000048 	.word	0x20000048
 8001074:	200001a4 	.word	0x200001a4
 8001078:	20000248 	.word	0x20000248
 800107c:	20000000 	.word	0x20000000

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	@ 0x58
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	@ 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fd35 	bl	8003afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a6:	f000 fcf7 	bl	8001a98 <HAL_PWREx_ControlVoltageScaling>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b0:	f000 f8ce 	bl	8001250 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2310      	movs	r3, #16
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd2e 	bl	8001b44 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ee:	f000 f8af 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f8f6 	bl	80022fc <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001116:	f000 f89b 	bl	8001250 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	@ 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_USART2_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <MX_USART2_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_USART2_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART2_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART2_UART_Init+0x58>)
 8001168:	f001 ffa8 	bl	80030bc <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f86d 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000078 	.word	0x20000078
 8001180:	40004400 	.word	0x40004400

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <MX_GPIO_Init+0xc4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a24      	ldr	r2, [pc, #144]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_GPIO_Init+0xc4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f000 fc23 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <MX_GPIO_Init+0xc8>)
 800121e:	f000 fa6b 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001222:	2320      	movs	r3, #32
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 fa5c 	bl	80016f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	@ 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	48000800 	.word	0x48000800

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_MspInit+0x44>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_MspInit+0x44>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6613      	str	r3, [r2, #96]	@ 0x60
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_MspInit+0x44>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_MspInit+0x44>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x44>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	6593      	str	r3, [r2, #88]	@ 0x58
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x44>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ac      	sub	sp, #176	@ 0xb0
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2288      	movs	r2, #136	@ 0x88
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fc1a 	bl	8003afe <memset>
  if(huart->Instance==USART2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <HAL_UART_MspInit+0xb0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d13b      	bne.n	800134c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fa2f 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012ec:	f7ff ffb0 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f4:	4a18      	ldr	r2, [pc, #96]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_UART_MspInit+0xb4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001320:	230c      	movs	r3, #12
 8001322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001338:	2307      	movs	r3, #7
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001348:	f000 f9d6 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800134c:	bf00      	nop
 800134e:	37b0      	adds	r7, #176	@ 0xb0
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b2:	f000 f89b 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f002 fb7f 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff fd19 	bl	8000e48 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001424:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8001428:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800142c:	200002f0 	.word	0x200002f0

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>
	...

08001434 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_Init+0x3c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_Init+0x3c>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f920 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f80f 	bl	8001474 <HAL_InitTick>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	e001      	b.n	8001466 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001462:	f7ff fefb 	bl	800125c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001466:	79fb      	ldrb	r3, [r7, #7]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_InitTick+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <HAL_InitTick+0x70>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_InitTick+0x6c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f91d 	bl	80016de <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d809      	bhi.n	80014c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b8:	f000 f8f5 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014bc:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_InitTick+0x74>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e004      	b.n	80014d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e001      	b.n	80014d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000058 	.word	0x20000058
 80014e4:	20000050 	.word	0x20000050
 80014e8:	20000054 	.word	0x20000054

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000058 	.word	0x20000058
 8001510:	200002ec 	.word	0x200002ec

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200002ec 	.word	0x200002ec

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff47 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5c 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb0 	bl	800164c <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e17f      	b.n	8001a08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8171 	beq.w	8001a02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0201 	and.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d118      	bne.n	80017d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	6939      	ldr	r1, [r7, #16]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80ac 	beq.w	8001a02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001a28 <HAL_GPIO_Init+0x330>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001a28 <HAL_GPIO_Init+0x330>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a28 <HAL_GPIO_Init+0x330>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a2c <HAL_GPIO_Init+0x334>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x242>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a30 <HAL_GPIO_Init+0x338>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x23e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a34 <HAL_GPIO_Init+0x33c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x23a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	@ (8001a38 <HAL_GPIO_Init+0x340>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x236>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	@ (8001a3c <HAL_GPIO_Init+0x344>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x232>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	@ (8001a40 <HAL_GPIO_Init+0x348>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	@ (8001a44 <HAL_GPIO_Init+0x34c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x22a>
 800191e:	2306      	movs	r3, #6
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001922:	2307      	movs	r3, #7
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x244>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x244>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x244>
 800193a:	2300      	movs	r3, #0
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194c:	4937      	ldr	r1, [pc, #220]	@ (8001a2c <HAL_GPIO_Init+0x334>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f ae78 	bne.w	8001708 <HAL_GPIO_Init+0x10>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000c00 	.word	0x48000c00
 8001a3c:	48001000 	.word	0x48001000
 8001a40:	48001400 	.word	0x48001400
 8001a44:	48001800 	.word	0x48001800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000

08001a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aa6:	d130      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa8:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ab4:	d038      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001abe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2232      	movs	r2, #50	@ 0x32
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001adc:	e002      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af0:	d102      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f2      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b04:	d110      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e00f      	b.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b16:	d007      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b20:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	20000050 	.word	0x20000050
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3ca      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b97      	ldr	r3, [pc, #604]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b94      	ldr	r3, [pc, #592]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e4 	beq.w	8001d40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4a>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	f040 808b 	bne.w	8001c9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 8087 	bne.w	8001c9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b8e:	4b89      	ldr	r3, [pc, #548]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x62>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e3a2      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	4b82      	ldr	r3, [pc, #520]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x7c>
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_OscConfig+0x88>
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d223      	bcs.n	8001c18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd55 	bl	8002684 <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e383      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be4:	4b73      	ldr	r3, [pc, #460]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a72      	ldr	r2, [pc, #456]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b70      	ldr	r3, [pc, #448]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	496d      	ldr	r1, [pc, #436]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c02:	4b6c      	ldr	r3, [pc, #432]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4968      	ldr	r1, [pc, #416]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
 8001c16:	e025      	b.n	8001c64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c18:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4960      	ldr	r1, [pc, #384]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c36:	4b5f      	ldr	r3, [pc, #380]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	495b      	ldr	r1, [pc, #364]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fd15 	bl	8002684 <RCC_SetFlashLatencyFromMSIRange>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e343      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c64:	f000 fc4a 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4950      	ldr	r1, [pc, #320]	@ (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	4a4e      	ldr	r2, [pc, #312]	@ (8001dbc <HAL_RCC_OscConfig+0x278>)
 8001c82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c84:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc0 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fbf3 	bl	8001474 <HAL_InitTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d052      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	e327      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a42      	ldr	r2, [pc, #264]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc30 	bl	8001514 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc2c 	bl	8001514 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e310      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a36      	ldr	r2, [pc, #216]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4931      	ldr	r1, [pc, #196]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	492c      	ldr	r1, [pc, #176]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e01a      	b.n	8001d40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fbfd 	bl	8001514 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fbf9 	bl	8001514 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e2dd      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1da>
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d074      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x21a>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d10e      	bne.n	8001d76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d064      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d160      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e2ba      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x24a>
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e026      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x280>
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a02      	ldr	r2, [pc, #8]	@ (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08004bd0 	.word	0x08004bd0
 8001dbc:	20000050 	.word	0x20000050
 8001dc0:	20000054 	.word	0x20000054
 8001dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a9f      	ldr	r2, [pc, #636]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b9d      	ldr	r3, [pc, #628]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a9c      	ldr	r2, [pc, #624]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb96 	bl	8001514 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb92 	bl	8001514 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e276      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4b92      	ldr	r3, [pc, #584]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x2a8>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb82 	bl	8001514 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fb7e 	bl	8001514 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e262      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	4b88      	ldr	r3, [pc, #544]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2d0>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d060      	beq.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x310>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d116      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	4b7c      	ldr	r3, [pc, #496]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x328>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e23f      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	4973      	ldr	r1, [pc, #460]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	e040      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d023      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fb3d 	bl	8001514 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fb39 	bl	8001514 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e21d      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b65      	ldr	r3, [pc, #404]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b62      	ldr	r3, [pc, #392]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	495f      	ldr	r1, [pc, #380]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
 8001ed0:	e018      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb19 	bl	8001514 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fb15 	bl	8001514 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f9      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef8:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f18:	4b4b      	ldr	r3, [pc, #300]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff faf4 	bl	8001514 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7ff faf0 	bl	8001514 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1d4      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ef      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3ec>
 8001f50:	e01b      	b.n	8001f8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f58:	4a3b      	ldr	r2, [pc, #236]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fad7 	bl	8001514 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fad3 	bl	8001514 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1b7      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ef      	bne.n	8001f6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a6 	beq.w	80020e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb4:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_RCC_OscConfig+0x508>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d118      	bne.n	8002002 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_RCC_OscConfig+0x508>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_RCC_OscConfig+0x508>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fa9a 	bl	8001514 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7ff fa96 	bl	8001514 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_RCC_OscConfig+0x508>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x4d8>
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800201a:	e029      	b.n	8002070 <HAL_RCC_OscConfig+0x52c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d115      	bne.n	8002050 <HAL_RCC_OscConfig+0x50c>
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a03      	ldr	r2, [pc, #12]	@ (8002048 <HAL_RCC_OscConfig+0x504>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002044:	e014      	b.n	8002070 <HAL_RCC_OscConfig+0x52c>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	4b9c      	ldr	r3, [pc, #624]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a9b      	ldr	r2, [pc, #620]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	4b98      	ldr	r3, [pc, #608]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a97      	ldr	r2, [pc, #604]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fa4c 	bl	8001514 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fa48 	bl	8001514 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e12a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b8b      	ldr	r3, [pc, #556]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ed      	beq.n	8002080 <HAL_RCC_OscConfig+0x53c>
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff fa35 	bl	8001514 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fa31 	bl	8001514 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e113      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ed      	bne.n	80020ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b7a      	ldr	r3, [pc, #488]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a79      	ldr	r2, [pc, #484]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80fe 	beq.w	80022ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	f040 80d0 	bne.w	8002298 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f8:	4b72      	ldr	r3, [pc, #456]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	429a      	cmp	r2, r3
 800210a:	d130      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d127      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002128:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11f      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002138:	2a07      	cmp	r2, #7
 800213a:	bf14      	ite	ne
 800213c:	2201      	movne	r2, #1
 800213e:	2200      	moveq	r2, #0
 8002140:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002142:	4293      	cmp	r3, r2
 8002144:	d113      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d109      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d06e      	beq.n	800224c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d069      	beq.n	8002248 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002174:	4b53      	ldr	r3, [pc, #332]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002180:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0ad      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002190:	4b4c      	ldr	r3, [pc, #304]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4b      	ldr	r2, [pc, #300]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219c:	f7ff f9ba 	bl	8001514 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f9b6 	bl	8001514 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e09a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b6:	4b43      	ldr	r3, [pc, #268]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4b40      	ldr	r3, [pc, #256]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <HAL_RCC_OscConfig+0x784>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021d2:	3a01      	subs	r2, #1
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021dc:	0212      	lsls	r2, r2, #8
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021e4:	0852      	lsrs	r2, r2, #1
 80021e6:	3a01      	subs	r2, #1
 80021e8:	0552      	lsls	r2, r2, #21
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021f0:	0852      	lsrs	r2, r2, #1
 80021f2:	3a01      	subs	r2, #1
 80021f4:	0652      	lsls	r2, r2, #25
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021fc:	0912      	lsrs	r2, r2, #4
 80021fe:	0452      	lsls	r2, r2, #17
 8002200:	430a      	orrs	r2, r1
 8002202:	4930      	ldr	r1, [pc, #192]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002214:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a2a      	ldr	r2, [pc, #168]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002220:	f7ff f978 	bl	8001514 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f974 	bl	8001514 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e058      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002246:	e050      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e04f      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d148      	bne.n	80022ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002258:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002264:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800226e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002270:	f7ff f950 	bl	8001514 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff f94c 	bl	8001514 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e030      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x734>
 8002296:	e028      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d023      	beq.n	80022e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_RCC_OscConfig+0x780>)
 80022a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f933 	bl	8001514 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	e00c      	b.n	80022cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f92f 	bl	8001514 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d905      	bls.n	80022cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ec      	bne.n	80022b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4905      	ldr	r1, [pc, #20]	@ (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_RCC_OscConfig+0x7b4>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
 80022e4:	e001      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	feeefffc 	.word	0xfeeefffc

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0e7      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4970      	ldr	r1, [pc, #448]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b6e      	ldr	r3, [pc, #440]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cf      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d010      	beq.n	800236e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002358:	429a      	cmp	r2, r3
 800235a:	d908      	bls.n	800236e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4960      	ldr	r1, [pc, #384]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d04c      	beq.n	8002414 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b5a      	ldr	r3, [pc, #360]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0a6      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b2:	4b4e      	ldr	r3, [pc, #312]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e086      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b46      	ldr	r3, [pc, #280]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4943      	ldr	r1, [pc, #268]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7ff f896 	bl	8001514 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff f892 	bl	8001514 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800242c:	429a      	cmp	r2, r3
 800242e:	d208      	bcs.n	8002442 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	492b      	ldr	r1, [pc, #172]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d210      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002450:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 0207 	bic.w	r2, r3, #7
 8002458:	4923      	ldr	r1, [pc, #140]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e036      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4918      	ldr	r1, [pc, #96]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4910      	ldr	r1, [pc, #64]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f000 f824 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	490b      	ldr	r1, [pc, #44]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f4>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1fc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe ffcd 	bl	8001474 <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024de:	7afb      	ldrb	r3, [r7, #11]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004bd0 	.word	0x08004bd0
 80024f4:	20000050 	.word	0x20000050
 80024f8:	20000054 	.word	0x20000054

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250a:	4b3e      	ldr	r3, [pc, #248]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002514:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d121      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11e      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002530:	4b34      	ldr	r3, [pc, #208]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800253c:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e005      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800254c:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002558:	4a2b      	ldr	r2, [pc, #172]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x10c>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d102      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002574:	4b25      	ldr	r3, [pc, #148]	@ (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e004      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d101      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 8002582:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d134      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xac>
 80025a0:	e005      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	@ (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 80025a4:	617b      	str	r3, [r7, #20]
      break;
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a8:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 80025aa:	617b      	str	r3, [r7, #20]
      break;
 80025ac:	e002      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	617b      	str	r3, [r7, #20]
      break;
 80025b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0e5b      	lsrs	r3, r3, #25
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	3301      	adds	r3, #1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f4:	69bb      	ldr	r3, [r7, #24]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	08004be8 	.word	0x08004be8
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000050 	.word	0x20000050

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4904      	ldr	r1, [pc, #16]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	08004be0 	.word	0x08004be0

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800265c:	f7ff ffda 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0adb      	lsrs	r3, r3, #11
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4904      	ldr	r1, [pc, #16]	@ (8002680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	08004be0 	.word	0x08004be0

08002684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002690:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800269c:	f7ff f9ee 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 80026a0:	6178      	str	r0, [r7, #20]
 80026a2:	e014      	b.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b25      	ldr	r3, [pc, #148]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	4a24      	ldr	r2, [pc, #144]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026bc:	f7ff f9de 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 80026c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d4:	d10b      	bne.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b80      	cmp	r3, #128	@ 0x80
 80026da:	d919      	bls.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2ba0      	cmp	r3, #160	@ 0xa0
 80026e0:	d902      	bls.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e2:	2302      	movs	r3, #2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e013      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e8:	2301      	movs	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e010      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b80      	cmp	r3, #128	@ 0x80
 80026f2:	d902      	bls.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f4:	2303      	movs	r3, #3
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e00a      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b80      	cmp	r3, #128	@ 0x80
 80026fe:	d102      	bne.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002700:	2302      	movs	r3, #2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e004      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b70      	cmp	r3, #112	@ 0x70
 800270a:	d101      	bne.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800270c:	2301      	movs	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 0207 	bic.w	r2, r3, #7
 8002718:	4909      	ldr	r1, [pc, #36]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002720:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40022000 	.word	0x40022000

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800274c:	2300      	movs	r3, #0
 800274e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002750:	2300      	movs	r3, #0
 8002752:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d041      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002764:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002768:	d02a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800276a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800276e:	d824      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800277a:	d81e      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002784:	d010      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002786:	e018      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002788:	4b86      	ldr	r3, [pc, #536]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a85      	ldr	r2, [pc, #532]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002792:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002794:	e015      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fabb 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a6:	e00c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3320      	adds	r3, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fba6 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	74fb      	strb	r3, [r7, #19]
      break;
 80027be:	e000      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c8:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d6:	4973      	ldr	r1, [pc, #460]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027de:	e001      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d041      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f8:	d02a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027fe:	d824      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800280a:	d81e      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002814:	d010      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002818:	4b62      	ldr	r3, [pc, #392]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a61      	ldr	r2, [pc, #388]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002822:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002824:	e015      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa73 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002836:	e00c      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3320      	adds	r3, #32
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fb5e 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	74fb      	strb	r3, [r7, #19]
      break;
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002858:	4b52      	ldr	r3, [pc, #328]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002866:	494f      	ldr	r1, [pc, #316]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a0 	beq.w	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002886:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b41      	ldr	r3, [pc, #260]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	4a40      	ldr	r2, [pc, #256]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a8:	4b3e      	ldr	r3, [pc, #248]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b8:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3a      	ldr	r2, [pc, #232]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fe26 	bl	8001514 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ca:	e009      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fe22 	bl	8001514 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	74fb      	strb	r3, [r7, #19]
        break;
 80028de:	e005      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028e0:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ef      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d15c      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028f2:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01f      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	d019      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	4a20      	ldr	r2, [pc, #128]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800293c:	4a19      	ldr	r2, [pc, #100]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fde1 	bl	8001514 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002954:	e00b      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fddd 	bl	8001514 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d902      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	74fb      	strb	r3, [r7, #19]
            break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ec      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002992:	4904      	ldr	r1, [pc, #16]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800299a:	e009      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
 80029a0:	e006      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b0:	7c7b      	ldrb	r3, [r7, #17]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b9e      	ldr	r3, [pc, #632]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	4a9d      	ldr	r2, [pc, #628]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ce:	4b98      	ldr	r3, [pc, #608]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f023 0203 	bic.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	4994      	ldr	r1, [pc, #592]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f023 020c 	bic.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	498c      	ldr	r1, [pc, #560]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a12:	4b87      	ldr	r3, [pc, #540]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	4983      	ldr	r1, [pc, #524]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a34:	4b7e      	ldr	r3, [pc, #504]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	497b      	ldr	r1, [pc, #492]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a56:	4b76      	ldr	r3, [pc, #472]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a64:	4972      	ldr	r1, [pc, #456]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a78:	4b6d      	ldr	r3, [pc, #436]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	496a      	ldr	r1, [pc, #424]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa8:	4961      	ldr	r1, [pc, #388]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002abc:	4b5c      	ldr	r3, [pc, #368]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aca:	4959      	ldr	r1, [pc, #356]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ade:	4b54      	ldr	r3, [pc, #336]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aec:	4950      	ldr	r1, [pc, #320]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b00:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	4948      	ldr	r1, [pc, #288]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b22:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	493f      	ldr	r1, [pc, #252]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d028      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b44:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b52:	4937      	ldr	r1, [pc, #220]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a31      	ldr	r2, [pc, #196]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	e011      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f8c8 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	491f      	ldr	r1, [pc, #124]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bcc:	60d3      	str	r3, [r2, #12]
 8002bce:	e011      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f899 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02b      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0e:	4908      	ldr	r1, [pc, #32]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c1e:	d109      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a02      	ldr	r2, [pc, #8]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
 8002c2c:	e014      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f867 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02f      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c72:	4928      	ldr	r1, [pc, #160]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f844 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	74bb      	strb	r3, [r7, #18]
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3320      	adds	r3, #32
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f925 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cd0:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cde:	490d      	ldr	r1, [pc, #52]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d02:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d26:	4b75      	ldr	r3, [pc, #468]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0203 	and.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
       ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
       ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d047      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e044      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d018      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x86>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d825      	bhi.n	8002dbc <RCCEx_PLLSAI1_Config+0xa4>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <RCCEx_PLLSAI1_Config+0x62>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d009      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x74>
 8002d78:	e020      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d7a:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8a:	e01a      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e013      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9e:	4b57      	ldr	r3, [pc, #348]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002daa:	4b54      	ldr	r3, [pc, #336]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dba:	e006      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc0:	e004      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	430b      	orrs	r3, r1
 8002de8:	4944      	ldr	r1, [pc, #272]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d17d      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a40      	ldr	r2, [pc, #256]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e00:	f7fe fb88 	bl	8001514 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e06:	e009      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e08:	f7fe fb84 	bl	8001514 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	73fb      	strb	r3, [r7, #15]
        break;
 8002e1a:	e005      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1c:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ef      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d160      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	0211      	lsls	r1, r2, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	0912      	lsrs	r2, r2, #4
 8002e4c:	0452      	lsls	r2, r2, #17
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	492a      	ldr	r1, [pc, #168]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]
 8002e56:	e027      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d112      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5e:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	0211      	lsls	r1, r2, #8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6912      	ldr	r2, [r2, #16]
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	3a01      	subs	r2, #1
 8002e78:	0552      	lsls	r2, r2, #21
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	491f      	ldr	r1, [pc, #124]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	610b      	str	r3, [r1, #16]
 8002e82:	e011      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6952      	ldr	r2, [r2, #20]
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0652      	lsls	r2, r2, #25
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	4916      	ldr	r1, [pc, #88]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fb2e 	bl	8001514 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eba:	e009      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ebc:	f7fe fb2a 	bl	8001514 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ece:	e005      	b.n	8002edc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4904      	ldr	r1, [pc, #16]	@ (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f1a:	4b67      	ldr	r3, [pc, #412]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10d      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f32:	4b61      	ldr	r3, [pc, #388]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
       ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d047      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e044      	b.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d018      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x86>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d825      	bhi.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <RCCEx_PLLSAI2_Config+0x62>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <RCCEx_PLLSAI2_Config+0x74>
 8002f60:	e020      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e01a      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b50      	ldr	r3, [pc, #320]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e013      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa2:	e006      	b.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e004      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fba:	4b3f      	ldr	r3, [pc, #252]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	4939      	ldr	r1, [pc, #228]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d167      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a35      	ldr	r2, [pc, #212]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fa94 	bl	8001514 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff0:	f7fe fa90 	bl	8001514 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e005      	b.n	8003010 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003004:	4b2c      	ldr	r3, [pc, #176]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ef      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d14a      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800301c:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	0211      	lsls	r1, r2, #8
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	0912      	lsrs	r2, r2, #4
 8003034:	0452      	lsls	r2, r2, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	491f      	ldr	r1, [pc, #124]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	614b      	str	r3, [r1, #20]
 800303e:	e011      	b.n	8003064 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003048:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	0211      	lsls	r1, r2, #8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6912      	ldr	r2, [r2, #16]
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0652      	lsls	r2, r2, #25
 800305c:	430a      	orrs	r2, r1
 800305e:	4916      	ldr	r1, [pc, #88]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a13      	ldr	r2, [pc, #76]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fa50 	bl	8001514 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fe fa4c 	bl	8001514 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
          break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ef      	beq.n	8003078 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4904      	ldr	r1, [pc, #16]	@ (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e040      	b.n	8003150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe f8e0 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fae0 	bl	80036c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f825 	bl	8003158 <UART_SetConfig>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e01b      	b.n	8003150 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fb5f 	bl	800380c <UART_CheckIdleState>
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800315c:	b08a      	sub	sp, #40	@ 0x28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4ba4      	ldr	r3, [pc, #656]	@ (8003418 <UART_SetConfig+0x2c0>)
 8003188:	4013      	ands	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003190:	430b      	orrs	r3, r1
 8003192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a99      	ldr	r2, [pc, #612]	@ (800341c <UART_SetConfig+0x2c4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c0:	4313      	orrs	r3, r2
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a90      	ldr	r2, [pc, #576]	@ (8003420 <UART_SetConfig+0x2c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d126      	bne.n	8003230 <UART_SetConfig+0xd8>
 80031e2:	4b90      	ldr	r3, [pc, #576]	@ (8003424 <UART_SetConfig+0x2cc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d81b      	bhi.n	8003228 <UART_SetConfig+0xd0>
 80031f0:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0xa0>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003219 	.word	0x08003219
 8003200:	08003211 	.word	0x08003211
 8003204:	08003221 	.word	0x08003221
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e116      	b.n	800343e <UART_SetConfig+0x2e6>
 8003210:	2302      	movs	r3, #2
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e112      	b.n	800343e <UART_SetConfig+0x2e6>
 8003218:	2304      	movs	r3, #4
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e10e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003220:	2308      	movs	r3, #8
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e10a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003228:	2310      	movs	r3, #16
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e106      	b.n	800343e <UART_SetConfig+0x2e6>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7c      	ldr	r2, [pc, #496]	@ (8003428 <UART_SetConfig+0x2d0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d138      	bne.n	80032ac <UART_SetConfig+0x154>
 800323a:	4b7a      	ldr	r3, [pc, #488]	@ (8003424 <UART_SetConfig+0x2cc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d82d      	bhi.n	80032a4 <UART_SetConfig+0x14c>
 8003248:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <UART_SetConfig+0xf8>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003285 	.word	0x08003285
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032a5 	.word	0x080032a5
 800325c:	080032a5 	.word	0x080032a5
 8003260:	08003295 	.word	0x08003295
 8003264:	080032a5 	.word	0x080032a5
 8003268:	080032a5 	.word	0x080032a5
 800326c:	080032a5 	.word	0x080032a5
 8003270:	0800328d 	.word	0x0800328d
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032a5 	.word	0x080032a5
 800327c:	080032a5 	.word	0x080032a5
 8003280:	0800329d 	.word	0x0800329d
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328a:	e0d8      	b.n	800343e <UART_SetConfig+0x2e6>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e0d4      	b.n	800343e <UART_SetConfig+0x2e6>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329a:	e0d0      	b.n	800343e <UART_SetConfig+0x2e6>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a2:	e0cc      	b.n	800343e <UART_SetConfig+0x2e6>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e0c8      	b.n	800343e <UART_SetConfig+0x2e6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5e      	ldr	r2, [pc, #376]	@ (800342c <UART_SetConfig+0x2d4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d125      	bne.n	8003302 <UART_SetConfig+0x1aa>
 80032b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003424 <UART_SetConfig+0x2cc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032c0:	2b30      	cmp	r3, #48	@ 0x30
 80032c2:	d016      	beq.n	80032f2 <UART_SetConfig+0x19a>
 80032c4:	2b30      	cmp	r3, #48	@ 0x30
 80032c6:	d818      	bhi.n	80032fa <UART_SetConfig+0x1a2>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d00a      	beq.n	80032e2 <UART_SetConfig+0x18a>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d814      	bhi.n	80032fa <UART_SetConfig+0x1a2>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <UART_SetConfig+0x182>
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d008      	beq.n	80032ea <UART_SetConfig+0x192>
 80032d8:	e00f      	b.n	80032fa <UART_SetConfig+0x1a2>
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e0:	e0ad      	b.n	800343e <UART_SetConfig+0x2e6>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e8:	e0a9      	b.n	800343e <UART_SetConfig+0x2e6>
 80032ea:	2304      	movs	r3, #4
 80032ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f0:	e0a5      	b.n	800343e <UART_SetConfig+0x2e6>
 80032f2:	2308      	movs	r3, #8
 80032f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f8:	e0a1      	b.n	800343e <UART_SetConfig+0x2e6>
 80032fa:	2310      	movs	r3, #16
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003300:	e09d      	b.n	800343e <UART_SetConfig+0x2e6>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4a      	ldr	r2, [pc, #296]	@ (8003430 <UART_SetConfig+0x2d8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d125      	bne.n	8003358 <UART_SetConfig+0x200>
 800330c:	4b45      	ldr	r3, [pc, #276]	@ (8003424 <UART_SetConfig+0x2cc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003316:	2bc0      	cmp	r3, #192	@ 0xc0
 8003318:	d016      	beq.n	8003348 <UART_SetConfig+0x1f0>
 800331a:	2bc0      	cmp	r3, #192	@ 0xc0
 800331c:	d818      	bhi.n	8003350 <UART_SetConfig+0x1f8>
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d00a      	beq.n	8003338 <UART_SetConfig+0x1e0>
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d814      	bhi.n	8003350 <UART_SetConfig+0x1f8>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <UART_SetConfig+0x1d8>
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d008      	beq.n	8003340 <UART_SetConfig+0x1e8>
 800332e:	e00f      	b.n	8003350 <UART_SetConfig+0x1f8>
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003336:	e082      	b.n	800343e <UART_SetConfig+0x2e6>
 8003338:	2302      	movs	r3, #2
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e07e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003340:	2304      	movs	r3, #4
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003346:	e07a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003348:	2308      	movs	r3, #8
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334e:	e076      	b.n	800343e <UART_SetConfig+0x2e6>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003356:	e072      	b.n	800343e <UART_SetConfig+0x2e6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	@ (8003434 <UART_SetConfig+0x2dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12a      	bne.n	80033b8 <UART_SetConfig+0x260>
 8003362:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <UART_SetConfig+0x2cc>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003370:	d01a      	beq.n	80033a8 <UART_SetConfig+0x250>
 8003372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003376:	d81b      	bhi.n	80033b0 <UART_SetConfig+0x258>
 8003378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800337c:	d00c      	beq.n	8003398 <UART_SetConfig+0x240>
 800337e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003382:	d815      	bhi.n	80033b0 <UART_SetConfig+0x258>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x238>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338c:	d008      	beq.n	80033a0 <UART_SetConfig+0x248>
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x258>
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e052      	b.n	800343e <UART_SetConfig+0x2e6>
 8003398:	2302      	movs	r3, #2
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e04e      	b.n	800343e <UART_SetConfig+0x2e6>
 80033a0:	2304      	movs	r3, #4
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a6:	e04a      	b.n	800343e <UART_SetConfig+0x2e6>
 80033a8:	2308      	movs	r3, #8
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ae:	e046      	b.n	800343e <UART_SetConfig+0x2e6>
 80033b0:	2310      	movs	r3, #16
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e042      	b.n	800343e <UART_SetConfig+0x2e6>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a17      	ldr	r2, [pc, #92]	@ (800341c <UART_SetConfig+0x2c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d13a      	bne.n	8003438 <UART_SetConfig+0x2e0>
 80033c2:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <UART_SetConfig+0x2cc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033d0:	d01a      	beq.n	8003408 <UART_SetConfig+0x2b0>
 80033d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033d6:	d81b      	bhi.n	8003410 <UART_SetConfig+0x2b8>
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033dc:	d00c      	beq.n	80033f8 <UART_SetConfig+0x2a0>
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e2:	d815      	bhi.n	8003410 <UART_SetConfig+0x2b8>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <UART_SetConfig+0x298>
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ec:	d008      	beq.n	8003400 <UART_SetConfig+0x2a8>
 80033ee:	e00f      	b.n	8003410 <UART_SetConfig+0x2b8>
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e022      	b.n	800343e <UART_SetConfig+0x2e6>
 80033f8:	2302      	movs	r3, #2
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e01e      	b.n	800343e <UART_SetConfig+0x2e6>
 8003400:	2304      	movs	r3, #4
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e01a      	b.n	800343e <UART_SetConfig+0x2e6>
 8003408:	2308      	movs	r3, #8
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e016      	b.n	800343e <UART_SetConfig+0x2e6>
 8003410:	2310      	movs	r3, #16
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e012      	b.n	800343e <UART_SetConfig+0x2e6>
 8003418:	efff69f3 	.word	0xefff69f3
 800341c:	40008000 	.word	0x40008000
 8003420:	40013800 	.word	0x40013800
 8003424:	40021000 	.word	0x40021000
 8003428:	40004400 	.word	0x40004400
 800342c:	40004800 	.word	0x40004800
 8003430:	40004c00 	.word	0x40004c00
 8003434:	40005000 	.word	0x40005000
 8003438:	2310      	movs	r3, #16
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a9f      	ldr	r2, [pc, #636]	@ (80036c0 <UART_SetConfig+0x568>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d17a      	bne.n	800353e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003448:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800344c:	2b08      	cmp	r3, #8
 800344e:	d824      	bhi.n	800349a <UART_SetConfig+0x342>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <UART_SetConfig+0x300>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800349b 	.word	0x0800349b
 8003460:	08003485 	.word	0x08003485
 8003464:	0800349b 	.word	0x0800349b
 8003468:	0800348b 	.word	0x0800348b
 800346c:	0800349b 	.word	0x0800349b
 8003470:	0800349b 	.word	0x0800349b
 8003474:	0800349b 	.word	0x0800349b
 8003478:	08003493 	.word	0x08003493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7ff f8d6 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8003480:	61f8      	str	r0, [r7, #28]
        break;
 8003482:	e010      	b.n	80034a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003484:	4b8f      	ldr	r3, [pc, #572]	@ (80036c4 <UART_SetConfig+0x56c>)
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e00d      	b.n	80034a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348a:	f7ff f837 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 800348e:	61f8      	str	r0, [r7, #28]
        break;
 8003490:	e009      	b.n	80034a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003496:	61fb      	str	r3, [r7, #28]
        break;
 8003498:	e005      	b.n	80034a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80fb 	beq.w	80036a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d305      	bcc.n	80034ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d903      	bls.n	80034d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034d0:	e0e8      	b.n	80036a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2200      	movs	r2, #0
 80034d6:	461c      	mov	r4, r3
 80034d8:	4615      	mov	r5, r2
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	022b      	lsls	r3, r5, #8
 80034e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034e8:	0222      	lsls	r2, r4, #8
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	6849      	ldr	r1, [r1, #4]
 80034ee:	0849      	lsrs	r1, r1, #1
 80034f0:	2000      	movs	r0, #0
 80034f2:	4688      	mov	r8, r1
 80034f4:	4681      	mov	r9, r0
 80034f6:	eb12 0a08 	adds.w	sl, r2, r8
 80034fa:	eb43 0b09 	adc.w	fp, r3, r9
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800350c:	4650      	mov	r0, sl
 800350e:	4659      	mov	r1, fp
 8003510:	f7fd fa40 	bl	8000994 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003522:	d308      	bcc.n	8003536 <UART_SetConfig+0x3de>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352a:	d204      	bcs.n	8003536 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e0b6      	b.n	80036a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800353c:	e0b2      	b.n	80036a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003546:	d15e      	bne.n	8003606 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003548:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800354c:	2b08      	cmp	r3, #8
 800354e:	d828      	bhi.n	80035a2 <UART_SetConfig+0x44a>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <UART_SetConfig+0x400>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800357d 	.word	0x0800357d
 800355c:	08003585 	.word	0x08003585
 8003560:	0800358d 	.word	0x0800358d
 8003564:	080035a3 	.word	0x080035a3
 8003568:	08003593 	.word	0x08003593
 800356c:	080035a3 	.word	0x080035a3
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035a3 	.word	0x080035a3
 8003578:	0800359b 	.word	0x0800359b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357c:	f7ff f856 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8003580:	61f8      	str	r0, [r7, #28]
        break;
 8003582:	e014      	b.n	80035ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7ff f868 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8003588:	61f8      	str	r0, [r7, #28]
        break;
 800358a:	e010      	b.n	80035ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800358c:	4b4d      	ldr	r3, [pc, #308]	@ (80036c4 <UART_SetConfig+0x56c>)
 800358e:	61fb      	str	r3, [r7, #28]
        break;
 8003590:	e00d      	b.n	80035ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe ffb3 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8003596:	61f8      	str	r0, [r7, #28]
        break;
 8003598:	e009      	b.n	80035ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800359e:	61fb      	str	r3, [r7, #28]
        break;
 80035a0:	e005      	b.n	80035ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d077      	beq.n	80036a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005a      	lsls	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	441a      	add	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d916      	bls.n	80035fe <UART_SetConfig+0x4a6>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d6:	d212      	bcs.n	80035fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f023 030f 	bic.w	r3, r3, #15
 80035e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	8afb      	ldrh	r3, [r7, #22]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	8afa      	ldrh	r2, [r7, #22]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	e052      	b.n	80036a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003604:	e04e      	b.n	80036a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800360a:	2b08      	cmp	r3, #8
 800360c:	d827      	bhi.n	800365e <UART_SetConfig+0x506>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <UART_SetConfig+0x4bc>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003639 	.word	0x08003639
 8003618:	08003641 	.word	0x08003641
 800361c:	08003649 	.word	0x08003649
 8003620:	0800365f 	.word	0x0800365f
 8003624:	0800364f 	.word	0x0800364f
 8003628:	0800365f 	.word	0x0800365f
 800362c:	0800365f 	.word	0x0800365f
 8003630:	0800365f 	.word	0x0800365f
 8003634:	08003657 	.word	0x08003657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fff8 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 800363c:	61f8      	str	r0, [r7, #28]
        break;
 800363e:	e014      	b.n	800366a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003640:	f7ff f80a 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8003644:	61f8      	str	r0, [r7, #28]
        break;
 8003646:	e010      	b.n	800366a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <UART_SetConfig+0x56c>)
 800364a:	61fb      	str	r3, [r7, #28]
        break;
 800364c:	e00d      	b.n	800366a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364e:	f7fe ff55 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8003652:	61f8      	str	r0, [r7, #28]
        break;
 8003654:	e009      	b.n	800366a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	61fb      	str	r3, [r7, #28]
        break;
 800365c:	e005      	b.n	800366a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003668:	bf00      	nop
    }

    if (pclk != 0U)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d019      	beq.n	80036a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	085a      	lsrs	r2, r3, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d909      	bls.n	800369e <UART_SetConfig+0x546>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003690:	d205      	bcs.n	800369e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	e002      	b.n	80036a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3728      	adds	r7, #40	@ 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	40008000 	.word	0x40008000
 80036c4:	00f42400 	.word	0x00f42400

080036c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01a      	beq.n	80037de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c6:	d10a      	bne.n	80037de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b098      	sub	sp, #96	@ 0x60
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800381c:	f7fd fe7a 	bl	8001514 <HAL_GetTick>
 8003820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d12e      	bne.n	800388e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f88c 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d021      	beq.n	800388e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800385e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003868:	647b      	str	r3, [r7, #68]	@ 0x44
 800386a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800386e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e062      	b.n	8003954 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b04      	cmp	r3, #4
 800389a:	d149      	bne.n	8003930 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f856 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03c      	beq.n	8003930 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	623b      	str	r3, [r7, #32]
   return(result);
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e6      	bne.n	80038b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e011      	b.n	8003954 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3758      	adds	r7, #88	@ 0x58
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396c:	e04f      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003974:	d04b      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fd fdcd 	bl	8001514 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <UART_WaitOnFlagUntilTimeout+0x30>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e04e      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d037      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b80      	cmp	r3, #128	@ 0x80
 80039a2:	d034      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d031      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d110      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f838 	bl	8003a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2208      	movs	r2, #8
 80039ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e029      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e8:	d111      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f81e 	bl	8003a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d0a0      	beq.n	800396e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b095      	sub	sp, #84	@ 0x54
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e6      	bne.n	8003a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e5      	bne.n	8003a70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d118      	bne.n	8003ade <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f023 0310 	bic.w	r3, r3, #16
 8003ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e6      	bne.n	8003aac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003af2:	bf00      	nop
 8003af4:	3754      	adds	r7, #84	@ 0x54
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <memset>:
 8003afe:	4402      	add	r2, r0
 8003b00:	4603      	mov	r3, r0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d100      	bne.n	8003b08 <memset+0xa>
 8003b06:	4770      	bx	lr
 8003b08:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0c:	e7f9      	b.n	8003b02 <memset+0x4>
	...

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4d0d      	ldr	r5, [pc, #52]	@ (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	@ (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4d0b      	ldr	r5, [pc, #44]	@ (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	@ (8003b54 <__libc_init_array+0x44>)
 8003b24:	f001 f848 	bl	8004bb8 <_init>
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08004df8 	.word	0x08004df8
 8003b4c:	08004df8 	.word	0x08004df8
 8003b50:	08004df8 	.word	0x08004df8
 8003b54:	08004dfc 	.word	0x08004dfc

08003b58 <sin>:
 8003b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b5a:	ec53 2b10 	vmov	r2, r3, d0
 8003b5e:	4826      	ldr	r0, [pc, #152]	@ (8003bf8 <sin+0xa0>)
 8003b60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b64:	4281      	cmp	r1, r0
 8003b66:	d807      	bhi.n	8003b78 <sin+0x20>
 8003b68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003bf0 <sin+0x98>
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	b005      	add	sp, #20
 8003b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b74:	f000 b90c 	b.w	8003d90 <__kernel_sin>
 8003b78:	4820      	ldr	r0, [pc, #128]	@ (8003bfc <sin+0xa4>)
 8003b7a:	4281      	cmp	r1, r0
 8003b7c:	d908      	bls.n	8003b90 <sin+0x38>
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fc fc4f 	bl	8000424 <__aeabi_dsub>
 8003b86:	ec41 0b10 	vmov	d0, r0, r1
 8003b8a:	b005      	add	sp, #20
 8003b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b90:	4668      	mov	r0, sp
 8003b92:	f000 f9b9 	bl	8003f08 <__ieee754_rem_pio2>
 8003b96:	f000 0003 	and.w	r0, r0, #3
 8003b9a:	2801      	cmp	r0, #1
 8003b9c:	d00c      	beq.n	8003bb8 <sin+0x60>
 8003b9e:	2802      	cmp	r0, #2
 8003ba0:	d011      	beq.n	8003bc6 <sin+0x6e>
 8003ba2:	b9e8      	cbnz	r0, 8003be0 <sin+0x88>
 8003ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ba8:	ed9d 0b00 	vldr	d0, [sp]
 8003bac:	2001      	movs	r0, #1
 8003bae:	f000 f8ef 	bl	8003d90 <__kernel_sin>
 8003bb2:	ec51 0b10 	vmov	r0, r1, d0
 8003bb6:	e7e6      	b.n	8003b86 <sin+0x2e>
 8003bb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003bbc:	ed9d 0b00 	vldr	d0, [sp]
 8003bc0:	f000 f81e 	bl	8003c00 <__kernel_cos>
 8003bc4:	e7f5      	b.n	8003bb2 <sin+0x5a>
 8003bc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003bca:	ed9d 0b00 	vldr	d0, [sp]
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 f8de 	bl	8003d90 <__kernel_sin>
 8003bd4:	ec53 2b10 	vmov	r2, r3, d0
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003bde:	e7d2      	b.n	8003b86 <sin+0x2e>
 8003be0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003be4:	ed9d 0b00 	vldr	d0, [sp]
 8003be8:	f000 f80a 	bl	8003c00 <__kernel_cos>
 8003bec:	e7f2      	b.n	8003bd4 <sin+0x7c>
 8003bee:	bf00      	nop
	...
 8003bf8:	3fe921fb 	.word	0x3fe921fb
 8003bfc:	7fefffff 	.word	0x7fefffff

08003c00 <__kernel_cos>:
 8003c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	ec57 6b10 	vmov	r6, r7, d0
 8003c08:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003c0c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003c10:	ed8d 1b00 	vstr	d1, [sp]
 8003c14:	d206      	bcs.n	8003c24 <__kernel_cos+0x24>
 8003c16:	4630      	mov	r0, r6
 8003c18:	4639      	mov	r1, r7
 8003c1a:	f7fc fe43 	bl	80008a4 <__aeabi_d2iz>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	f000 8088 	beq.w	8003d34 <__kernel_cos+0x134>
 8003c24:	4632      	mov	r2, r6
 8003c26:	463b      	mov	r3, r7
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f7fc facc 	bl	80001c8 <__aeabi_dmul>
 8003c30:	4b51      	ldr	r3, [pc, #324]	@ (8003d78 <__kernel_cos+0x178>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	4604      	mov	r4, r0
 8003c36:	460d      	mov	r5, r1
 8003c38:	f7fc fac6 	bl	80001c8 <__aeabi_dmul>
 8003c3c:	a340      	add	r3, pc, #256	@ (adr r3, 8003d40 <__kernel_cos+0x140>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	4682      	mov	sl, r0
 8003c44:	468b      	mov	fp, r1
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fabd 	bl	80001c8 <__aeabi_dmul>
 8003c4e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003d48 <__kernel_cos+0x148>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f7fc fbe8 	bl	8000428 <__adddf3>
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f7fc fab4 	bl	80001c8 <__aeabi_dmul>
 8003c60:	a33b      	add	r3, pc, #236	@ (adr r3, 8003d50 <__kernel_cos+0x150>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fbdd 	bl	8000424 <__aeabi_dsub>
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	f7fc faab 	bl	80001c8 <__aeabi_dmul>
 8003c72:	a339      	add	r3, pc, #228	@ (adr r3, 8003d58 <__kernel_cos+0x158>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fbd6 	bl	8000428 <__adddf3>
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	462b      	mov	r3, r5
 8003c80:	f7fc faa2 	bl	80001c8 <__aeabi_dmul>
 8003c84:	a336      	add	r3, pc, #216	@ (adr r3, 8003d60 <__kernel_cos+0x160>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fbcb 	bl	8000424 <__aeabi_dsub>
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	f7fc fa99 	bl	80001c8 <__aeabi_dmul>
 8003c96:	a334      	add	r3, pc, #208	@ (adr r3, 8003d68 <__kernel_cos+0x168>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fbc4 	bl	8000428 <__adddf3>
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	f7fc fa90 	bl	80001c8 <__aeabi_dmul>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f7fc fa8c 	bl	80001c8 <__aeabi_dmul>
 8003cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	460d      	mov	r5, r1
 8003cb8:	4630      	mov	r0, r6
 8003cba:	4639      	mov	r1, r7
 8003cbc:	f7fc fa84 	bl	80001c8 <__aeabi_dmul>
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7fc fbac 	bl	8000424 <__aeabi_dsub>
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d7c <__kernel_cos+0x17c>)
 8003cce:	4598      	cmp	r8, r3
 8003cd0:	4606      	mov	r6, r0
 8003cd2:	460f      	mov	r7, r1
 8003cd4:	d810      	bhi.n	8003cf8 <__kernel_cos+0xf8>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4650      	mov	r0, sl
 8003cdc:	4659      	mov	r1, fp
 8003cde:	f7fc fba1 	bl	8000424 <__aeabi_dsub>
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4926      	ldr	r1, [pc, #152]	@ (8003d80 <__kernel_cos+0x180>)
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fc fb9b 	bl	8000424 <__aeabi_dsub>
 8003cee:	ec41 0b10 	vmov	d0, r0, r1
 8003cf2:	b003      	add	sp, #12
 8003cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf8:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <__kernel_cos+0x184>)
 8003cfa:	4921      	ldr	r1, [pc, #132]	@ (8003d80 <__kernel_cos+0x180>)
 8003cfc:	4598      	cmp	r8, r3
 8003cfe:	bf8c      	ite	hi
 8003d00:	4d21      	ldrhi	r5, [pc, #132]	@ (8003d88 <__kernel_cos+0x188>)
 8003d02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003d06:	2400      	movs	r4, #0
 8003d08:	4622      	mov	r2, r4
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fc fb89 	bl	8000424 <__aeabi_dsub>
 8003d12:	4622      	mov	r2, r4
 8003d14:	4680      	mov	r8, r0
 8003d16:	4689      	mov	r9, r1
 8003d18:	462b      	mov	r3, r5
 8003d1a:	4650      	mov	r0, sl
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	f7fc fb81 	bl	8000424 <__aeabi_dsub>
 8003d22:	4632      	mov	r2, r6
 8003d24:	463b      	mov	r3, r7
 8003d26:	f7fc fb7d 	bl	8000424 <__aeabi_dsub>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	e7da      	b.n	8003cea <__kernel_cos+0xea>
 8003d34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003d70 <__kernel_cos+0x170>
 8003d38:	e7db      	b.n	8003cf2 <__kernel_cos+0xf2>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	be8838d4 	.word	0xbe8838d4
 8003d44:	bda8fae9 	.word	0xbda8fae9
 8003d48:	bdb4b1c4 	.word	0xbdb4b1c4
 8003d4c:	3e21ee9e 	.word	0x3e21ee9e
 8003d50:	809c52ad 	.word	0x809c52ad
 8003d54:	3e927e4f 	.word	0x3e927e4f
 8003d58:	19cb1590 	.word	0x19cb1590
 8003d5c:	3efa01a0 	.word	0x3efa01a0
 8003d60:	16c15177 	.word	0x16c15177
 8003d64:	3f56c16c 	.word	0x3f56c16c
 8003d68:	5555554c 	.word	0x5555554c
 8003d6c:	3fa55555 	.word	0x3fa55555
 8003d70:	00000000 	.word	0x00000000
 8003d74:	3ff00000 	.word	0x3ff00000
 8003d78:	3fe00000 	.word	0x3fe00000
 8003d7c:	3fd33332 	.word	0x3fd33332
 8003d80:	3ff00000 	.word	0x3ff00000
 8003d84:	3fe90000 	.word	0x3fe90000
 8003d88:	3fd20000 	.word	0x3fd20000
 8003d8c:	00000000 	.word	0x00000000

08003d90 <__kernel_sin>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	ec55 4b10 	vmov	r4, r5, d0
 8003d98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003da2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003da6:	4680      	mov	r8, r0
 8003da8:	d205      	bcs.n	8003db6 <__kernel_sin+0x26>
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f7fc fd79 	bl	80008a4 <__aeabi_d2iz>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d052      	beq.n	8003e5c <__kernel_sin+0xcc>
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc fa03 	bl	80001c8 <__aeabi_dmul>
 8003dc2:	4682      	mov	sl, r0
 8003dc4:	468b      	mov	fp, r1
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4620      	mov	r0, r4
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7fc f9fb 	bl	80001c8 <__aeabi_dmul>
 8003dd2:	a342      	add	r3, pc, #264	@ (adr r3, 8003edc <__kernel_sin+0x14c>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8003ddc:	4650      	mov	r0, sl
 8003dde:	4659      	mov	r1, fp
 8003de0:	f7fc f9f2 	bl	80001c8 <__aeabi_dmul>
 8003de4:	a33f      	add	r3, pc, #252	@ (adr r3, 8003ee4 <__kernel_sin+0x154>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f7fc fb1b 	bl	8000424 <__aeabi_dsub>
 8003dee:	4652      	mov	r2, sl
 8003df0:	465b      	mov	r3, fp
 8003df2:	f7fc f9e9 	bl	80001c8 <__aeabi_dmul>
 8003df6:	a33d      	add	r3, pc, #244	@ (adr r3, 8003eec <__kernel_sin+0x15c>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fb14 	bl	8000428 <__adddf3>
 8003e00:	4652      	mov	r2, sl
 8003e02:	465b      	mov	r3, fp
 8003e04:	f7fc f9e0 	bl	80001c8 <__aeabi_dmul>
 8003e08:	a33a      	add	r3, pc, #232	@ (adr r3, 8003ef4 <__kernel_sin+0x164>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fb09 	bl	8000424 <__aeabi_dsub>
 8003e12:	4652      	mov	r2, sl
 8003e14:	465b      	mov	r3, fp
 8003e16:	f7fc f9d7 	bl	80001c8 <__aeabi_dmul>
 8003e1a:	a338      	add	r3, pc, #224	@ (adr r3, 8003efc <__kernel_sin+0x16c>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fb02 	bl	8000428 <__adddf3>
 8003e24:	4606      	mov	r6, r0
 8003e26:	460f      	mov	r7, r1
 8003e28:	f1b8 0f00 	cmp.w	r8, #0
 8003e2c:	d11b      	bne.n	8003e66 <__kernel_sin+0xd6>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4650      	mov	r0, sl
 8003e34:	4659      	mov	r1, fp
 8003e36:	f7fc f9c7 	bl	80001c8 <__aeabi_dmul>
 8003e3a:	a325      	add	r3, pc, #148	@ (adr r3, 8003ed0 <__kernel_sin+0x140>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc faf0 	bl	8000424 <__aeabi_dsub>
 8003e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fae8 	bl	8000428 <__adddf3>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	ec45 4b10 	vmov	d0, r4, r5
 8003e60:	b005      	add	sp, #20
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <__kernel_sin+0x148>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f7fc f9ab 	bl	80001c8 <__aeabi_dmul>
 8003e72:	4632      	mov	r2, r6
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	463b      	mov	r3, r7
 8003e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e7e:	f7fc f9a3 	bl	80001c8 <__aeabi_dmul>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4640      	mov	r0, r8
 8003e88:	4649      	mov	r1, r9
 8003e8a:	f7fc facb 	bl	8000424 <__aeabi_dsub>
 8003e8e:	4652      	mov	r2, sl
 8003e90:	465b      	mov	r3, fp
 8003e92:	f7fc f999 	bl	80001c8 <__aeabi_dmul>
 8003e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e9a:	f7fc fac3 	bl	8000424 <__aeabi_dsub>
 8003e9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003ed0 <__kernel_sin+0x140>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eac:	f7fc f98c 	bl	80001c8 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc fab6 	bl	8000428 <__adddf3>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7fc faae 	bl	8000424 <__aeabi_dsub>
 8003ec8:	e7c6      	b.n	8003e58 <__kernel_sin+0xc8>
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	55555549 	.word	0x55555549
 8003ed4:	3fc55555 	.word	0x3fc55555
 8003ed8:	3fe00000 	.word	0x3fe00000
 8003edc:	5acfd57c 	.word	0x5acfd57c
 8003ee0:	3de5d93a 	.word	0x3de5d93a
 8003ee4:	8a2b9ceb 	.word	0x8a2b9ceb
 8003ee8:	3e5ae5e6 	.word	0x3e5ae5e6
 8003eec:	57b1fe7d 	.word	0x57b1fe7d
 8003ef0:	3ec71de3 	.word	0x3ec71de3
 8003ef4:	19c161d5 	.word	0x19c161d5
 8003ef8:	3f2a01a0 	.word	0x3f2a01a0
 8003efc:	1110f8a6 	.word	0x1110f8a6
 8003f00:	3f811111 	.word	0x3f811111
 8003f04:	00000000 	.word	0x00000000

08003f08 <__ieee754_rem_pio2>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	ec57 6b10 	vmov	r6, r7, d0
 8003f10:	4bc5      	ldr	r3, [pc, #788]	@ (8004228 <__ieee754_rem_pio2+0x320>)
 8003f12:	b08d      	sub	sp, #52	@ 0x34
 8003f14:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003f18:	4598      	cmp	r8, r3
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	9704      	str	r7, [sp, #16]
 8003f1e:	d807      	bhi.n	8003f30 <__ieee754_rem_pio2+0x28>
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	ed80 0b00 	vstr	d0, [r0]
 8003f28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	e028      	b.n	8003f82 <__ieee754_rem_pio2+0x7a>
 8003f30:	4bbe      	ldr	r3, [pc, #760]	@ (800422c <__ieee754_rem_pio2+0x324>)
 8003f32:	4598      	cmp	r8, r3
 8003f34:	d878      	bhi.n	8004028 <__ieee754_rem_pio2+0x120>
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	4dbd      	ldr	r5, [pc, #756]	@ (8004230 <__ieee754_rem_pio2+0x328>)
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80041f0 <__ieee754_rem_pio2+0x2e8>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	4639      	mov	r1, r7
 8003f46:	dd38      	ble.n	8003fba <__ieee754_rem_pio2+0xb2>
 8003f48:	f7fc fa6c 	bl	8000424 <__aeabi_dsub>
 8003f4c:	45a8      	cmp	r8, r5
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460f      	mov	r7, r1
 8003f52:	d01a      	beq.n	8003f8a <__ieee754_rem_pio2+0x82>
 8003f54:	a3a8      	add	r3, pc, #672	@ (adr r3, 80041f8 <__ieee754_rem_pio2+0x2f0>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc fa63 	bl	8000424 <__aeabi_dsub>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4680      	mov	r8, r0
 8003f64:	4689      	mov	r9, r1
 8003f66:	4630      	mov	r0, r6
 8003f68:	4639      	mov	r1, r7
 8003f6a:	f7fc fa5b 	bl	8000424 <__aeabi_dsub>
 8003f6e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80041f8 <__ieee754_rem_pio2+0x2f0>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc fa56 	bl	8000424 <__aeabi_dsub>
 8003f78:	e9c4 8900 	strd	r8, r9, [r4]
 8003f7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f80:	2501      	movs	r5, #1
 8003f82:	4628      	mov	r0, r5
 8003f84:	b00d      	add	sp, #52	@ 0x34
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	a39d      	add	r3, pc, #628	@ (adr r3, 8004200 <__ieee754_rem_pio2+0x2f8>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fa48 	bl	8000424 <__aeabi_dsub>
 8003f94:	a39c      	add	r3, pc, #624	@ (adr r3, 8004208 <__ieee754_rem_pio2+0x300>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	460f      	mov	r7, r1
 8003f9e:	f7fc fa41 	bl	8000424 <__aeabi_dsub>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4680      	mov	r8, r0
 8003fa8:	4689      	mov	r9, r1
 8003faa:	4630      	mov	r0, r6
 8003fac:	4639      	mov	r1, r7
 8003fae:	f7fc fa39 	bl	8000424 <__aeabi_dsub>
 8003fb2:	a395      	add	r3, pc, #596	@ (adr r3, 8004208 <__ieee754_rem_pio2+0x300>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	e7dc      	b.n	8003f74 <__ieee754_rem_pio2+0x6c>
 8003fba:	f7fc fa35 	bl	8000428 <__adddf3>
 8003fbe:	45a8      	cmp	r8, r5
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	460f      	mov	r7, r1
 8003fc4:	d018      	beq.n	8003ff8 <__ieee754_rem_pio2+0xf0>
 8003fc6:	a38c      	add	r3, pc, #560	@ (adr r3, 80041f8 <__ieee754_rem_pio2+0x2f0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fa2c 	bl	8000428 <__adddf3>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	4689      	mov	r9, r1
 8003fd8:	4630      	mov	r0, r6
 8003fda:	4639      	mov	r1, r7
 8003fdc:	f7fc fa22 	bl	8000424 <__aeabi_dsub>
 8003fe0:	a385      	add	r3, pc, #532	@ (adr r3, 80041f8 <__ieee754_rem_pio2+0x2f0>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fa1f 	bl	8000428 <__adddf3>
 8003fea:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003fee:	e9c4 8900 	strd	r8, r9, [r4]
 8003ff2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ff6:	e7c4      	b.n	8003f82 <__ieee754_rem_pio2+0x7a>
 8003ff8:	a381      	add	r3, pc, #516	@ (adr r3, 8004200 <__ieee754_rem_pio2+0x2f8>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fa13 	bl	8000428 <__adddf3>
 8004002:	a381      	add	r3, pc, #516	@ (adr r3, 8004208 <__ieee754_rem_pio2+0x300>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	4606      	mov	r6, r0
 800400a:	460f      	mov	r7, r1
 800400c:	f7fc fa0c 	bl	8000428 <__adddf3>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4680      	mov	r8, r0
 8004016:	4689      	mov	r9, r1
 8004018:	4630      	mov	r0, r6
 800401a:	4639      	mov	r1, r7
 800401c:	f7fc fa02 	bl	8000424 <__aeabi_dsub>
 8004020:	a379      	add	r3, pc, #484	@ (adr r3, 8004208 <__ieee754_rem_pio2+0x300>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	e7de      	b.n	8003fe6 <__ieee754_rem_pio2+0xde>
 8004028:	4b82      	ldr	r3, [pc, #520]	@ (8004234 <__ieee754_rem_pio2+0x32c>)
 800402a:	4598      	cmp	r8, r3
 800402c:	f200 80d1 	bhi.w	80041d2 <__ieee754_rem_pio2+0x2ca>
 8004030:	f000 f966 	bl	8004300 <fabs>
 8004034:	ec57 6b10 	vmov	r6, r7, d0
 8004038:	a375      	add	r3, pc, #468	@ (adr r3, 8004210 <__ieee754_rem_pio2+0x308>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	4630      	mov	r0, r6
 8004040:	4639      	mov	r1, r7
 8004042:	f7fc f8c1 	bl	80001c8 <__aeabi_dmul>
 8004046:	4b7c      	ldr	r3, [pc, #496]	@ (8004238 <__ieee754_rem_pio2+0x330>)
 8004048:	2200      	movs	r2, #0
 800404a:	f7fc f9ed 	bl	8000428 <__adddf3>
 800404e:	f7fc fc29 	bl	80008a4 <__aeabi_d2iz>
 8004052:	4605      	mov	r5, r0
 8004054:	f7fc fb34 	bl	80006c0 <__aeabi_i2d>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004060:	a363      	add	r3, pc, #396	@ (adr r3, 80041f0 <__ieee754_rem_pio2+0x2e8>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc f8af 	bl	80001c8 <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4630      	mov	r0, r6
 8004070:	4639      	mov	r1, r7
 8004072:	f7fc f9d7 	bl	8000424 <__aeabi_dsub>
 8004076:	a360      	add	r3, pc, #384	@ (adr r3, 80041f8 <__ieee754_rem_pio2+0x2f0>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	4682      	mov	sl, r0
 800407e:	468b      	mov	fp, r1
 8004080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004084:	f7fc f8a0 	bl	80001c8 <__aeabi_dmul>
 8004088:	2d1f      	cmp	r5, #31
 800408a:	4606      	mov	r6, r0
 800408c:	460f      	mov	r7, r1
 800408e:	dc0c      	bgt.n	80040aa <__ieee754_rem_pio2+0x1a2>
 8004090:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <__ieee754_rem_pio2+0x334>)
 8004092:	1e6a      	subs	r2, r5, #1
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	4543      	cmp	r3, r8
 800409a:	d006      	beq.n	80040aa <__ieee754_rem_pio2+0x1a2>
 800409c:	4632      	mov	r2, r6
 800409e:	463b      	mov	r3, r7
 80040a0:	4650      	mov	r0, sl
 80040a2:	4659      	mov	r1, fp
 80040a4:	f7fc f9be 	bl	8000424 <__aeabi_dsub>
 80040a8:	e00e      	b.n	80040c8 <__ieee754_rem_pio2+0x1c0>
 80040aa:	463b      	mov	r3, r7
 80040ac:	4632      	mov	r2, r6
 80040ae:	4650      	mov	r0, sl
 80040b0:	4659      	mov	r1, fp
 80040b2:	f7fc f9b7 	bl	8000424 <__aeabi_dsub>
 80040b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80040ba:	9305      	str	r3, [sp, #20]
 80040bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	dc02      	bgt.n	80040ce <__ieee754_rem_pio2+0x1c6>
 80040c8:	e9c4 0100 	strd	r0, r1, [r4]
 80040cc:	e039      	b.n	8004142 <__ieee754_rem_pio2+0x23a>
 80040ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8004200 <__ieee754_rem_pio2+0x2f8>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040d8:	f7fc f876 	bl	80001c8 <__aeabi_dmul>
 80040dc:	4606      	mov	r6, r0
 80040de:	460f      	mov	r7, r1
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4650      	mov	r0, sl
 80040e6:	4659      	mov	r1, fp
 80040e8:	f7fc f99c 	bl	8000424 <__aeabi_dsub>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4680      	mov	r8, r0
 80040f2:	4689      	mov	r9, r1
 80040f4:	4650      	mov	r0, sl
 80040f6:	4659      	mov	r1, fp
 80040f8:	f7fc f994 	bl	8000424 <__aeabi_dsub>
 80040fc:	4632      	mov	r2, r6
 80040fe:	463b      	mov	r3, r7
 8004100:	f7fc f990 	bl	8000424 <__aeabi_dsub>
 8004104:	a340      	add	r3, pc, #256	@ (adr r3, 8004208 <__ieee754_rem_pio2+0x300>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	4606      	mov	r6, r0
 800410c:	460f      	mov	r7, r1
 800410e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004112:	f7fc f859 	bl	80001c8 <__aeabi_dmul>
 8004116:	4632      	mov	r2, r6
 8004118:	463b      	mov	r3, r7
 800411a:	f7fc f983 	bl	8000424 <__aeabi_dsub>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4606      	mov	r6, r0
 8004124:	460f      	mov	r7, r1
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	f7fc f97b 	bl	8000424 <__aeabi_dsub>
 800412e:	9a05      	ldr	r2, [sp, #20]
 8004130:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b31      	cmp	r3, #49	@ 0x31
 8004138:	dc20      	bgt.n	800417c <__ieee754_rem_pio2+0x274>
 800413a:	e9c4 0100 	strd	r0, r1, [r4]
 800413e:	46c2      	mov	sl, r8
 8004140:	46cb      	mov	fp, r9
 8004142:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004146:	4650      	mov	r0, sl
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	4659      	mov	r1, fp
 800414e:	f7fc f969 	bl	8000424 <__aeabi_dsub>
 8004152:	463b      	mov	r3, r7
 8004154:	4632      	mov	r2, r6
 8004156:	f7fc f965 	bl	8000424 <__aeabi_dsub>
 800415a:	9b04      	ldr	r3, [sp, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004162:	f6bf af0e 	bge.w	8003f82 <__ieee754_rem_pio2+0x7a>
 8004166:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004170:	f8c4 8000 	str.w	r8, [r4]
 8004174:	60a0      	str	r0, [r4, #8]
 8004176:	60e3      	str	r3, [r4, #12]
 8004178:	426d      	negs	r5, r5
 800417a:	e702      	b.n	8003f82 <__ieee754_rem_pio2+0x7a>
 800417c:	a326      	add	r3, pc, #152	@ (adr r3, 8004218 <__ieee754_rem_pio2+0x310>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004186:	f7fc f81f 	bl	80001c8 <__aeabi_dmul>
 800418a:	4606      	mov	r6, r0
 800418c:	460f      	mov	r7, r1
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f7fc f945 	bl	8000424 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4682      	mov	sl, r0
 80041a0:	468b      	mov	fp, r1
 80041a2:	4640      	mov	r0, r8
 80041a4:	4649      	mov	r1, r9
 80041a6:	f7fc f93d 	bl	8000424 <__aeabi_dsub>
 80041aa:	4632      	mov	r2, r6
 80041ac:	463b      	mov	r3, r7
 80041ae:	f7fc f939 	bl	8000424 <__aeabi_dsub>
 80041b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004220 <__ieee754_rem_pio2+0x318>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	4606      	mov	r6, r0
 80041ba:	460f      	mov	r7, r1
 80041bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041c0:	f7fc f802 	bl	80001c8 <__aeabi_dmul>
 80041c4:	4632      	mov	r2, r6
 80041c6:	463b      	mov	r3, r7
 80041c8:	f7fc f92c 	bl	8000424 <__aeabi_dsub>
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	e764      	b.n	800409c <__ieee754_rem_pio2+0x194>
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <__ieee754_rem_pio2+0x338>)
 80041d4:	4598      	cmp	r8, r3
 80041d6:	d935      	bls.n	8004244 <__ieee754_rem_pio2+0x33c>
 80041d8:	4632      	mov	r2, r6
 80041da:	463b      	mov	r3, r7
 80041dc:	4630      	mov	r0, r6
 80041de:	4639      	mov	r1, r7
 80041e0:	f7fc f920 	bl	8000424 <__aeabi_dsub>
 80041e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041e8:	e9c4 0100 	strd	r0, r1, [r4]
 80041ec:	e69e      	b.n	8003f2c <__ieee754_rem_pio2+0x24>
 80041ee:	bf00      	nop
 80041f0:	54400000 	.word	0x54400000
 80041f4:	3ff921fb 	.word	0x3ff921fb
 80041f8:	1a626331 	.word	0x1a626331
 80041fc:	3dd0b461 	.word	0x3dd0b461
 8004200:	1a600000 	.word	0x1a600000
 8004204:	3dd0b461 	.word	0x3dd0b461
 8004208:	2e037073 	.word	0x2e037073
 800420c:	3ba3198a 	.word	0x3ba3198a
 8004210:	6dc9c883 	.word	0x6dc9c883
 8004214:	3fe45f30 	.word	0x3fe45f30
 8004218:	2e000000 	.word	0x2e000000
 800421c:	3ba3198a 	.word	0x3ba3198a
 8004220:	252049c1 	.word	0x252049c1
 8004224:	397b839a 	.word	0x397b839a
 8004228:	3fe921fb 	.word	0x3fe921fb
 800422c:	4002d97b 	.word	0x4002d97b
 8004230:	3ff921fb 	.word	0x3ff921fb
 8004234:	413921fb 	.word	0x413921fb
 8004238:	3fe00000 	.word	0x3fe00000
 800423c:	08004c18 	.word	0x08004c18
 8004240:	7fefffff 	.word	0x7fefffff
 8004244:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004248:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800424c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004250:	4630      	mov	r0, r6
 8004252:	460f      	mov	r7, r1
 8004254:	f7fc fb26 	bl	80008a4 <__aeabi_d2iz>
 8004258:	f7fc fa32 	bl	80006c0 <__aeabi_i2d>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004268:	f7fc f8dc 	bl	8000424 <__aeabi_dsub>
 800426c:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <__ieee754_rem_pio2+0x3f0>)
 800426e:	2200      	movs	r2, #0
 8004270:	f7fb ffaa 	bl	80001c8 <__aeabi_dmul>
 8004274:	460f      	mov	r7, r1
 8004276:	4606      	mov	r6, r0
 8004278:	f7fc fb14 	bl	80008a4 <__aeabi_d2iz>
 800427c:	f7fc fa20 	bl	80006c0 <__aeabi_i2d>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800428c:	f7fc f8ca 	bl	8000424 <__aeabi_dsub>
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <__ieee754_rem_pio2+0x3f0>)
 8004292:	2200      	movs	r2, #0
 8004294:	f7fb ff98 	bl	80001c8 <__aeabi_dmul>
 8004298:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800429c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80042a0:	f04f 0803 	mov.w	r8, #3
 80042a4:	2600      	movs	r6, #0
 80042a6:	2700      	movs	r7, #0
 80042a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80042ac:	4632      	mov	r2, r6
 80042ae:	463b      	mov	r3, r7
 80042b0:	46c2      	mov	sl, r8
 80042b2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80042b6:	f7fc fac3 	bl	8000840 <__aeabi_dcmpeq>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1f4      	bne.n	80042a8 <__ieee754_rem_pio2+0x3a0>
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <__ieee754_rem_pio2+0x3f4>)
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2302      	movs	r3, #2
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	462a      	mov	r2, r5
 80042c8:	4653      	mov	r3, sl
 80042ca:	4621      	mov	r1, r4
 80042cc:	a806      	add	r0, sp, #24
 80042ce:	f000 f81f 	bl	8004310 <__kernel_rem_pio2>
 80042d2:	9b04      	ldr	r3, [sp, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	4605      	mov	r5, r0
 80042d8:	f6bf ae53 	bge.w	8003f82 <__ieee754_rem_pio2+0x7a>
 80042dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80042e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042e4:	e9c4 2300 	strd	r2, r3, [r4]
 80042e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80042ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80042f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80042f4:	e740      	b.n	8004178 <__ieee754_rem_pio2+0x270>
 80042f6:	bf00      	nop
 80042f8:	41700000 	.word	0x41700000
 80042fc:	08004c98 	.word	0x08004c98

08004300 <fabs>:
 8004300:	ec51 0b10 	vmov	r0, r1, d0
 8004304:	4602      	mov	r2, r0
 8004306:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800430a:	ec43 2b10 	vmov	d0, r2, r3
 800430e:	4770      	bx	lr

08004310 <__kernel_rem_pio2>:
 8004310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	ed2d 8b02 	vpush	{d8}
 8004318:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800431c:	f112 0f14 	cmn.w	r2, #20
 8004320:	9306      	str	r3, [sp, #24]
 8004322:	9104      	str	r1, [sp, #16]
 8004324:	4bbe      	ldr	r3, [pc, #760]	@ (8004620 <__kernel_rem_pio2+0x310>)
 8004326:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004328:	9008      	str	r0, [sp, #32]
 800432a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	9b06      	ldr	r3, [sp, #24]
 8004332:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004336:	bfa8      	it	ge
 8004338:	1ed4      	subge	r4, r2, #3
 800433a:	9305      	str	r3, [sp, #20]
 800433c:	bfb2      	itee	lt
 800433e:	2400      	movlt	r4, #0
 8004340:	2318      	movge	r3, #24
 8004342:	fb94 f4f3 	sdivge	r4, r4, r3
 8004346:	f06f 0317 	mvn.w	r3, #23
 800434a:	fb04 3303 	mla	r3, r4, r3, r3
 800434e:	eb03 0b02 	add.w	fp, r3, r2
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	9a05      	ldr	r2, [sp, #20]
 8004356:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004610 <__kernel_rem_pio2+0x300>
 800435a:	eb03 0802 	add.w	r8, r3, r2
 800435e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004360:	1aa7      	subs	r7, r4, r2
 8004362:	ae20      	add	r6, sp, #128	@ 0x80
 8004364:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004368:	2500      	movs	r5, #0
 800436a:	4545      	cmp	r5, r8
 800436c:	dd13      	ble.n	8004396 <__kernel_rem_pio2+0x86>
 800436e:	9b06      	ldr	r3, [sp, #24]
 8004370:	aa20      	add	r2, sp, #128	@ 0x80
 8004372:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004376:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800437a:	f04f 0800 	mov.w	r8, #0
 800437e:	9b00      	ldr	r3, [sp, #0]
 8004380:	4598      	cmp	r8, r3
 8004382:	dc31      	bgt.n	80043e8 <__kernel_rem_pio2+0xd8>
 8004384:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004610 <__kernel_rem_pio2+0x300>
 8004388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800438c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004390:	462f      	mov	r7, r5
 8004392:	2600      	movs	r6, #0
 8004394:	e01b      	b.n	80043ce <__kernel_rem_pio2+0xbe>
 8004396:	42ef      	cmn	r7, r5
 8004398:	d407      	bmi.n	80043aa <__kernel_rem_pio2+0x9a>
 800439a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800439e:	f7fc f98f 	bl	80006c0 <__aeabi_i2d>
 80043a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80043a6:	3501      	adds	r5, #1
 80043a8:	e7df      	b.n	800436a <__kernel_rem_pio2+0x5a>
 80043aa:	ec51 0b18 	vmov	r0, r1, d8
 80043ae:	e7f8      	b.n	80043a2 <__kernel_rem_pio2+0x92>
 80043b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80043b8:	f7fb ff06 	bl	80001c8 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043c4:	f7fc f830 	bl	8000428 <__adddf3>
 80043c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043cc:	3601      	adds	r6, #1
 80043ce:	9b05      	ldr	r3, [sp, #20]
 80043d0:	429e      	cmp	r6, r3
 80043d2:	f1a7 0708 	sub.w	r7, r7, #8
 80043d6:	ddeb      	ble.n	80043b0 <__kernel_rem_pio2+0xa0>
 80043d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80043dc:	f108 0801 	add.w	r8, r8, #1
 80043e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80043e4:	3508      	adds	r5, #8
 80043e6:	e7ca      	b.n	800437e <__kernel_rem_pio2+0x6e>
 80043e8:	9b00      	ldr	r3, [sp, #0]
 80043ea:	f8dd 8000 	ldr.w	r8, [sp]
 80043ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80043f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80043f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80043f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80043f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80043fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004402:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004404:	ab98      	add	r3, sp, #608	@ 0x260
 8004406:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800440a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800440e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004412:	ac0c      	add	r4, sp, #48	@ 0x30
 8004414:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004416:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800441a:	46a1      	mov	r9, r4
 800441c:	46c2      	mov	sl, r8
 800441e:	f1ba 0f00 	cmp.w	sl, #0
 8004422:	f1a5 0508 	sub.w	r5, r5, #8
 8004426:	dc77      	bgt.n	8004518 <__kernel_rem_pio2+0x208>
 8004428:	4658      	mov	r0, fp
 800442a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800442e:	f000 fac7 	bl	80049c0 <scalbn>
 8004432:	ec57 6b10 	vmov	r6, r7, d0
 8004436:	2200      	movs	r2, #0
 8004438:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800443c:	4630      	mov	r0, r6
 800443e:	4639      	mov	r1, r7
 8004440:	f7fb fec2 	bl	80001c8 <__aeabi_dmul>
 8004444:	ec41 0b10 	vmov	d0, r0, r1
 8004448:	f000 fb3a 	bl	8004ac0 <floor>
 800444c:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <__kernel_rem_pio2+0x314>)
 800444e:	ec51 0b10 	vmov	r0, r1, d0
 8004452:	2200      	movs	r2, #0
 8004454:	f7fb feb8 	bl	80001c8 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4630      	mov	r0, r6
 800445e:	4639      	mov	r1, r7
 8004460:	f7fb ffe0 	bl	8000424 <__aeabi_dsub>
 8004464:	460f      	mov	r7, r1
 8004466:	4606      	mov	r6, r0
 8004468:	f7fc fa1c 	bl	80008a4 <__aeabi_d2iz>
 800446c:	9002      	str	r0, [sp, #8]
 800446e:	f7fc f927 	bl	80006c0 <__aeabi_i2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fb ffd3 	bl	8000424 <__aeabi_dsub>
 800447e:	f1bb 0f00 	cmp.w	fp, #0
 8004482:	4606      	mov	r6, r0
 8004484:	460f      	mov	r7, r1
 8004486:	dd6c      	ble.n	8004562 <__kernel_rem_pio2+0x252>
 8004488:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800448c:	ab0c      	add	r3, sp, #48	@ 0x30
 800448e:	9d02      	ldr	r5, [sp, #8]
 8004490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004494:	f1cb 0018 	rsb	r0, fp, #24
 8004498:	fa43 f200 	asr.w	r2, r3, r0
 800449c:	4415      	add	r5, r2
 800449e:	4082      	lsls	r2, r0
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80044a4:	9502      	str	r5, [sp, #8]
 80044a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80044aa:	f1cb 0217 	rsb	r2, fp, #23
 80044ae:	fa43 f902 	asr.w	r9, r3, r2
 80044b2:	f1b9 0f00 	cmp.w	r9, #0
 80044b6:	dd64      	ble.n	8004582 <__kernel_rem_pio2+0x272>
 80044b8:	9b02      	ldr	r3, [sp, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	3301      	adds	r3, #1
 80044be:	9302      	str	r3, [sp, #8]
 80044c0:	4615      	mov	r5, r2
 80044c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80044c6:	4590      	cmp	r8, r2
 80044c8:	f300 80b8 	bgt.w	800463c <__kernel_rem_pio2+0x32c>
 80044cc:	f1bb 0f00 	cmp.w	fp, #0
 80044d0:	dd07      	ble.n	80044e2 <__kernel_rem_pio2+0x1d2>
 80044d2:	f1bb 0f01 	cmp.w	fp, #1
 80044d6:	f000 80bf 	beq.w	8004658 <__kernel_rem_pio2+0x348>
 80044da:	f1bb 0f02 	cmp.w	fp, #2
 80044de:	f000 80c6 	beq.w	800466e <__kernel_rem_pio2+0x35e>
 80044e2:	f1b9 0f02 	cmp.w	r9, #2
 80044e6:	d14c      	bne.n	8004582 <__kernel_rem_pio2+0x272>
 80044e8:	4632      	mov	r2, r6
 80044ea:	463b      	mov	r3, r7
 80044ec:	494e      	ldr	r1, [pc, #312]	@ (8004628 <__kernel_rem_pio2+0x318>)
 80044ee:	2000      	movs	r0, #0
 80044f0:	f7fb ff98 	bl	8000424 <__aeabi_dsub>
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	d042      	beq.n	8004582 <__kernel_rem_pio2+0x272>
 80044fc:	4658      	mov	r0, fp
 80044fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004618 <__kernel_rem_pio2+0x308>
 8004502:	f000 fa5d 	bl	80049c0 <scalbn>
 8004506:	4630      	mov	r0, r6
 8004508:	4639      	mov	r1, r7
 800450a:	ec53 2b10 	vmov	r2, r3, d0
 800450e:	f7fb ff89 	bl	8000424 <__aeabi_dsub>
 8004512:	4606      	mov	r6, r0
 8004514:	460f      	mov	r7, r1
 8004516:	e034      	b.n	8004582 <__kernel_rem_pio2+0x272>
 8004518:	4b44      	ldr	r3, [pc, #272]	@ (800462c <__kernel_rem_pio2+0x31c>)
 800451a:	2200      	movs	r2, #0
 800451c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004520:	f7fb fe52 	bl	80001c8 <__aeabi_dmul>
 8004524:	f7fc f9be 	bl	80008a4 <__aeabi_d2iz>
 8004528:	f7fc f8ca 	bl	80006c0 <__aeabi_i2d>
 800452c:	4b40      	ldr	r3, [pc, #256]	@ (8004630 <__kernel_rem_pio2+0x320>)
 800452e:	2200      	movs	r2, #0
 8004530:	4606      	mov	r6, r0
 8004532:	460f      	mov	r7, r1
 8004534:	f7fb fe48 	bl	80001c8 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004540:	f7fb ff70 	bl	8000424 <__aeabi_dsub>
 8004544:	f7fc f9ae 	bl	80008a4 <__aeabi_d2iz>
 8004548:	e9d5 2300 	ldrd	r2, r3, [r5]
 800454c:	f849 0b04 	str.w	r0, [r9], #4
 8004550:	4639      	mov	r1, r7
 8004552:	4630      	mov	r0, r6
 8004554:	f7fb ff68 	bl	8000428 <__adddf3>
 8004558:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800455c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004560:	e75d      	b.n	800441e <__kernel_rem_pio2+0x10e>
 8004562:	d107      	bne.n	8004574 <__kernel_rem_pio2+0x264>
 8004564:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004568:	aa0c      	add	r2, sp, #48	@ 0x30
 800456a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004572:	e79e      	b.n	80044b2 <__kernel_rem_pio2+0x1a2>
 8004574:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <__kernel_rem_pio2+0x324>)
 8004576:	2200      	movs	r2, #0
 8004578:	f7fc f980 	bl	800087c <__aeabi_dcmpge>
 800457c:	2800      	cmp	r0, #0
 800457e:	d143      	bne.n	8004608 <__kernel_rem_pio2+0x2f8>
 8004580:	4681      	mov	r9, r0
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	4630      	mov	r0, r6
 8004588:	4639      	mov	r1, r7
 800458a:	f7fc f959 	bl	8000840 <__aeabi_dcmpeq>
 800458e:	2800      	cmp	r0, #0
 8004590:	f000 80bf 	beq.w	8004712 <__kernel_rem_pio2+0x402>
 8004594:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004598:	2200      	movs	r2, #0
 800459a:	9900      	ldr	r1, [sp, #0]
 800459c:	428b      	cmp	r3, r1
 800459e:	da6e      	bge.n	800467e <__kernel_rem_pio2+0x36e>
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	f000 8089 	beq.w	80046b8 <__kernel_rem_pio2+0x3a8>
 80045a6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80045aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80045ac:	f1ab 0b18 	sub.w	fp, fp, #24
 80045b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f6      	beq.n	80045a6 <__kernel_rem_pio2+0x296>
 80045b8:	4658      	mov	r0, fp
 80045ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004618 <__kernel_rem_pio2+0x308>
 80045be:	f000 f9ff 	bl	80049c0 <scalbn>
 80045c2:	f108 0301 	add.w	r3, r8, #1
 80045c6:	00da      	lsls	r2, r3, #3
 80045c8:	9205      	str	r2, [sp, #20]
 80045ca:	ec55 4b10 	vmov	r4, r5, d0
 80045ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 80045d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800462c <__kernel_rem_pio2+0x31c>
 80045d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80045d8:	4646      	mov	r6, r8
 80045da:	f04f 0a00 	mov.w	sl, #0
 80045de:	2e00      	cmp	r6, #0
 80045e0:	f280 80cf 	bge.w	8004782 <__kernel_rem_pio2+0x472>
 80045e4:	4644      	mov	r4, r8
 80045e6:	2c00      	cmp	r4, #0
 80045e8:	f2c0 80fd 	blt.w	80047e6 <__kernel_rem_pio2+0x4d6>
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <__kernel_rem_pio2+0x328>)
 80045ee:	461f      	mov	r7, r3
 80045f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80045f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045f6:	9306      	str	r3, [sp, #24]
 80045f8:	f04f 0a00 	mov.w	sl, #0
 80045fc:	f04f 0b00 	mov.w	fp, #0
 8004600:	2600      	movs	r6, #0
 8004602:	eba8 0504 	sub.w	r5, r8, r4
 8004606:	e0e2      	b.n	80047ce <__kernel_rem_pio2+0x4be>
 8004608:	f04f 0902 	mov.w	r9, #2
 800460c:	e754      	b.n	80044b8 <__kernel_rem_pio2+0x1a8>
 800460e:	bf00      	nop
	...
 800461c:	3ff00000 	.word	0x3ff00000
 8004620:	08004de0 	.word	0x08004de0
 8004624:	40200000 	.word	0x40200000
 8004628:	3ff00000 	.word	0x3ff00000
 800462c:	3e700000 	.word	0x3e700000
 8004630:	41700000 	.word	0x41700000
 8004634:	3fe00000 	.word	0x3fe00000
 8004638:	08004da0 	.word	0x08004da0
 800463c:	f854 3b04 	ldr.w	r3, [r4], #4
 8004640:	b945      	cbnz	r5, 8004654 <__kernel_rem_pio2+0x344>
 8004642:	b123      	cbz	r3, 800464e <__kernel_rem_pio2+0x33e>
 8004644:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004648:	f844 3c04 	str.w	r3, [r4, #-4]
 800464c:	2301      	movs	r3, #1
 800464e:	3201      	adds	r2, #1
 8004650:	461d      	mov	r5, r3
 8004652:	e738      	b.n	80044c6 <__kernel_rem_pio2+0x1b6>
 8004654:	1acb      	subs	r3, r1, r3
 8004656:	e7f7      	b.n	8004648 <__kernel_rem_pio2+0x338>
 8004658:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800465c:	ab0c      	add	r3, sp, #48	@ 0x30
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004666:	a90c      	add	r1, sp, #48	@ 0x30
 8004668:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800466c:	e739      	b.n	80044e2 <__kernel_rem_pio2+0x1d2>
 800466e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004672:	ab0c      	add	r3, sp, #48	@ 0x30
 8004674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004678:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800467c:	e7f3      	b.n	8004666 <__kernel_rem_pio2+0x356>
 800467e:	a90c      	add	r1, sp, #48	@ 0x30
 8004680:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004684:	3b01      	subs	r3, #1
 8004686:	430a      	orrs	r2, r1
 8004688:	e787      	b.n	800459a <__kernel_rem_pio2+0x28a>
 800468a:	3401      	adds	r4, #1
 800468c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004690:	2a00      	cmp	r2, #0
 8004692:	d0fa      	beq.n	800468a <__kernel_rem_pio2+0x37a>
 8004694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004696:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800469a:	eb0d 0503 	add.w	r5, sp, r3
 800469e:	9b06      	ldr	r3, [sp, #24]
 80046a0:	aa20      	add	r2, sp, #128	@ 0x80
 80046a2:	4443      	add	r3, r8
 80046a4:	f108 0701 	add.w	r7, r8, #1
 80046a8:	3d98      	subs	r5, #152	@ 0x98
 80046aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80046ae:	4444      	add	r4, r8
 80046b0:	42bc      	cmp	r4, r7
 80046b2:	da04      	bge.n	80046be <__kernel_rem_pio2+0x3ae>
 80046b4:	46a0      	mov	r8, r4
 80046b6:	e6a2      	b.n	80043fe <__kernel_rem_pio2+0xee>
 80046b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046ba:	2401      	movs	r4, #1
 80046bc:	e7e6      	b.n	800468c <__kernel_rem_pio2+0x37c>
 80046be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80046c4:	f7fb fffc 	bl	80006c0 <__aeabi_i2d>
 80046c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004990 <__kernel_rem_pio2+0x680>
 80046cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80046d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80046d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d8:	46b2      	mov	sl, r6
 80046da:	f04f 0800 	mov.w	r8, #0
 80046de:	9b05      	ldr	r3, [sp, #20]
 80046e0:	4598      	cmp	r8, r3
 80046e2:	dd05      	ble.n	80046f0 <__kernel_rem_pio2+0x3e0>
 80046e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046e8:	3701      	adds	r7, #1
 80046ea:	eca5 7b02 	vstmia	r5!, {d7}
 80046ee:	e7df      	b.n	80046b0 <__kernel_rem_pio2+0x3a0>
 80046f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80046f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80046f8:	f7fb fd66 	bl	80001c8 <__aeabi_dmul>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004704:	f7fb fe90 	bl	8000428 <__adddf3>
 8004708:	f108 0801 	add.w	r8, r8, #1
 800470c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004710:	e7e5      	b.n	80046de <__kernel_rem_pio2+0x3ce>
 8004712:	f1cb 0000 	rsb	r0, fp, #0
 8004716:	ec47 6b10 	vmov	d0, r6, r7
 800471a:	f000 f951 	bl	80049c0 <scalbn>
 800471e:	ec55 4b10 	vmov	r4, r5, d0
 8004722:	4b9d      	ldr	r3, [pc, #628]	@ (8004998 <__kernel_rem_pio2+0x688>)
 8004724:	2200      	movs	r2, #0
 8004726:	4620      	mov	r0, r4
 8004728:	4629      	mov	r1, r5
 800472a:	f7fc f8a7 	bl	800087c <__aeabi_dcmpge>
 800472e:	b300      	cbz	r0, 8004772 <__kernel_rem_pio2+0x462>
 8004730:	4b9a      	ldr	r3, [pc, #616]	@ (800499c <__kernel_rem_pio2+0x68c>)
 8004732:	2200      	movs	r2, #0
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	f7fb fd46 	bl	80001c8 <__aeabi_dmul>
 800473c:	f7fc f8b2 	bl	80008a4 <__aeabi_d2iz>
 8004740:	4606      	mov	r6, r0
 8004742:	f7fb ffbd 	bl	80006c0 <__aeabi_i2d>
 8004746:	4b94      	ldr	r3, [pc, #592]	@ (8004998 <__kernel_rem_pio2+0x688>)
 8004748:	2200      	movs	r2, #0
 800474a:	f7fb fd3d 	bl	80001c8 <__aeabi_dmul>
 800474e:	460b      	mov	r3, r1
 8004750:	4602      	mov	r2, r0
 8004752:	4629      	mov	r1, r5
 8004754:	4620      	mov	r0, r4
 8004756:	f7fb fe65 	bl	8000424 <__aeabi_dsub>
 800475a:	f7fc f8a3 	bl	80008a4 <__aeabi_d2iz>
 800475e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004760:	f10b 0b18 	add.w	fp, fp, #24
 8004764:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004768:	f108 0801 	add.w	r8, r8, #1
 800476c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004770:	e722      	b.n	80045b8 <__kernel_rem_pio2+0x2a8>
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f7fc f895 	bl	80008a4 <__aeabi_d2iz>
 800477a:	ab0c      	add	r3, sp, #48	@ 0x30
 800477c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004780:	e71a      	b.n	80045b8 <__kernel_rem_pio2+0x2a8>
 8004782:	ab0c      	add	r3, sp, #48	@ 0x30
 8004784:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004788:	f7fb ff9a 	bl	80006c0 <__aeabi_i2d>
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f7fb fd1a 	bl	80001c8 <__aeabi_dmul>
 8004794:	4652      	mov	r2, sl
 8004796:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800479a:	465b      	mov	r3, fp
 800479c:	4620      	mov	r0, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	f7fb fd12 	bl	80001c8 <__aeabi_dmul>
 80047a4:	3e01      	subs	r6, #1
 80047a6:	4604      	mov	r4, r0
 80047a8:	460d      	mov	r5, r1
 80047aa:	e718      	b.n	80045de <__kernel_rem_pio2+0x2ce>
 80047ac:	9906      	ldr	r1, [sp, #24]
 80047ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80047b2:	9106      	str	r1, [sp, #24]
 80047b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80047b8:	f7fb fd06 	bl	80001c8 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4650      	mov	r0, sl
 80047c2:	4659      	mov	r1, fp
 80047c4:	f7fb fe30 	bl	8000428 <__adddf3>
 80047c8:	3601      	adds	r6, #1
 80047ca:	4682      	mov	sl, r0
 80047cc:	468b      	mov	fp, r1
 80047ce:	9b00      	ldr	r3, [sp, #0]
 80047d0:	429e      	cmp	r6, r3
 80047d2:	dc01      	bgt.n	80047d8 <__kernel_rem_pio2+0x4c8>
 80047d4:	42b5      	cmp	r5, r6
 80047d6:	dae9      	bge.n	80047ac <__kernel_rem_pio2+0x49c>
 80047d8:	ab48      	add	r3, sp, #288	@ 0x120
 80047da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80047de:	e9c5 ab00 	strd	sl, fp, [r5]
 80047e2:	3c01      	subs	r4, #1
 80047e4:	e6ff      	b.n	80045e6 <__kernel_rem_pio2+0x2d6>
 80047e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	dc0b      	bgt.n	8004804 <__kernel_rem_pio2+0x4f4>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dc39      	bgt.n	8004864 <__kernel_rem_pio2+0x554>
 80047f0:	d05d      	beq.n	80048ae <__kernel_rem_pio2+0x59e>
 80047f2:	9b02      	ldr	r3, [sp, #8]
 80047f4:	f003 0007 	and.w	r0, r3, #7
 80047f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80047fc:	ecbd 8b02 	vpop	{d8}
 8004800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004804:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004806:	2b03      	cmp	r3, #3
 8004808:	d1f3      	bne.n	80047f2 <__kernel_rem_pio2+0x4e2>
 800480a:	9b05      	ldr	r3, [sp, #20]
 800480c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004810:	eb0d 0403 	add.w	r4, sp, r3
 8004814:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004818:	4625      	mov	r5, r4
 800481a:	46c2      	mov	sl, r8
 800481c:	f1ba 0f00 	cmp.w	sl, #0
 8004820:	f1a5 0508 	sub.w	r5, r5, #8
 8004824:	dc6b      	bgt.n	80048fe <__kernel_rem_pio2+0x5ee>
 8004826:	4645      	mov	r5, r8
 8004828:	2d01      	cmp	r5, #1
 800482a:	f1a4 0408 	sub.w	r4, r4, #8
 800482e:	f300 8087 	bgt.w	8004940 <__kernel_rem_pio2+0x630>
 8004832:	9c05      	ldr	r4, [sp, #20]
 8004834:	ab48      	add	r3, sp, #288	@ 0x120
 8004836:	441c      	add	r4, r3
 8004838:	2000      	movs	r0, #0
 800483a:	2100      	movs	r1, #0
 800483c:	f1b8 0f01 	cmp.w	r8, #1
 8004840:	f300 809c 	bgt.w	800497c <__kernel_rem_pio2+0x66c>
 8004844:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004848:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	f040 80a6 	bne.w	80049a0 <__kernel_rem_pio2+0x690>
 8004854:	9b04      	ldr	r3, [sp, #16]
 8004856:	e9c3 7800 	strd	r7, r8, [r3]
 800485a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800485e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004862:	e7c6      	b.n	80047f2 <__kernel_rem_pio2+0x4e2>
 8004864:	9d05      	ldr	r5, [sp, #20]
 8004866:	ab48      	add	r3, sp, #288	@ 0x120
 8004868:	441d      	add	r5, r3
 800486a:	4644      	mov	r4, r8
 800486c:	2000      	movs	r0, #0
 800486e:	2100      	movs	r1, #0
 8004870:	2c00      	cmp	r4, #0
 8004872:	da35      	bge.n	80048e0 <__kernel_rem_pio2+0x5d0>
 8004874:	f1b9 0f00 	cmp.w	r9, #0
 8004878:	d038      	beq.n	80048ec <__kernel_rem_pio2+0x5dc>
 800487a:	4602      	mov	r2, r0
 800487c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004880:	9c04      	ldr	r4, [sp, #16]
 8004882:	e9c4 2300 	strd	r2, r3, [r4]
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800488e:	f7fb fdc9 	bl	8000424 <__aeabi_dsub>
 8004892:	ad4a      	add	r5, sp, #296	@ 0x128
 8004894:	2401      	movs	r4, #1
 8004896:	45a0      	cmp	r8, r4
 8004898:	da2b      	bge.n	80048f2 <__kernel_rem_pio2+0x5e2>
 800489a:	f1b9 0f00 	cmp.w	r9, #0
 800489e:	d002      	beq.n	80048a6 <__kernel_rem_pio2+0x596>
 80048a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048a4:	4619      	mov	r1, r3
 80048a6:	9b04      	ldr	r3, [sp, #16]
 80048a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80048ac:	e7a1      	b.n	80047f2 <__kernel_rem_pio2+0x4e2>
 80048ae:	9c05      	ldr	r4, [sp, #20]
 80048b0:	ab48      	add	r3, sp, #288	@ 0x120
 80048b2:	441c      	add	r4, r3
 80048b4:	2000      	movs	r0, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	f1b8 0f00 	cmp.w	r8, #0
 80048bc:	da09      	bge.n	80048d2 <__kernel_rem_pio2+0x5c2>
 80048be:	f1b9 0f00 	cmp.w	r9, #0
 80048c2:	d002      	beq.n	80048ca <__kernel_rem_pio2+0x5ba>
 80048c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048c8:	4619      	mov	r1, r3
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	e9c3 0100 	strd	r0, r1, [r3]
 80048d0:	e78f      	b.n	80047f2 <__kernel_rem_pio2+0x4e2>
 80048d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80048d6:	f7fb fda7 	bl	8000428 <__adddf3>
 80048da:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80048de:	e7eb      	b.n	80048b8 <__kernel_rem_pio2+0x5a8>
 80048e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80048e4:	f7fb fda0 	bl	8000428 <__adddf3>
 80048e8:	3c01      	subs	r4, #1
 80048ea:	e7c1      	b.n	8004870 <__kernel_rem_pio2+0x560>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	e7c6      	b.n	8004880 <__kernel_rem_pio2+0x570>
 80048f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80048f6:	f7fb fd97 	bl	8000428 <__adddf3>
 80048fa:	3401      	adds	r4, #1
 80048fc:	e7cb      	b.n	8004896 <__kernel_rem_pio2+0x586>
 80048fe:	ed95 7b00 	vldr	d7, [r5]
 8004902:	ed8d 7b00 	vstr	d7, [sp]
 8004906:	ed95 7b02 	vldr	d7, [r5, #8]
 800490a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800490e:	ec53 2b17 	vmov	r2, r3, d7
 8004912:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004916:	f7fb fd87 	bl	8000428 <__adddf3>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4606      	mov	r6, r0
 8004920:	460f      	mov	r7, r1
 8004922:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004926:	f7fb fd7d 	bl	8000424 <__aeabi_dsub>
 800492a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800492e:	f7fb fd7b 	bl	8000428 <__adddf3>
 8004932:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004936:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800493a:	e9c5 6700 	strd	r6, r7, [r5]
 800493e:	e76d      	b.n	800481c <__kernel_rem_pio2+0x50c>
 8004940:	ed94 7b00 	vldr	d7, [r4]
 8004944:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004948:	ec51 0b17 	vmov	r0, r1, d7
 800494c:	4652      	mov	r2, sl
 800494e:	465b      	mov	r3, fp
 8004950:	ed8d 7b00 	vstr	d7, [sp]
 8004954:	f7fb fd68 	bl	8000428 <__adddf3>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004964:	f7fb fd5e 	bl	8000424 <__aeabi_dsub>
 8004968:	4652      	mov	r2, sl
 800496a:	465b      	mov	r3, fp
 800496c:	f7fb fd5c 	bl	8000428 <__adddf3>
 8004970:	3d01      	subs	r5, #1
 8004972:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004976:	e9c4 6700 	strd	r6, r7, [r4]
 800497a:	e755      	b.n	8004828 <__kernel_rem_pio2+0x518>
 800497c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004980:	f7fb fd52 	bl	8000428 <__adddf3>
 8004984:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004988:	e758      	b.n	800483c <__kernel_rem_pio2+0x52c>
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w
	...
 8004998:	41700000 	.word	0x41700000
 800499c:	3e700000 	.word	0x3e700000
 80049a0:	9b04      	ldr	r3, [sp, #16]
 80049a2:	9a04      	ldr	r2, [sp, #16]
 80049a4:	601f      	str	r7, [r3, #0]
 80049a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80049aa:	605c      	str	r4, [r3, #4]
 80049ac:	609d      	str	r5, [r3, #8]
 80049ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80049b2:	60d3      	str	r3, [r2, #12]
 80049b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049b8:	6110      	str	r0, [r2, #16]
 80049ba:	6153      	str	r3, [r2, #20]
 80049bc:	e719      	b.n	80047f2 <__kernel_rem_pio2+0x4e2>
 80049be:	bf00      	nop

080049c0 <scalbn>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	ec55 4b10 	vmov	r4, r5, d0
 80049c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80049ca:	4606      	mov	r6, r0
 80049cc:	462b      	mov	r3, r5
 80049ce:	b991      	cbnz	r1, 80049f6 <scalbn+0x36>
 80049d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80049d4:	4323      	orrs	r3, r4
 80049d6:	d03d      	beq.n	8004a54 <scalbn+0x94>
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <scalbn+0xf0>)
 80049da:	4620      	mov	r0, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	2200      	movs	r2, #0
 80049e0:	f7fb fbf2 	bl	80001c8 <__aeabi_dmul>
 80049e4:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <scalbn+0xf4>)
 80049e6:	429e      	cmp	r6, r3
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	da0f      	bge.n	8004a0e <scalbn+0x4e>
 80049ee:	a328      	add	r3, pc, #160	@ (adr r3, 8004a90 <scalbn+0xd0>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	e01e      	b.n	8004a34 <scalbn+0x74>
 80049f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d10b      	bne.n	8004a16 <scalbn+0x56>
 80049fe:	4622      	mov	r2, r4
 8004a00:	4620      	mov	r0, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	f7fb fd10 	bl	8000428 <__adddf3>
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	e022      	b.n	8004a54 <scalbn+0x94>
 8004a0e:	460b      	mov	r3, r1
 8004a10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004a14:	3936      	subs	r1, #54	@ 0x36
 8004a16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004a1a:	4296      	cmp	r6, r2
 8004a1c:	dd0d      	ble.n	8004a3a <scalbn+0x7a>
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	a11d      	add	r1, pc, #116	@ (adr r1, 8004a98 <scalbn+0xd8>)
 8004a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a26:	da02      	bge.n	8004a2e <scalbn+0x6e>
 8004a28:	a11d      	add	r1, pc, #116	@ (adr r1, 8004aa0 <scalbn+0xe0>)
 8004a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004a98 <scalbn+0xd8>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fbc8 	bl	80001c8 <__aeabi_dmul>
 8004a38:	e7e6      	b.n	8004a08 <scalbn+0x48>
 8004a3a:	1872      	adds	r2, r6, r1
 8004a3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004a40:	428a      	cmp	r2, r1
 8004a42:	dcec      	bgt.n	8004a1e <scalbn+0x5e>
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	dd08      	ble.n	8004a5a <scalbn+0x9a>
 8004a48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004a4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a54:	ec45 4b10 	vmov	d0, r4, r5
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
 8004a5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004a5e:	da08      	bge.n	8004a72 <scalbn+0xb2>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	a10b      	add	r1, pc, #44	@ (adr r1, 8004a90 <scalbn+0xd0>)
 8004a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a68:	dac1      	bge.n	80049ee <scalbn+0x2e>
 8004a6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004aa8 <scalbn+0xe8>)
 8004a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a70:	e7bd      	b.n	80049ee <scalbn+0x2e>
 8004a72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004a76:	3236      	adds	r2, #54	@ 0x36
 8004a78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a80:	4620      	mov	r0, r4
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <scalbn+0xf8>)
 8004a84:	4629      	mov	r1, r5
 8004a86:	2200      	movs	r2, #0
 8004a88:	e7d4      	b.n	8004a34 <scalbn+0x74>
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w
 8004a90:	c2f8f359 	.word	0xc2f8f359
 8004a94:	01a56e1f 	.word	0x01a56e1f
 8004a98:	8800759c 	.word	0x8800759c
 8004a9c:	7e37e43c 	.word	0x7e37e43c
 8004aa0:	8800759c 	.word	0x8800759c
 8004aa4:	fe37e43c 	.word	0xfe37e43c
 8004aa8:	c2f8f359 	.word	0xc2f8f359
 8004aac:	81a56e1f 	.word	0x81a56e1f
 8004ab0:	43500000 	.word	0x43500000
 8004ab4:	ffff3cb0 	.word	0xffff3cb0
 8004ab8:	3c900000 	.word	0x3c900000
 8004abc:	00000000 	.word	0x00000000

08004ac0 <floor>:
 8004ac0:	ec51 0b10 	vmov	r0, r1, d0
 8004ac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004ad0:	2e13      	cmp	r6, #19
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	dc34      	bgt.n	8004b44 <floor+0x84>
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	da17      	bge.n	8004b0e <floor+0x4e>
 8004ade:	a332      	add	r3, pc, #200	@ (adr r3, 8004ba8 <floor+0xe8>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f7fb fca0 	bl	8000428 <__adddf3>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2300      	movs	r3, #0
 8004aec:	f7fb fed0 	bl	8000890 <__aeabi_dcmpgt>
 8004af0:	b150      	cbz	r0, 8004b08 <floor+0x48>
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	da55      	bge.n	8004ba2 <floor+0xe2>
 8004af6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004afa:	432c      	orrs	r4, r5
 8004afc:	2500      	movs	r5, #0
 8004afe:	42ac      	cmp	r4, r5
 8004b00:	4c2b      	ldr	r4, [pc, #172]	@ (8004bb0 <floor+0xf0>)
 8004b02:	bf08      	it	eq
 8004b04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	e023      	b.n	8004b56 <floor+0x96>
 8004b0e:	4f29      	ldr	r7, [pc, #164]	@ (8004bb4 <floor+0xf4>)
 8004b10:	4137      	asrs	r7, r6
 8004b12:	ea01 0307 	and.w	r3, r1, r7
 8004b16:	4303      	orrs	r3, r0
 8004b18:	d01d      	beq.n	8004b56 <floor+0x96>
 8004b1a:	a323      	add	r3, pc, #140	@ (adr r3, 8004ba8 <floor+0xe8>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f7fb fc82 	bl	8000428 <__adddf3>
 8004b24:	2200      	movs	r2, #0
 8004b26:	2300      	movs	r3, #0
 8004b28:	f7fb feb2 	bl	8000890 <__aeabi_dcmpgt>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d0eb      	beq.n	8004b08 <floor+0x48>
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	bfbe      	ittt	lt
 8004b34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004b38:	4133      	asrlt	r3, r6
 8004b3a:	18e4      	addlt	r4, r4, r3
 8004b3c:	ea24 0407 	bic.w	r4, r4, r7
 8004b40:	2500      	movs	r5, #0
 8004b42:	e7e1      	b.n	8004b08 <floor+0x48>
 8004b44:	2e33      	cmp	r6, #51	@ 0x33
 8004b46:	dd0a      	ble.n	8004b5e <floor+0x9e>
 8004b48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004b4c:	d103      	bne.n	8004b56 <floor+0x96>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	f7fb fc69 	bl	8000428 <__adddf3>
 8004b56:	ec41 0b10 	vmov	d0, r0, r1
 8004b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004b62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b66:	40df      	lsrs	r7, r3
 8004b68:	4207      	tst	r7, r0
 8004b6a:	d0f4      	beq.n	8004b56 <floor+0x96>
 8004b6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004ba8 <floor+0xe8>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fc59 	bl	8000428 <__adddf3>
 8004b76:	2200      	movs	r2, #0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f7fb fe89 	bl	8000890 <__aeabi_dcmpgt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0c2      	beq.n	8004b08 <floor+0x48>
 8004b82:	2c00      	cmp	r4, #0
 8004b84:	da0a      	bge.n	8004b9c <floor+0xdc>
 8004b86:	2e14      	cmp	r6, #20
 8004b88:	d101      	bne.n	8004b8e <floor+0xce>
 8004b8a:	3401      	adds	r4, #1
 8004b8c:	e006      	b.n	8004b9c <floor+0xdc>
 8004b8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004b92:	2301      	movs	r3, #1
 8004b94:	40b3      	lsls	r3, r6
 8004b96:	441d      	add	r5, r3
 8004b98:	4545      	cmp	r5, r8
 8004b9a:	d3f6      	bcc.n	8004b8a <floor+0xca>
 8004b9c:	ea25 0507 	bic.w	r5, r5, r7
 8004ba0:	e7b2      	b.n	8004b08 <floor+0x48>
 8004ba2:	2500      	movs	r5, #0
 8004ba4:	462c      	mov	r4, r5
 8004ba6:	e7af      	b.n	8004b08 <floor+0x48>
 8004ba8:	8800759c 	.word	0x8800759c
 8004bac:	7e37e43c 	.word	0x7e37e43c
 8004bb0:	bff00000 	.word	0xbff00000
 8004bb4:	000fffff 	.word	0x000fffff

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
