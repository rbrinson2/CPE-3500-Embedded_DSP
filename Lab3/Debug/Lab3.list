
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c8  080037c8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d0  080037d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d4  080037d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080037e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080037e4  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a204  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001754  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00010998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a8  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259b6  00000000  00000000  000118f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0c9  00000000  00000000  000372a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8088  00000000  00000000  0004136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001293f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023bc  00000000  00000000  0012943c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003768 	.word	0x08003768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003768 	.word	0x08003768

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000844:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <system1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system1(float input[], float output[], int size){
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  int n;
  for (n = 0; n < size; n++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e05d      	b.n	8000bf6 <system1+0xce>
    if (n == 0) output[n] = input[n];
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <system1+0x2e>
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	441a      	add	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	440b      	add	r3, r1
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e04c      	b.n	8000bf0 <system1+0xc8>
    else output[n] = a * input[n] + b * input[n - 1] + c * input[n - 1]; 
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fdbf 	bl	80006e4 <__aeabi_f2d>
 8000b66:	a328      	add	r3, pc, #160	@ (adr r3, 8000c08 <system1+0xe0>)
 8000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6c:	f7ff fb2c 	bl	80001c8 <__aeabi_dmul>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4614      	mov	r4, r2
 8000b76:	461d      	mov	r5, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fdab 	bl	80006e4 <__aeabi_f2d>
 8000b8e:	a320      	add	r3, pc, #128	@ (adr r3, 8000c10 <system1+0xe8>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	f7ff fb18 	bl	80001c8 <__aeabi_dmul>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	f7ff fc42 	bl	8000428 <__adddf3>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4614      	mov	r4, r2
 8000baa:	461d      	mov	r5, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd91 	bl	80006e4 <__aeabi_f2d>
 8000bc2:	a315      	add	r3, pc, #84	@ (adr r3, 8000c18 <system1+0xf0>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	f7ff fafe 	bl	80001c8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	f7ff fc28 	bl	8000428 <__adddf3>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4610      	mov	r0, r2
 8000bde:	4619      	mov	r1, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	18d4      	adds	r4, r2, r3
 8000be8:	f7ff fdd4 	bl	8000794 <__aeabi_d2f>
 8000bec:	4603      	mov	r3, r0
 8000bee:	6023      	str	r3, [r4, #0]
  for (n = 0; n < size; n++) {
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	db9d      	blt.n	8000b3a <system1+0x12>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	9999999a 	.word	0x9999999a
 8000c0c:	40019999 	.word	0x40019999
 8000c10:	9999999a 	.word	0x9999999a
 8000c14:	bff19999 	.word	0xbff19999
 8000c18:	66666666 	.word	0x66666666
 8000c1c:	3fe66666 	.word	0x3fe66666

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0aa      	sub	sp, #168	@ 0xa8
 8000c24:	af00      	add	r7, sp, #0
  float inp[N];
  float outp[N];
  for (int i = 0; i < N; i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c2c:	e01b      	b.n	8000c66 <main+0x46>
    if (i < 7) inp[i] = 1;
 8000c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	dc09      	bgt.n	8000c4a <main+0x2a>
 8000c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	33a8      	adds	r3, #168	@ 0xa8
 8000c3e:	443b      	add	r3, r7
 8000c40:	3b54      	subs	r3, #84	@ 0x54
 8000c42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e008      	b.n	8000c5c <main+0x3c>
    else inp[i] = 0;
 8000c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	33a8      	adds	r3, #168	@ 0xa8
 8000c52:	443b      	add	r3, r7
 8000c54:	3b54      	subs	r3, #84	@ 0x54
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; i++) {
 8000c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c6a:	2b13      	cmp	r3, #19
 8000c6c:	dddf      	ble.n	8000c2e <main+0xe>
  }
  /* USER CODE BEGIN 1 */
  system1(inp, outp, N);
 8000c6e:	1d39      	adds	r1, r7, #4
 8000c70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c74:	2214      	movs	r2, #20
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff56 	bl	8000b28 <system1>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 f9e2 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f806 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 f886 	bl	8000d94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c88:	f000 f854 	bl	8000d34 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <main+0x6c>

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b096      	sub	sp, #88	@ 0x58
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2244      	movs	r2, #68	@ 0x44
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fd35 	bl	800370e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cb6:	f000 fcf7 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cc0:	f000 f8ce 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cde:	230a      	movs	r3, #10
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fd2e 	bl	8001754 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cfe:	f000 f8af 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f8f6 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d26:	f000 f89b 	bl	8000e60 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3758      	adds	r7, #88	@ 0x58
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	@ (8000d90 <MX_USART2_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART2_UART_Init+0x58>)
 8000d78:	f001 ffa8 	bl	8002ccc <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f86d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000028 	.word	0x20000028
 8000d90:	40004400 	.word	0x40004400

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a2a      	ldr	r2, [pc, #168]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a24      	ldr	r2, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_GPIO_Init+0xc4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f000 fc23 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <MX_GPIO_Init+0xc8>)
 8000e2e:	f000 fa6b 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e32:	2320      	movs	r3, #32
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f000 fa5c 	bl	8001308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	48000800 	.word	0x48000800

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	@ 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	@ 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fc1a 	bl	800370e <memset>
  if(huart->Instance==USART2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <HAL_UART_MspInit+0xb0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13b      	bne.n	8000f5c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fa2f 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff ffb0 	bl	8000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f04:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_UART_MspInit+0xb4>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f30:	230c      	movs	r3, #12
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f000 f9d6 	bl	8001308 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37b0      	adds	r7, #176	@ 0xb0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40004400 	.word	0x40004400
 8000f68:	40021000 	.word	0x40021000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f89b 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f002 fb7f 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fdfd 	bl	8000c20 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001034:	080037d8 	.word	0x080037d8
  ldr r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800103c:	200000b4 	.word	0x200000b4

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_Init+0x3c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_Init+0x3c>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f920 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f80f 	bl	8001084 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff fefb 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f91d 	bl	80012ee <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c8:	f000 f8f5 	bl	80012b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	200000b0 	.word	0x200000b0

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200000b0 	.word	0x200000b0

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	@ 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff47 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5c 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb0 	bl	800125c <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e17f      	b.n	8001618 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8171 	beq.w	8001612 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x40>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d118      	bne.n	80013e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013bc:	2201      	movs	r2, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	f003 0201 	and.w	r2, r3, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d017      	beq.n	8001424 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d123      	bne.n	8001478 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	6939      	ldr	r1, [r7, #16]
 8001474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80ac 	beq.w	8001612 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001638 <HAL_GPIO_Init+0x330>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	4a5e      	ldr	r2, [pc, #376]	@ (8001638 <HAL_GPIO_Init+0x330>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001638 <HAL_GPIO_Init+0x330>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d2:	4a5a      	ldr	r2, [pc, #360]	@ (800163c <HAL_GPIO_Init+0x334>)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x242>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	@ (8001640 <HAL_GPIO_Init+0x338>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x23e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	@ (8001644 <HAL_GPIO_Init+0x33c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x23a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4d      	ldr	r2, [pc, #308]	@ (8001648 <HAL_GPIO_Init+0x340>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x236>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4c      	ldr	r2, [pc, #304]	@ (800164c <HAL_GPIO_Init+0x344>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x232>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4b      	ldr	r2, [pc, #300]	@ (8001650 <HAL_GPIO_Init+0x348>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x22e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4a      	ldr	r2, [pc, #296]	@ (8001654 <HAL_GPIO_Init+0x34c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x22a>
 800152e:	2306      	movs	r3, #6
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x244>
 8001532:	2307      	movs	r3, #7
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x244>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x244>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x244>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x244>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x244>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x244>
 800154a:	2300      	movs	r3, #0
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155c:	4937      	ldr	r1, [pc, #220]	@ (800163c <HAL_GPIO_Init+0x334>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_GPIO_Init+0x350>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800158e:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <HAL_GPIO_Init+0x350>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <HAL_GPIO_Init+0x350>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b8:	4a27      	ldr	r2, [pc, #156]	@ (8001658 <HAL_GPIO_Init+0x350>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <HAL_GPIO_Init+0x350>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_GPIO_Init+0x350>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_GPIO_Init+0x350>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800160c:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <HAL_GPIO_Init+0x350>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ae78 	bne.w	8001318 <HAL_GPIO_Init+0x10>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	40010000 	.word	0x40010000
 8001640:	48000400 	.word	0x48000400
 8001644:	48000800 	.word	0x48000800
 8001648:	48000c00 	.word	0x48000c00
 800164c:	48001000 	.word	0x48001000
 8001650:	48001400 	.word	0x48001400
 8001654:	48001800 	.word	0x48001800
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e002      	b.n	8001680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40007000 	.word	0x40007000

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016b6:	d130      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b8:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016c4:	d038      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2232      	movs	r2, #50	@ 0x32
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ec:	e002      	b.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001700:	d102      	bne.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f2      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001714:	d110      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e00f      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001726:	d007      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001730:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001736:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83

08001754 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e3ca      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001766:	4b97      	ldr	r3, [pc, #604]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001770:	4b94      	ldr	r3, [pc, #592]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80e4 	beq.w	8001950 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_RCC_OscConfig+0x4a>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	f040 808b 	bne.w	80018ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b01      	cmp	r3, #1
 800179a:	f040 8087 	bne.w	80018ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179e:	4b89      	ldr	r3, [pc, #548]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x62>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e3a2      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4b82      	ldr	r3, [pc, #520]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_RCC_OscConfig+0x7c>
 80017c6:	4b7f      	ldr	r3, [pc, #508]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ce:	e005      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
 80017d0:	4b7c      	ldr	r3, [pc, #496]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017dc:	4293      	cmp	r3, r2
 80017de:	d223      	bcs.n	8001828 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fd55 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e383      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f4:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a72      	ldr	r2, [pc, #456]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b70      	ldr	r3, [pc, #448]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	496d      	ldr	r1, [pc, #436]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001812:	4b6c      	ldr	r3, [pc, #432]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	4968      	ldr	r1, [pc, #416]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e025      	b.n	8001874 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001828:	4b66      	ldr	r3, [pc, #408]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a65      	ldr	r2, [pc, #404]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b63      	ldr	r3, [pc, #396]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4960      	ldr	r1, [pc, #384]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001846:	4b5f      	ldr	r3, [pc, #380]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	495b      	ldr	r1, [pc, #364]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fd15 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e343      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001874:	f000 fc4a 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b52      	ldr	r3, [pc, #328]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	4950      	ldr	r1, [pc, #320]	@ (80019c8 <HAL_RCC_OscConfig+0x274>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a4e      	ldr	r2, [pc, #312]	@ (80019cc <HAL_RCC_OscConfig+0x278>)
 8001892:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001894:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fbf3 	bl	8001084 <HAL_InitTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d052      	beq.n	800194e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e327      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d032      	beq.n	800191a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b4:	4b43      	ldr	r3, [pc, #268]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a42      	ldr	r2, [pc, #264]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc30 	bl	8001124 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc2c 	bl	8001124 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e310      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018da:	4b3a      	ldr	r3, [pc, #232]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a36      	ldr	r2, [pc, #216]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4931      	ldr	r1, [pc, #196]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	492c      	ldr	r1, [pc, #176]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e01a      	b.n	8001950 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a29      	ldr	r2, [pc, #164]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001926:	f7ff fbfd 	bl	8001124 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192e:	f7ff fbf9 	bl	8001124 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e2dd      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x1da>
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d074      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x21a>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d10e      	bne.n	8001986 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d064      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d160      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e2ba      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x24a>
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e026      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a6:	d115      	bne.n	80019d4 <HAL_RCC_OscConfig+0x280>
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a02      	ldr	r2, [pc, #8]	@ (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08003780 	.word	0x08003780
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004
 80019d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb96 	bl	8001124 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fb92 	bl	8001124 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e276      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0e:	4b92      	ldr	r3, [pc, #584]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x2a8>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb82 	bl	8001124 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb7e 	bl	8001124 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	@ 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e262      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a36:	4b88      	ldr	r3, [pc, #544]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2d0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d060      	beq.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x310>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d119      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d116      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a64:	4b7c      	ldr	r3, [pc, #496]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x328>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e23f      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b76      	ldr	r3, [pc, #472]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4973      	ldr	r1, [pc, #460]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	e040      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d023      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fb3d 	bl	8001124 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fb39 	bl	8001124 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e21d      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac0:	4b65      	ldr	r3, [pc, #404]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b62      	ldr	r3, [pc, #392]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	495f      	ldr	r1, [pc, #380]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb19 	bl	8001124 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fb15 	bl	8001124 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1f9      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b08:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b28:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff faf4 	bl	8001124 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff faf0 	bl	8001124 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1d4      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b52:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b68:	4a3b      	ldr	r2, [pc, #236]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fad7 	bl	8001124 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fad3 	bl	8001124 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1b7      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bac:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fa9a 	bl	8001124 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff fa96 	bl	8001124 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e17a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4d8>
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c2a:	e029      	b.n	8001c80 <HAL_RCC_OscConfig+0x52c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d115      	bne.n	8001c60 <HAL_RCC_OscConfig+0x50c>
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3a:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4a:	4a03      	ldr	r2, [pc, #12]	@ (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x52c>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c66:	4a9b      	ldr	r2, [pc, #620]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c70:	4b98      	ldr	r3, [pc, #608]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a97      	ldr	r2, [pc, #604]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff fa4c 	bl	8001124 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa48 	bl	8001124 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e12a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCC_OscConfig+0x53c>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fa35 	bl	8001124 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fa31 	bl	8001124 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e113      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ed      	bne.n	8001cbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a79      	ldr	r2, [pc, #484]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80fe 	beq.w	8001efa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80d0 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d08:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d130      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	3b01      	subs	r3, #1
 8001d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d127      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11f      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d48:	2a07      	cmp	r2, #7
 8001d4a:	bf14      	ite	ne
 8001d4c:	2201      	movne	r2, #1
 8001d4e:	2200      	moveq	r2, #0
 8001d50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d113      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d06e      	beq.n	8001e5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d069      	beq.n	8001e58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d84:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d90:	4b50      	ldr	r3, [pc, #320]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0ad      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001da0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dac:	f7ff f9ba 	bl	8001124 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f9b6 	bl	8001124 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd2:	4b40      	ldr	r3, [pc, #256]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b40      	ldr	r3, [pc, #256]	@ (8001ed8 <HAL_RCC_OscConfig+0x784>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001de2:	3a01      	subs	r2, #1
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dec:	0212      	lsls	r2, r2, #8
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	3a01      	subs	r2, #1
 8001df8:	0552      	lsls	r2, r2, #21
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0652      	lsls	r2, r2, #25
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e0c:	0912      	lsrs	r2, r2, #4
 8001e0e:	0452      	lsls	r2, r2, #17
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4930      	ldr	r1, [pc, #192]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e30:	f7ff f978 	bl	8001124 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f974 	bl	8001124 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e058      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e56:	e050      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e04f      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d148      	bne.n	8001efa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e74:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e80:	f7ff f950 	bl	8001124 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f94c 	bl	8001124 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e030      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x734>
 8001ea6:	e028      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d023      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f933 	bl	8001124 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	e00c      	b.n	8001edc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f92f 	bl	8001124 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d905      	bls.n	8001edc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e013      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ec      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4905      	ldr	r1, [pc, #20]	@ (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x7b4>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
 8001ef4:	e001      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	feeefffc 	.word	0xfeeefffc

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e7      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b75      	ldr	r3, [pc, #468]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b72      	ldr	r3, [pc, #456]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4970      	ldr	r1, [pc, #448]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cf      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b66      	ldr	r3, [pc, #408]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d908      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b63      	ldr	r3, [pc, #396]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4960      	ldr	r1, [pc, #384]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04c      	beq.n	8002024 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b5a      	ldr	r3, [pc, #360]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0a6      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001faa:	4b54      	ldr	r3, [pc, #336]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e08e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e086      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4943      	ldr	r1, [pc, #268]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f896 	bl	8001124 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff f892 	bl	8001124 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b3a      	ldr	r3, [pc, #232]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800203c:	429a      	cmp	r2, r3
 800203e:	d208      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	492b      	ldr	r1, [pc, #172]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002052:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d210      	bcs.n	8002082 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4923      	ldr	r1, [pc, #140]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e036      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208e:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4918      	ldr	r1, [pc, #96]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4910      	ldr	r1, [pc, #64]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c0:	f000 f824 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	490b      	ldr	r1, [pc, #44]	@ (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	4a09      	ldr	r2, [pc, #36]	@ (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_RCC_ClockConfig+0x1fc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ffcd 	bl	8001084 <HAL_InitTick>
 80020ea:	4603      	mov	r3, r0
 80020ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ee:	7afb      	ldrb	r3, [r7, #11]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003780 	.word	0x08003780
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b3e      	ldr	r3, [pc, #248]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d121      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d11e      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002140:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800214c:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800215c:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002168:	4a2b      	ldr	r2, [pc, #172]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d102      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e004      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d101      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002190:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d134      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0xac>
 80021b0:	e005      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	617b      	str	r3, [r7, #20]
      break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	fb03 f202 	mul.w	r2, r3, r2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	0e5b      	lsrs	r3, r3, #25
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	3301      	adds	r3, #1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002204:	69bb      	ldr	r3, [r7, #24]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	08003798 	.word	0x08003798
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4904      	ldr	r1, [pc, #16]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08003790 	.word	0x08003790

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800226c:	f7ff ffda 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4904      	ldr	r1, [pc, #16]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08003790 	.word	0x08003790

08002294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022ac:	f7ff f9ee 	bl	800168c <HAL_PWREx_GetVoltageRange>
 80022b0:	6178      	str	r0, [r7, #20]
 80022b2:	e014      	b.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	4a24      	ldr	r2, [pc, #144]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff f9de 	bl	800168c <HAL_PWREx_GetVoltageRange>
 80022d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e4:	d10b      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	@ 0x80
 80022ea:	d919      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80022f0:	d902      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e013      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e010      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	@ 0x80
 8002302:	d902      	bls.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e00a      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	@ 0x80
 800230e:	d102      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e004      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b70      	cmp	r3, #112	@ 0x70
 800231a:	d101      	bne.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0207 	bic.w	r2, r3, #7
 8002328:	4909      	ldr	r1, [pc, #36]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002360:	2300      	movs	r3, #0
 8002362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800236c:	2b00      	cmp	r3, #0
 800236e:	d041      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002374:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002378:	d02a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800237a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800237e:	d824      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002380:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002384:	d008      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800238a:	d81e      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002396:	e018      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002398:	4b86      	ldr	r3, [pc, #536]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a85      	ldr	r2, [pc, #532]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a4:	e015      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fabb 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b6:	e00c      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3320      	adds	r3, #32
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fba6 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	74fb      	strb	r3, [r7, #19]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d8:	4b76      	ldr	r3, [pc, #472]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e6:	4973      	ldr	r1, [pc, #460]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d041      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002404:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002408:	d02a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800240a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800240e:	d824      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800241a:	d81e      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d010      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002426:	e018      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002428:	4b62      	ldr	r3, [pc, #392]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a61      	ldr	r2, [pc, #388]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002432:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002434:	e015      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fa73 	bl	8002928 <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002446:	e00c      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3320      	adds	r3, #32
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fb5e 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	74fb      	strb	r3, [r7, #19]
      break;
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002476:	494f      	ldr	r1, [pc, #316]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800247e:	e001      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a0 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	4a40      	ldr	r2, [pc, #256]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b8:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c8:	4b3b      	ldr	r3, [pc, #236]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3a      	ldr	r2, [pc, #232]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fe26 	bl	8001124 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024da:	e009      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe fe22 	bl	8001124 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d902      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	74fb      	strb	r3, [r7, #19]
        break;
 80024ee:	e005      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f0:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d15c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002502:	4b2c      	ldr	r3, [pc, #176]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01f      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	d019      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800252c:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002532:	4a20      	ldr	r2, [pc, #128]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800253c:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002542:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800254c:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fde1 	bl	8001124 <HAL_GetTick>
 8002562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002564:	e00b      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fddd 	bl	8001124 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d902      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	74fb      	strb	r3, [r7, #19]
            break;
 800257c:	e006      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ec      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002592:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a2:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025aa:	e009      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
 80025b0:	e006      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025de:	4b98      	ldr	r3, [pc, #608]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f023 0203 	bic.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	4994      	ldr	r1, [pc, #592]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002600:	4b8f      	ldr	r3, [pc, #572]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f023 020c 	bic.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	498c      	ldr	r1, [pc, #560]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002622:	4b87      	ldr	r3, [pc, #540]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	4983      	ldr	r1, [pc, #524]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002644:	4b7e      	ldr	r3, [pc, #504]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	497b      	ldr	r1, [pc, #492]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002666:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002674:	4972      	ldr	r1, [pc, #456]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002688:	4b6d      	ldr	r3, [pc, #436]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	496a      	ldr	r1, [pc, #424]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026aa:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	4961      	ldr	r1, [pc, #388]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	4959      	ldr	r1, [pc, #356]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ee:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fc:	4950      	ldr	r1, [pc, #320]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002710:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	4948      	ldr	r1, [pc, #288]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002732:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	493f      	ldr	r1, [pc, #252]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d028      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002754:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	4937      	ldr	r1, [pc, #220]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002772:	d106      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b32      	ldr	r3, [pc, #200]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
 8002780:	e011      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800278a:	d10c      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	2101      	movs	r1, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8c8 	bl	8002928 <RCCEx_PLLSAI1_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b2:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	491f      	ldr	r1, [pc, #124]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027dc:	60d3      	str	r3, [r2, #12]
 80027de:	e011      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f899 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02b      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282e:	d109      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a02      	ldr	r2, [pc, #8]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
 800283c:	e014      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800284c:	d10c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f867 	bl	8002928 <RCCEx_PLLSAI1_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02f      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002874:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002882:	4928      	ldr	r1, [pc, #160]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800288e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002892:	d10d      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f844 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	74bb      	strb	r3, [r7, #18]
 80028ae:	e011      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3320      	adds	r3, #32
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f925 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002912:	4904      	ldr	r1, [pc, #16]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800291a:	7cbb      	ldrb	r3, [r7, #18]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002936:	4b75      	ldr	r3, [pc, #468]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d018      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002942:	4b72      	ldr	r3, [pc, #456]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
       ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800295a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
       ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d047      	beq.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e044      	b.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d018      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x86>
 800297c:	2b03      	cmp	r3, #3
 800297e:	d825      	bhi.n	80029cc <RCCEx_PLLSAI1_Config+0xa4>
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x62>
 8002984:	2b02      	cmp	r3, #2
 8002986:	d009      	beq.n	800299c <RCCEx_PLLSAI1_Config+0x74>
 8002988:	e020      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298a:	4b60      	ldr	r3, [pc, #384]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11d      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299a:	e01a      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800299c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e013      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ae:	4b57      	ldr	r3, [pc, #348]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ba:	4b54      	ldr	r3, [pc, #336]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ca:	e006      	b.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e004      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d2:	bf00      	nop
 80029d4:	e002      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029da:	bf00      	nop
    }

    if(status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	430b      	orrs	r3, r1
 80029f8:	4944      	ldr	r1, [pc, #272]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d17d      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a04:	4b41      	ldr	r3, [pc, #260]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a40      	ldr	r2, [pc, #256]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fb88 	bl	8001124 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a16:	e009      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a18:	f7fe fb84 	bl	8001124 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2a:	e005      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ef      	bne.n	8002a18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d160      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	0912      	lsrs	r2, r2, #4
 8002a5c:	0452      	lsls	r2, r2, #17
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	492a      	ldr	r1, [pc, #168]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	610b      	str	r3, [r1, #16]
 8002a66:	e027      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d112      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a76:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	0211      	lsls	r1, r2, #8
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6912      	ldr	r2, [r2, #16]
 8002a84:	0852      	lsrs	r2, r2, #1
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0552      	lsls	r2, r2, #21
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	491f      	ldr	r1, [pc, #124]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	610b      	str	r3, [r1, #16]
 8002a92:	e011      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6952      	ldr	r2, [r2, #20]
 8002aaa:	0852      	lsrs	r2, r2, #1
 8002aac:	3a01      	subs	r2, #1
 8002aae:	0652      	lsls	r2, r2, #25
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4916      	ldr	r1, [pc, #88]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fb2e 	bl	8001124 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aca:	e009      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002acc:	f7fe fb2a 	bl	8001124 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ade:	e005      	b.n	8002aec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b2a:	4b67      	ldr	r3, [pc, #412]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10d      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b42:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
       ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d047      	beq.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e044      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d018      	beq.n	8002b96 <RCCEx_PLLSAI2_Config+0x86>
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d825      	bhi.n	8002bb4 <RCCEx_PLLSAI2_Config+0xa4>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x62>
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d009      	beq.n	8002b84 <RCCEx_PLLSAI2_Config+0x74>
 8002b70:	e020      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b72:	4b55      	ldr	r3, [pc, #340]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11d      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b82:	e01a      	b.n	8002bba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b84:	4b50      	ldr	r3, [pc, #320]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e013      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b96:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ba2:	4b49      	ldr	r3, [pc, #292]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bb2:	e006      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e004      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bca:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	430b      	orrs	r3, r1
 8002be0:	4939      	ldr	r1, [pc, #228]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d167      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fa94 	bl	8001124 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfe:	e009      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c00:	f7fe fa90 	bl	8001124 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d902      	bls.n	8002c14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	73fb      	strb	r3, [r7, #15]
        break;
 8002c12:	e005      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c14:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ef      	bne.n	8002c00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14a      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2c:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	0912      	lsrs	r2, r2, #4
 8002c44:	0452      	lsls	r2, r2, #17
 8002c46:	430a      	orrs	r2, r1
 8002c48:	491f      	ldr	r1, [pc, #124]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	614b      	str	r3, [r1, #20]
 8002c4e:	e011      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
 8002c60:	0211      	lsls	r1, r2, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6912      	ldr	r2, [r2, #16]
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0652      	lsls	r2, r2, #25
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	4916      	ldr	r1, [pc, #88]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c74:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe fa50 	bl	8001124 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c86:	e009      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c88:	f7fe fa4c 	bl	8001124 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	73fb      	strb	r3, [r7, #15]
          break;
 8002c9a:	e005      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ef      	beq.n	8002c88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4904      	ldr	r1, [pc, #16]	@ (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e040      	b.n	8002d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f8e0 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	@ 0x24
 8002cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fae0 	bl	80032d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f825 	bl	8002d68 <UART_SetConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e01b      	b.n	8002d60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fb5f 	bl	800341c <UART_CheckIdleState>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b08a      	sub	sp, #40	@ 0x28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4ba4      	ldr	r3, [pc, #656]	@ (8003028 <UART_SetConfig+0x2c0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a99      	ldr	r2, [pc, #612]	@ (800302c <UART_SetConfig+0x2c4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a90      	ldr	r2, [pc, #576]	@ (8003030 <UART_SetConfig+0x2c8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d126      	bne.n	8002e40 <UART_SetConfig+0xd8>
 8002df2:	4b90      	ldr	r3, [pc, #576]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d81b      	bhi.n	8002e38 <UART_SetConfig+0xd0>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0xa0>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e31 	.word	0x08002e31
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1e:	e116      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e112      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e10e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e30:	2308      	movs	r3, #8
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e10a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e106      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <UART_SetConfig+0x2d0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d138      	bne.n	8002ebc <UART_SetConfig+0x154>
 8002e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d82d      	bhi.n	8002eb4 <UART_SetConfig+0x14c>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <UART_SetConfig+0xf8>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002eb5 	.word	0x08002eb5
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002eb5 	.word	0x08002eb5
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e0d8      	b.n	800304e <UART_SetConfig+0x2e6>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e0d4      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e0d0      	b.n	800304e <UART_SetConfig+0x2e6>
 8002eac:	2308      	movs	r3, #8
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0cc      	b.n	800304e <UART_SetConfig+0x2e6>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e0c8      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800303c <UART_SetConfig+0x2d4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d125      	bne.n	8002f12 <UART_SetConfig+0x1aa>
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed0:	2b30      	cmp	r3, #48	@ 0x30
 8002ed2:	d016      	beq.n	8002f02 <UART_SetConfig+0x19a>
 8002ed4:	2b30      	cmp	r3, #48	@ 0x30
 8002ed6:	d818      	bhi.n	8002f0a <UART_SetConfig+0x1a2>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d00a      	beq.n	8002ef2 <UART_SetConfig+0x18a>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d814      	bhi.n	8002f0a <UART_SetConfig+0x1a2>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <UART_SetConfig+0x182>
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d008      	beq.n	8002efa <UART_SetConfig+0x192>
 8002ee8:	e00f      	b.n	8002f0a <UART_SetConfig+0x1a2>
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef0:	e0ad      	b.n	800304e <UART_SetConfig+0x2e6>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef8:	e0a9      	b.n	800304e <UART_SetConfig+0x2e6>
 8002efa:	2304      	movs	r3, #4
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f00:	e0a5      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f02:	2308      	movs	r3, #8
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e0a1      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f10:	e09d      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4a      	ldr	r2, [pc, #296]	@ (8003040 <UART_SetConfig+0x2d8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d125      	bne.n	8002f68 <UART_SetConfig+0x200>
 8002f1c:	4b45      	ldr	r3, [pc, #276]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f28:	d016      	beq.n	8002f58 <UART_SetConfig+0x1f0>
 8002f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f2c:	d818      	bhi.n	8002f60 <UART_SetConfig+0x1f8>
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d00a      	beq.n	8002f48 <UART_SetConfig+0x1e0>
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d814      	bhi.n	8002f60 <UART_SetConfig+0x1f8>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x1d8>
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x1e8>
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x1f8>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e082      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4e:	e07e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f56:	e07a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e076      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f66:	e072      	b.n	800304e <UART_SetConfig+0x2e6>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	@ (8003044 <UART_SetConfig+0x2dc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12a      	bne.n	8002fc8 <UART_SetConfig+0x260>
 8002f72:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f80:	d01a      	beq.n	8002fb8 <UART_SetConfig+0x250>
 8002f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f86:	d81b      	bhi.n	8002fc0 <UART_SetConfig+0x258>
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8c:	d00c      	beq.n	8002fa8 <UART_SetConfig+0x240>
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f92:	d815      	bhi.n	8002fc0 <UART_SetConfig+0x258>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <UART_SetConfig+0x238>
 8002f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9c:	d008      	beq.n	8002fb0 <UART_SetConfig+0x248>
 8002f9e:	e00f      	b.n	8002fc0 <UART_SetConfig+0x258>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e052      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e04e      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e04a      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e046      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e042      	b.n	800304e <UART_SetConfig+0x2e6>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	@ (800302c <UART_SetConfig+0x2c4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d13a      	bne.n	8003048 <UART_SetConfig+0x2e0>
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <UART_SetConfig+0x2cc>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe0:	d01a      	beq.n	8003018 <UART_SetConfig+0x2b0>
 8002fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe6:	d81b      	bhi.n	8003020 <UART_SetConfig+0x2b8>
 8002fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fec:	d00c      	beq.n	8003008 <UART_SetConfig+0x2a0>
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff2:	d815      	bhi.n	8003020 <UART_SetConfig+0x2b8>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <UART_SetConfig+0x298>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffc:	d008      	beq.n	8003010 <UART_SetConfig+0x2a8>
 8002ffe:	e00f      	b.n	8003020 <UART_SetConfig+0x2b8>
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e022      	b.n	800304e <UART_SetConfig+0x2e6>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e01e      	b.n	800304e <UART_SetConfig+0x2e6>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0x2e6>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e016      	b.n	800304e <UART_SetConfig+0x2e6>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e012      	b.n	800304e <UART_SetConfig+0x2e6>
 8003028:	efff69f3 	.word	0xefff69f3
 800302c:	40008000 	.word	0x40008000
 8003030:	40013800 	.word	0x40013800
 8003034:	40021000 	.word	0x40021000
 8003038:	40004400 	.word	0x40004400
 800303c:	40004800 	.word	0x40004800
 8003040:	40004c00 	.word	0x40004c00
 8003044:	40005000 	.word	0x40005000
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a9f      	ldr	r2, [pc, #636]	@ (80032d0 <UART_SetConfig+0x568>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d17a      	bne.n	800314e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800305c:	2b08      	cmp	r3, #8
 800305e:	d824      	bhi.n	80030aa <UART_SetConfig+0x342>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0x300>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030ab 	.word	0x080030ab
 8003070:	08003095 	.word	0x08003095
 8003074:	080030ab 	.word	0x080030ab
 8003078:	0800309b 	.word	0x0800309b
 800307c:	080030ab 	.word	0x080030ab
 8003080:	080030ab 	.word	0x080030ab
 8003084:	080030ab 	.word	0x080030ab
 8003088:	080030a3 	.word	0x080030a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff f8d6 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003090:	61f8      	str	r0, [r7, #28]
        break;
 8003092:	e010      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003094:	4b8f      	ldr	r3, [pc, #572]	@ (80032d4 <UART_SetConfig+0x56c>)
 8003096:	61fb      	str	r3, [r7, #28]
        break;
 8003098:	e00d      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309a:	f7ff f837 	bl	800210c <HAL_RCC_GetSysClockFreq>
 800309e:	61f8      	str	r0, [r7, #28]
        break;
 80030a0:	e009      	b.n	80030b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030a6:	61fb      	str	r3, [r7, #28]
        break;
 80030a8:	e005      	b.n	80030b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80fb 	beq.w	80032b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d305      	bcc.n	80030da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d903      	bls.n	80030e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030e0:	e0e8      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2200      	movs	r2, #0
 80030e6:	461c      	mov	r4, r3
 80030e8:	4615      	mov	r5, r2
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	022b      	lsls	r3, r5, #8
 80030f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030f8:	0222      	lsls	r2, r4, #8
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	6849      	ldr	r1, [r1, #4]
 80030fe:	0849      	lsrs	r1, r1, #1
 8003100:	2000      	movs	r0, #0
 8003102:	4688      	mov	r8, r1
 8003104:	4681      	mov	r9, r0
 8003106:	eb12 0a08 	adds.w	sl, r2, r8
 800310a:	eb43 0b09 	adc.w	fp, r3, r9
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311c:	4650      	mov	r0, sl
 800311e:	4659      	mov	r1, fp
 8003120:	f7fd fb88 	bl	8000834 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003132:	d308      	bcc.n	8003146 <UART_SetConfig+0x3de>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313a:	d204      	bcs.n	8003146 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e0b6      	b.n	80032b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800314c:	e0b2      	b.n	80032b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003156:	d15e      	bne.n	8003216 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003158:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800315c:	2b08      	cmp	r3, #8
 800315e:	d828      	bhi.n	80031b2 <UART_SetConfig+0x44a>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <UART_SetConfig+0x400>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7ff f856 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e014      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff f868 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003198:	61f8      	str	r0, [r7, #28]
        break;
 800319a:	e010      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b4d      	ldr	r3, [pc, #308]	@ (80032d4 <UART_SetConfig+0x56c>)
 800319e:	61fb      	str	r3, [r7, #28]
        break;
 80031a0:	e00d      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe ffb3 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80031a6:	61f8      	str	r0, [r7, #28]
        break;
 80031a8:	e009      	b.n	80031be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e005      	b.n	80031be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d077      	beq.n	80032b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005a      	lsls	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d916      	bls.n	800320e <UART_SetConfig+0x4a6>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e6:	d212      	bcs.n	800320e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	4313      	orrs	r3, r2
 8003202:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	8afa      	ldrh	r2, [r7, #22]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	e052      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003214:	e04e      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003216:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800321a:	2b08      	cmp	r3, #8
 800321c:	d827      	bhi.n	800326e <UART_SetConfig+0x506>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <UART_SetConfig+0x4bc>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	0800326f 	.word	0x0800326f
 8003234:	0800325f 	.word	0x0800325f
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
 8003244:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7fe fff8 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e014      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f80a 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003254:	61f8      	str	r0, [r7, #28]
        break;
 8003256:	e010      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <UART_SetConfig+0x56c>)
 800325a:	61fb      	str	r3, [r7, #28]
        break;
 800325c:	e00d      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7fe ff55 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003262:	61f8      	str	r0, [r7, #28]
        break;
 8003264:	e009      	b.n	800327a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	61fb      	str	r3, [r7, #28]
        break;
 800326c:	e005      	b.n	800327a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003278:	bf00      	nop
    }

    if (pclk != 0U)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085a      	lsrs	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d909      	bls.n	80032ae <UART_SetConfig+0x546>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d205      	bcs.n	80032ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e002      	b.n	80032b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	@ 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40008000 	.word	0x40008000
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01a      	beq.n	80033ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d6:	d10a      	bne.n	80033ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b098      	sub	sp, #96	@ 0x60
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd fe7a 	bl	8001124 <HAL_GetTick>
 8003430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d12e      	bne.n	800349e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f88c 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d021      	beq.n	800349e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003478:	647b      	str	r3, [r7, #68]	@ 0x44
 800347a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800347e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e6      	bne.n	800345a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e062      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d149      	bne.n	8003540 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f856 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03c      	beq.n	8003540 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	623b      	str	r3, [r7, #32]
   return(result);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60fb      	str	r3, [r7, #12]
   return(result);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	617b      	str	r3, [r7, #20]
   return(result);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e011      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3758      	adds	r7, #88	@ 0x58
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e04f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003584:	d04b      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fd fdcd 	bl	8001124 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e04e      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d037      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b80      	cmp	r3, #128	@ 0x80
 80035b2:	d034      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d031      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d110      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f838 	bl	8003646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2208      	movs	r2, #8
 80035da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e029      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f8:	d111      	bne.n	800361e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f81e 	bl	8003646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0a0      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003646:	b480      	push	{r7}
 8003648:	b095      	sub	sp, #84	@ 0x54
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800366c:	643b      	str	r3, [r7, #64]	@ 0x40
 800366e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e6      	bne.n	800364e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d118      	bne.n	80036ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0310 	bic.w	r3, r3, #16
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e6      	bne.n	80036bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003702:	bf00      	nop
 8003704:	3754      	adds	r7, #84	@ 0x54
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <memset>:
 800370e:	4402      	add	r2, r0
 8003710:	4603      	mov	r3, r0
 8003712:	4293      	cmp	r3, r2
 8003714:	d100      	bne.n	8003718 <memset+0xa>
 8003716:	4770      	bx	lr
 8003718:	f803 1b01 	strb.w	r1, [r3], #1
 800371c:	e7f9      	b.n	8003712 <memset+0x4>
	...

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4d0d      	ldr	r5, [pc, #52]	@ (8003758 <__libc_init_array+0x38>)
 8003724:	4c0d      	ldr	r4, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	2600      	movs	r6, #0
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	4d0b      	ldr	r5, [pc, #44]	@ (8003760 <__libc_init_array+0x40>)
 8003732:	4c0c      	ldr	r4, [pc, #48]	@ (8003764 <__libc_init_array+0x44>)
 8003734:	f000 f818 	bl	8003768 <_init>
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	2600      	movs	r6, #0
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037d0 	.word	0x080037d0
 800375c:	080037d0 	.word	0x080037d0
 8003760:	080037d0 	.word	0x080037d0
 8003764:	080037d4 	.word	0x080037d4

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
