
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005594  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005764  08005764  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800576c  0800576c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005774  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  2000000c  08005780  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  08005780  00007148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b6  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3a  00000000  00000000  0001c3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0001ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa8  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292bb  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a10  00000000  00000000  0004a49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108172  00000000  00000000  0005feab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016801d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005674  00000000  00000000  00168060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016d6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005704 	.word	0x08005704

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005704 	.word	0x08005704

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fcaf 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82b 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9b1 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f989 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f957 	bl	80007bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800050e:	f000 f875 	bl	80005fc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_DAC1_Init>
  MX_TIM6_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <main+0x50>)
 800051c:	f004 fa0e 	bl	800493c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, BUFFER_SIZE);
 8000520:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000524:	4908      	ldr	r1, [pc, #32]	@ (8000548 <main+0x54>)
 8000526:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x58>)
 8000528:	f001 f85e 	bl	80015e8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000534:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4806      	ldr	r0, [pc, #24]	@ (8000554 <main+0x60>)
 800053a:	f002 f831 	bl	80025a0 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	bf00      	nop
 8000540:	e7fd      	b.n	800053e <main+0x4a>
 8000542:	bf00      	nop
 8000544:	20000130 	.word	0x20000130
 8000548:	20000204 	.word	0x20000204
 800054c:	20000028 	.word	0x20000028
 8000550:	200011a4 	.word	0x200011a4
 8000554:	200000d4 	.word	0x200000d4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	@ 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	@ 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f89f 	bl	80056aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f002 fe73 	bl	8003268 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fa3c 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 feaa 	bl	8003314 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 fa1d 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fa72 	bl	8003acc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 fa09 	bl	8000a04 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	@ 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061e:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000620:	4a30      	ldr	r2, [pc, #192]	@ (80006e4 <MX_ADC1_Init+0xe8>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800063e:	2204      	movs	r2, #4
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000650:	2201      	movs	r2, #1
 8000652:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800065e:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800066e:	2201      	movs	r2, #1
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000682:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 8000684:	f000 fe60 	bl	8001348 <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800068e:	f000 f9b9 	bl	8000a04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 800069e:	f001 fd9b 	bl	80021d8 <HAL_ADCEx_MultiModeConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 f9ac 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_ADC1_Init+0xec>)
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b8:	237f      	movs	r3, #127	@ 0x7f
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006bc:	2304      	movs	r3, #4
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_ADC1_Init+0xe4>)
 80006ca:	f001 f853 	bl	8001774 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006d4:	f000 f996 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000028 	.word	0x20000028
 80006e4:	50040000 	.word	0x50040000
 80006e8:	14f00020 	.word	0x14f00020

080006ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	@ 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 ffd6 	bl	80056aa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f001 ff28 	bl	800255a <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 f978 	bl	8000a04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000718:	2304      	movs	r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f002 f820 	bl	8002774 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f963 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d4 	.word	0x200000d4
 800074c:	40007400 	.word	0x40007400

08000750 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <MX_TIM6_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000768:	224f      	movs	r2, #79	@ 0x4f
 800076a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000774:	2204      	movs	r2, #4
 8000776:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_TIM6_Init+0x64>)
 8000780:	f004 f884 	bl	800488c <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800078a:	f000 f93b 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800078e:	2320      	movs	r3, #32
 8000790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_TIM6_Init+0x64>)
 800079c:	f004 f9dc 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007a6:	f000 f92d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000130 	.word	0x20000130
 80007b8:	40001000 	.word	0x40001000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f004 fa32 	bl	8004c68 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8fb 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000017c 	.word	0x2000017c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_DMA_Init+0x48>)
 8000824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000826:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <MX_DMA_Init+0x48>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6493      	str	r3, [r2, #72]	@ 0x48
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <MX_DMA_Init+0x48>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200b      	movs	r0, #11
 8000840:	f001 fe55 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000844:	200b      	movs	r0, #11
 8000846:	f001 fe6e 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200d      	movs	r0, #13
 8000850:	f001 fe4d 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000854:	200d      	movs	r0, #13
 8000856:	f001 fe66 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xc4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f002 fc99 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0xc8>)
 8000902:	f002 fae1 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000906:	2320      	movs	r3, #32
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f002 fad2 	bl	8002ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
  void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    for (int n = 0; n < BUFFER_HALFSIZE; n++) {
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e01c      	b.n	800097c <HAL_ADC_ConvHalfCpltCallback+0x48>
      //dac_buffer[n] = adc_buffer[n];
      //dac_buffer[n] = adc_buffer[n] / 2;
      if (adc_buffer[n] < MIDPOINT_VALUE) {
 8000942:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800094e:	d20a      	bcs.n	8000966 <HAL_ADC_ConvHalfCpltCallback+0x32>
        dac_buffer[n] = 2 * MIDPOINT_VALUE - adc_buffer[n];
 8000950:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	f5c3 5280 	rsb	r2, r3, #4096	@ 0x1000
 800095c:	490e      	ldr	r1, [pc, #56]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000964:	e007      	b.n	8000976 <HAL_ADC_ConvHalfCpltCallback+0x42>
      } else {
    	dac_buffer[n] = adc_buffer[n];
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096e:	490a      	ldr	r1, [pc, #40]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int n = 0; n < BUFFER_HALFSIZE; n++) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000982:	dbde      	blt.n	8000942 <HAL_ADC_ConvHalfCpltCallback+0xe>
      }
    }
  }
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000204 	.word	0x20000204
 8000998:	200011a4 	.word	0x200011a4

0800099c <HAL_ADC_ConvCpltCallback>:
  void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    for (int n = BUFFER_HALFSIZE; n < BUFFER_SIZE; n++) {
 80009a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e01c      	b.n	80009e6 <HAL_ADC_ConvCpltCallback+0x4a>
      //dac_buffer[n] = adc_buffer[n];
      // dac_buffer[n] = adc_buffer[n] / 2;
      if (adc_buffer[n] < MIDPOINT_VALUE) {
 80009ac:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <HAL_ADC_ConvCpltCallback+0x60>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009b8:	d20a      	bcs.n	80009d0 <HAL_ADC_ConvCpltCallback+0x34>
        dac_buffer[n] = 2 * MIDPOINT_VALUE - adc_buffer[n];
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_ADC_ConvCpltCallback+0x60>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	f5c3 5280 	rsb	r2, r3, #4096	@ 0x1000
 80009c6:	490e      	ldr	r1, [pc, #56]	@ (8000a00 <HAL_ADC_ConvCpltCallback+0x64>)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80009ce:	e007      	b.n	80009e0 <HAL_ADC_ConvCpltCallback+0x44>
      } else {
        dac_buffer[n] = adc_buffer[n];
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_ADC_ConvCpltCallback+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d8:	4909      	ldr	r1, [pc, #36]	@ (8000a00 <HAL_ADC_ConvCpltCallback+0x64>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int n = BUFFER_HALFSIZE; n < BUFFER_SIZE; n++) {
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ec:	dbde      	blt.n	80009ac <HAL_ADC_ConvCpltCallback+0x10>
      }
    }
  }
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000204 	.word	0x20000204
 8000a00:	200011a4 	.word	0x200011a4

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2288      	movs	r2, #136	@ 0x88
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fe16 	bl	80056aa <memset>
  if(hadc->Instance==ADC1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a3d      	ldr	r2, [pc, #244]	@ (8000b78 <HAL_ADC_MspInit+0x120>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d173      	bne.n	8000b70 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000aae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fa2b 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ac4:	f7ff ff9e 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000ace:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	4a25      	ldr	r2, [pc, #148]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <HAL_ADC_MspInit+0x124>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afe:	230b      	movs	r3, #11
 8000b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b14:	f002 f9d8 	bl	8002ec8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <HAL_ADC_MspInit+0x12c>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b48:	2220      	movs	r2, #32
 8000b4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b56:	f001 ffbf 	bl	8002ad8 <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8000b60:	f7ff ff50 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a06      	ldr	r2, [pc, #24]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <HAL_ADC_MspInit+0x128>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b70:	bf00      	nop
 8000b72:	37b0      	adds	r7, #176	@ 0xb0
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	50040000 	.word	0x50040000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	40020008 	.word	0x40020008

08000b88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c54 <HAL_DAC_MspInit+0xcc>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d150      	bne.n	8000c4c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bae:	4a2a      	ldr	r2, [pc, #168]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a24      	ldr	r2, [pc, #144]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <HAL_DAC_MspInit+0xd0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f002 f96a 	bl	8002ec8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c60 <HAL_DAC_MspInit+0xd8>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c20:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c24:	2220      	movs	r2, #32
 8000c26:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000c30:	480a      	ldr	r0, [pc, #40]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c32:	f001 ff51 	bl	8002ad8 <HAL_DMA_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000c3c:	f7ff fee2 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <HAL_DAC_MspInit+0xd4>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	@ 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40007400 	.word	0x40007400
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	200000e8 	.word	0x200000e8
 8000c60:	40020030 	.word	0x40020030

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_TIM_Base_MspInit+0x38>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10b      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40001000 	.word	0x40001000
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2288      	movs	r2, #136	@ 0x88
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 fcf0 	bl	80056aa <memset>
  if(huart->Instance==USART2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a21      	ldr	r2, [pc, #132]	@ (8000d54 <HAL_UART_MspInit+0xb0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d13b      	bne.n	8000d4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 f917 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff fe8a 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d20:	230c      	movs	r3, #12
 8000d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f002 f8be 	bl	8002ec8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37b0      	adds	r7, #176	@ 0xb0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f8af 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <DMA1_Channel1_IRQHandler+0x10>)
 8000dc2:	f001 ffa1 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000008c 	.word	0x2000008c

08000dd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <DMA1_Channel3_IRQHandler+0x10>)
 8000dd6:	f001 ff97 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000e8 	.word	0x200000e8

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f004 fc41 	bl	80056bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fb5b 	bl	80004f4 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	08005774 	.word	0x08005774
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e54:	20002148 	.word	0x20002148

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_Init+0x3c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_Init+0x3c>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f001 fb30 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f80f 	bl	8000e9c <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e001      	b.n	8000e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8a:	f7ff fdc1 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d023      	beq.n	8000ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <HAL_InitTick+0x70>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_InitTick+0x6c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fb3b 	bl	8002542 <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d809      	bhi.n	8000eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee0:	f001 fb05 	bl	80024ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_InitTick+0x74>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e007      	b.n	8000efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e004      	b.n	8000efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20002144 	.word	0x20002144

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20002144 	.word	0x20002144

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3360      	adds	r3, #96	@ 0x60
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <LL_ADC_SetOffset+0x44>)
 8001026:	4013      	ands	r3, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	4313      	orrs	r3, r2
 8001034:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	03fff000 	.word	0x03fff000

0800104c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3360      	adds	r3, #96	@ 0x60
 800105a:	461a      	mov	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3360      	adds	r3, #96	@ 0x60
 8001088:	461a      	mov	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3330      	adds	r3, #48	@ 0x30
 80010e4:	461a      	mov	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	4413      	add	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	211f      	movs	r1, #31
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	0e9b      	lsrs	r3, r3, #26
 800110c:	f003 011f 	and.w	r1, r3, #31
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	431a      	orrs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3314      	adds	r3, #20
 800113c:	461a      	mov	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	0e5b      	lsrs	r3, r3, #25
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	0d1b      	lsrs	r3, r3, #20
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2107      	movs	r1, #7
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0d1b      	lsrs	r3, r3, #20
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0318 	and.w	r3, r3, #24
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011a8:	40d9      	lsrs	r1, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	400b      	ands	r3, r1
 80011ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	0007ffff 	.word	0x0007ffff

080011cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 031f 	and.w	r3, r3, #31
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800121c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001244:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001248:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001294:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012e6:	f043 0204 	orr.w	r2, r3, #4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b04      	cmp	r3, #4
 800130c:	d101      	bne.n	8001312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b08      	cmp	r3, #8
 8001332:	d101      	bne.n	8001338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e130      	b.n	80015c4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fb71 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff3f 	bl	800120c <LL_ADC_IsDeepPowerDownEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff25 	bl	80011e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff5a 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d115      	bne.n	80013da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3e 	bl	8001234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013b8:	4b84      	ldr	r3, [pc, #528]	@ (80015cc <HAL_ADC_Init+0x284>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	4a84      	ldr	r2, [pc, #528]	@ (80015d0 <HAL_ADC_Init+0x288>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff3c 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10d      	bne.n	8001406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff75 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 8001410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80c9 	bne.w	80015b2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80c5 	bne.w	80015b2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <LL_ADC_IsEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d115      	bne.n	8001474 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001448:	4862      	ldr	r0, [pc, #392]	@ (80015d4 <HAL_ADC_Init+0x28c>)
 800144a:	f7ff ff2f 	bl	80012ac <LL_ADC_IsEnabled>
 800144e:	4604      	mov	r4, r0
 8001450:	4861      	ldr	r0, [pc, #388]	@ (80015d8 <HAL_ADC_Init+0x290>)
 8001452:	f7ff ff2b 	bl	80012ac <LL_ADC_IsEnabled>
 8001456:	4603      	mov	r3, r0
 8001458:	431c      	orrs	r4, r3
 800145a:	4860      	ldr	r0, [pc, #384]	@ (80015dc <HAL_ADC_Init+0x294>)
 800145c:	f7ff ff26 	bl	80012ac <LL_ADC_IsEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	4323      	orrs	r3, r4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	485c      	ldr	r0, [pc, #368]	@ (80015e0 <HAL_ADC_Init+0x298>)
 8001470:	f7ff fd94 	bl	8000f9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e5b      	ldrb	r3, [r3, #25]
 8001478:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001484:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800148a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001492:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	3b01      	subs	r3, #1
 80014a8:	045b      	lsls	r3, r3, #17
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b44      	ldr	r3, [pc, #272]	@ (80015e4 <HAL_ADC_Init+0x29c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	430b      	orrs	r3, r1
 80014de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff1b 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 80014ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d13d      	bne.n	800156e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d13a      	bne.n	800156e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001504:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	69b9      	ldr	r1, [r7, #24]
 800151e:	430b      	orrs	r3, r1
 8001520:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001528:	2b01      	cmp	r3, #1
 800152a:	d118      	bne.n	800155e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001548:	4311      	orrs	r1, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800154e:	430a      	orrs	r2, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	e007      	b.n	800156e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10c      	bne.n	8001590 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	f023 010f 	bic.w	r1, r3, #15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	631a      	str	r2, [r3, #48]	@ 0x30
 800158e:	e007      	b.n	80015a0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020f 	bic.w	r2, r2, #15
 800159e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	f023 0303 	bic.w	r3, r3, #3
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80015b0:	e007      	b.n	80015c2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3724      	adds	r7, #36	@ 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	053e2d63 	.word	0x053e2d63
 80015d4:	50040000 	.word	0x50040000
 80015d8:	50040100 	.word	0x50040100
 80015dc:	50040200 	.word	0x50040200
 80015e0:	50040300 	.word	0x50040300
 80015e4:	fff0c007 	.word	0xfff0c007

080015e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f4:	4853      	ldr	r0, [pc, #332]	@ (8001744 <HAL_ADC_Start_DMA+0x15c>)
 80015f6:	f7ff fde9 	bl	80011cc <LL_ADC_GetMultimode>
 80015fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fe7a 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 8093 	bne.w	8001734 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_ADC_Start_DMA+0x34>
 8001618:	2302      	movs	r3, #2
 800161a:	e08e      	b.n	800173a <HAL_ADC_Start_DMA+0x152>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a47      	ldr	r2, [pc, #284]	@ (8001748 <HAL_ADC_Start_DMA+0x160>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d008      	beq.n	8001640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b05      	cmp	r3, #5
 8001638:	d002      	beq.n	8001640 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d172      	bne.n	8001726 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 fc89 	bl	8001f58 <ADC_Enable>
 8001646:	4603      	mov	r3, r0
 8001648:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d165      	bne.n	800171c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001654:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a38      	ldr	r2, [pc, #224]	@ (800174c <HAL_ADC_Start_DMA+0x164>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d002      	beq.n	8001674 <HAL_ADC_Start_DMA+0x8c>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e000      	b.n	8001676 <HAL_ADC_Start_DMA+0x8e>
 8001674:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <HAL_ADC_Start_DMA+0x168>)
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4293      	cmp	r3, r2
 800167c:	d002      	beq.n	8001684 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f023 0206 	bic.w	r2, r3, #6
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b4:	4a27      	ldr	r2, [pc, #156]	@ (8001754 <HAL_ADC_Start_DMA+0x16c>)
 80016b6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <HAL_ADC_Start_DMA+0x170>)
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	4a25      	ldr	r2, [pc, #148]	@ (800175c <HAL_ADC_Start_DMA+0x174>)
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	221c      	movs	r2, #28
 80016ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0210 	orr.w	r2, r2, #16
 80016e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3340      	adds	r3, #64	@ 0x40
 8001702:	4619      	mov	r1, r3
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f001 fa9e 	bl	8002c48 <HAL_DMA_Start_IT>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fddc 	bl	80012d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800171a:	e00d      	b.n	8001738 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001724:	e008      	b.n	8001738 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001732:	e001      	b.n	8001738 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	50040300 	.word	0x50040300
 8001748:	50040200 	.word	0x50040200
 800174c:	50040100 	.word	0x50040100
 8001750:	50040000 	.word	0x50040000
 8001754:	08002065 	.word	0x08002065
 8001758:	0800213d 	.word	0x0800213d
 800175c:	08002159 	.word	0x08002159

08001760 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b6      	sub	sp, #216	@ 0xd8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x22>
 8001792:	2302      	movs	r3, #2
 8001794:	e3c9      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x7b6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fda9 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 83aa 	bne.w	8001f04 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d824      	bhi.n	800180a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	3b02      	subs	r3, #2
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d81b      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x8e>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <HAL_ADC_ConfigChannel+0x5c>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e9 	.word	0x080017e9
 80017d8:	080017f1 	.word	0x080017f1
 80017dc:	080017f9 	.word	0x080017f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017e0:	230c      	movs	r3, #12
 80017e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017e6:	e010      	b.n	800180a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017e8:	2312      	movs	r3, #18
 80017ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017ee:	e00c      	b.n	800180a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017f0:	2318      	movs	r3, #24
 80017f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017f6:	e008      	b.n	800180a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001800:	e003      	b.n	800180a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001802:	2306      	movs	r3, #6
 8001804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001808:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001818:	f7ff fc5c 	bl	80010d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fd6a 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 8001826:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fd76 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 8001834:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 81a4 	bne.w	8001b8a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 819f 	bne.w	8001b8a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	461a      	mov	r2, r3
 800185a:	f7ff fc67 	bl	800112c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00a      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6919      	ldr	r1, [r3, #16]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001890:	f7ff fbb8 	bl	8001004 <LL_ADC_SetOffset>
 8001894:	e179      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbd5 	bl	800104c <LL_ADC_GetOffsetChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x14e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fbca 	bl	800104c <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	e01e      	b.n	8001900 <HAL_ADC_ConfigChannel+0x18c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fbbf 	bl	800104c <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e004      	b.n	80018fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80018f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1a4>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0e9b      	lsrs	r3, r3, #26
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	e018      	b.n	800194a <HAL_ADC_ConfigChannel+0x1d6>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800192c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800193c:	2320      	movs	r3, #32
 800193e:	e004      	b.n	800194a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800194a:	429a      	cmp	r2, r3
 800194c:	d106      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fb8e 	bl	8001078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb72 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x214>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fb67 	bl	800104c <LL_ADC_GetOffsetChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 021f 	and.w	r2, r3, #31
 8001986:	e01e      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x252>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb5c 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e004      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80019ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_ConfigChannel+0x26a>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	e018      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x29c>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80019f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80019fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a02:	2320      	movs	r3, #32
 8001a04:	e004      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d106      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb2b 	bl	8001078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2102      	movs	r1, #2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb0f 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x2da>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb04 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	0e9b      	lsrs	r3, r3, #26
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	e01e      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x318>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2102      	movs	r1, #2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff faf9 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x330>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	e014      	b.n	8001ace <HAL_ADC_ConfigChannel+0x35a>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e004      	b.n	8001ace <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff facc 	bl	8001078 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fab0 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x398>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2103      	movs	r1, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff faa5 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	e017      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x3c8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2103      	movs	r1, #3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa9a 	bl	800104c <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e003      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x3e0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	e011      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x404>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b64:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2103      	movs	r1, #3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fa77 	bl	8001078 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb8c 	bl	80012ac <LL_ADC_IsEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 8140 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f7ff faeb 	bl	8001184 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4a8f      	ldr	r2, [pc, #572]	@ (8001df0 <HAL_ADC_ConfigChannel+0x67c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	f040 8131 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10b      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x46e>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2b09      	cmp	r3, #9
 8001bd8:	bf94      	ite	ls
 8001bda:	2301      	movls	r3, #1
 8001bdc:	2300      	movhi	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	e019      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x4a2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	e003      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d079      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x4c2>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	069b      	lsls	r3, r3, #26
 8001c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c34:	e015      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x4ee>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e003      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	069b      	lsls	r3, r3, #26
 8001c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x50e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	e017      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x53e>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	ea42 0103 	orr.w	r1, r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x564>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0e9b      	lsrs	r3, r3, #26
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	051b      	lsls	r3, r3, #20
 8001cd6:	e018      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x596>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	e081      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x5b6>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	3301      	adds	r3, #1
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d28:	e015      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x5e2>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	069b      	lsls	r3, r3, #26
 8001d52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x602>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	e017      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x632>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	61bb      	str	r3, [r7, #24]
  return result;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	ea42 0103 	orr.w	r1, r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x65e>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0e9b      	lsrs	r3, r3, #26
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f003 021f 	and.w	r2, r3, #31
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b1e      	subs	r3, #30
 8001dca:	051b      	lsls	r3, r3, #20
 8001dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	e01e      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x69c>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  return result;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d104      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e006      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x688>
 8001dee:	bf00      	nop
 8001df0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	051b      	lsls	r3, r3, #20
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7ff f988 	bl	800112c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d07a      	beq.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e28:	4843      	ldr	r0, [pc, #268]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e2a:	f7ff f8dd 	bl	8000fe8 <LL_ADC_GetCommonPathInternalCh>
 8001e2e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a41      	ldr	r2, [pc, #260]	@ (8001f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d12c      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d126      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0x6e8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d15d      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e64:	4619      	mov	r1, r3
 8001e66:	4834      	ldr	r0, [pc, #208]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e68:	f7ff f8ab 	bl	8000fc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6c:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	4a36      	ldr	r2, [pc, #216]	@ (8001f4c <HAL_ADC_ConfigChannel+0x7d8>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e86:	e002      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e94:	e040      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d118      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d112      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x74c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d12d      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ec4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481b      	ldr	r0, [pc, #108]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ecc:	f7ff f879 	bl	8000fc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed0:	e024      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f54 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d120      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11a      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001efa:	4619      	mov	r1, r3
 8001efc:	480e      	ldr	r0, [pc, #56]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001efe:	f7ff f860 	bl	8000fc2 <LL_ADC_SetCommonPathInternalCh>
 8001f02:	e00c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f18:	bf00      	nop
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	37d8      	adds	r7, #216	@ 0xd8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	80080000 	.word	0x80080000
 8001f38:	50040300 	.word	0x50040300
 8001f3c:	c7520000 	.word	0xc7520000
 8001f40:	50040000 	.word	0x50040000
 8001f44:	50040200 	.word	0x50040200
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	cb840000 	.word	0xcb840000
 8001f54:	80000001 	.word	0x80000001

08001f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f99f 	bl	80012ac <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d169      	bne.n	8002048 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <ADC_Enable+0xfc>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e055      	b.n	800204a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f96e 	bl	8001284 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fa8:	482b      	ldr	r0, [pc, #172]	@ (8002058 <ADC_Enable+0x100>)
 8001faa:	f7ff f81d 	bl	8000fe8 <LL_ADC_GetCommonPathInternalCh>
 8001fae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb8:	4b28      	ldr	r3, [pc, #160]	@ (800205c <ADC_Enable+0x104>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <ADC_Enable+0x108>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fd2:	e002      	b.n	8001fda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ffac 	bl	8000f3c <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe6:	e028      	b.n	800203a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f95d 	bl	80012ac <LL_ADC_IsEnabled>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f941 	bl	8001284 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002002:	f7fe ff9b 	bl	8000f3c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d914      	bls.n	800203a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00d      	beq.n	800203a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e007      	b.n	800204a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d1cf      	bne.n	8001fe8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	8000003f 	.word	0x8000003f
 8002058:	50040300 	.word	0x50040300
 800205c:	20000000 	.word	0x20000000
 8002060:	053e2d63 	.word	0x053e2d63

08002064 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002076:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800207a:	2b00      	cmp	r3, #0
 800207c:	d14b      	bne.n	8002116 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f806 	bl	80010ae <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d032      	beq.n	800210e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d12b      	bne.n	800210e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80020da:	e018      	b.n	800210e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d111      	bne.n	800210e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7fe fc44 	bl	800099c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002114:	e00e      	b.n	8002134 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff fb1c 	bl	8001760 <HAL_ADC_ErrorCallback>
}
 8002128:	e004      	b.n	8002134 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7fe fbf2 	bl	8000934 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f043 0204 	orr.w	r2, r3, #4
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff faee 	bl	8001760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <LL_ADC_IsEnabled>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <LL_ADC_IsEnabled+0x18>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <LL_ADC_IsEnabled+0x1a>
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d101      	bne.n	80021ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b09f      	sub	sp, #124	@ 0x7c
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e093      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002202:	2300      	movs	r3, #0
 8002204:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a47      	ldr	r2, [pc, #284]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d102      	bne.n	8002216 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002210:	4b46      	ldr	r3, [pc, #280]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	e001      	b.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f043 0220 	orr.w	r2, r3, #32
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e072      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ffb9 	bl	80021b2 <LL_ADC_REG_IsConversionOngoing>
 8002240:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffb3 	bl	80021b2 <LL_ADC_REG_IsConversionOngoing>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d154      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002254:	2b00      	cmp	r3, #0
 8002256:	d151      	bne.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002258:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800225a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02c      	beq.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002276:	035b      	lsls	r3, r3, #13
 8002278:	430b      	orrs	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800227e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002280:	4829      	ldr	r0, [pc, #164]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002282:	f7ff ff83 	bl	800218c <LL_ADC_IsEnabled>
 8002286:	4604      	mov	r4, r0
 8002288:	4828      	ldr	r0, [pc, #160]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800228a:	f7ff ff7f 	bl	800218c <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	431c      	orrs	r4, r3
 8002292:	4828      	ldr	r0, [pc, #160]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002294:	f7ff ff7a 	bl	800218c <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	4323      	orrs	r3, r4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d137      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022a8:	f023 030f 	bic.w	r3, r3, #15
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	6892      	ldr	r2, [r2, #8]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022bc:	e028      	b.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ca:	4817      	ldr	r0, [pc, #92]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022cc:	f7ff ff5e 	bl	800218c <LL_ADC_IsEnabled>
 80022d0:	4604      	mov	r4, r0
 80022d2:	4816      	ldr	r0, [pc, #88]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022d4:	f7ff ff5a 	bl	800218c <LL_ADC_IsEnabled>
 80022d8:	4603      	mov	r3, r0
 80022da:	431c      	orrs	r4, r3
 80022dc:	4815      	ldr	r0, [pc, #84]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022de:	f7ff ff55 	bl	800218c <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4323      	orrs	r3, r4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d112      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022f2:	f023 030f 	bic.w	r3, r3, #15
 80022f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022fa:	e009      	b.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800230e:	e000      	b.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002310:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800231a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800231e:	4618      	mov	r0, r3
 8002320:	377c      	adds	r7, #124	@ 0x7c
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	50040000 	.word	0x50040000
 800232c:	50040100 	.word	0x50040100
 8002330:	50040300 	.word	0x50040300
 8002334:	50040200 	.word	0x50040200

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e014      	b.n	8002596 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fb03 	bl	8000b88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	795b      	ldrb	r3, [r3, #5]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_DAC_Start_DMA+0x1e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0ab      	b.n	8002716 <HAL_DAC_Start_DMA+0x176>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2202      	movs	r2, #2
 80025c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12f      	bne.n	8002630 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_DAC_Start_DMA+0x180>)
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a51      	ldr	r2, [pc, #324]	@ (8002724 <HAL_DAC_Start_DMA+0x184>)
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_DAC_Start_DMA+0x188>)
 80025e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d013      	beq.n	8002626 <HAL_DAC_Start_DMA+0x86>
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d845      	bhi.n	8002690 <HAL_DAC_Start_DMA+0xf0>
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_DAC_Start_DMA+0x72>
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d005      	beq.n	800261c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002610:	e03e      	b.n	8002690 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3308      	adds	r3, #8
 8002618:	613b      	str	r3, [r7, #16]
        break;
 800261a:	e03c      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	613b      	str	r3, [r7, #16]
        break;
 8002624:	e037      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3310      	adds	r3, #16
 800262c:	613b      	str	r3, [r7, #16]
        break;
 800262e:	e032      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a3d      	ldr	r2, [pc, #244]	@ (800272c <HAL_DAC_Start_DMA+0x18c>)
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a3c      	ldr	r2, [pc, #240]	@ (8002730 <HAL_DAC_Start_DMA+0x190>)
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a3b      	ldr	r2, [pc, #236]	@ (8002734 <HAL_DAC_Start_DMA+0x194>)
 8002646:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002656:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d013      	beq.n	8002686 <HAL_DAC_Start_DMA+0xe6>
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d817      	bhi.n	8002694 <HAL_DAC_Start_DMA+0xf4>
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_DAC_Start_DMA+0xd2>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002670:	e010      	b.n	8002694 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	613b      	str	r3, [r7, #16]
        break;
 800267a:	e00c      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3318      	adds	r3, #24
 8002682:	613b      	str	r3, [r7, #16]
        break;
 8002684:	e007      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	331c      	adds	r3, #28
 800268c:	613b      	str	r3, [r7, #16]
        break;
 800268e:	e002      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002690:	bf00      	nop
 8002692:	e000      	b.n	8002696 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002694:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6898      	ldr	r0, [r3, #8]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	f000 fac7 	bl	8002c48 <HAL_DMA_Start_IT>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
 80026be:	e010      	b.n	80026e2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80026ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68d8      	ldr	r0, [r3, #12]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	f000 fab5 	bl	8002c48 <HAL_DMA_Start_IT>
 80026de:	4603      	mov	r3, r0
 80026e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e005      	b.n	8002714 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002714:	7dfb      	ldrb	r3, [r7, #23]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	080029c3 	.word	0x080029c3
 8002724:	080029e5 	.word	0x080029e5
 8002728:	08002a01 	.word	0x08002a01
 800272c:	08002a6b 	.word	0x08002a6b
 8002730:	08002a8d 	.word	0x08002a8d
 8002734:	08002aa9 	.word	0x08002aa9

08002738 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	795b      	ldrb	r3, [r3, #5]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_DAC_ConfigChannel+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e114      	b.n	80029ba <HAL_DAC_ConfigChannel+0x246>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2202      	movs	r2, #2
 800279a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	f040 8081 	bne.w	80028a8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fbc9 	bl	8000f3c <HAL_GetTick>
 80027aa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d140      	bne.n	8002834 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027b2:	e018      	b.n	80027e6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027b4:	f7fe fbc2 	bl	8000f3c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d911      	bls.n	80027e6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f043 0208 	orr.w	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2203      	movs	r2, #3
 80027e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0e9      	b.n	80029ba <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1df      	bne.n	80027b4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fe fbad 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	6992      	ldr	r2, [r2, #24]
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40
 8002804:	e023      	b.n	800284e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002806:	f7fe fb99 	bl	8000f3c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d90f      	bls.n	8002834 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	2b00      	cmp	r3, #0
 800281c:	da0a      	bge.n	8002834 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f043 0208 	orr.w	r2, r3, #8
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2203      	movs	r2, #3
 800282e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0c2      	b.n	80029ba <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	dbe3      	blt.n	8002806 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800283e:	2001      	movs	r0, #1
 8002840:	f7fe fb88 	bl	8000f54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	6992      	ldr	r2, [r2, #24]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	ea02 0103 	and.w	r1, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	21ff      	movs	r1, #255	@ 0xff
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	ea02 0103 	and.w	r1, r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d11d      	bne.n	80028ec <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	221f      	movs	r2, #31
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2207      	movs	r2, #7
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	431a      	orrs	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43da      	mvns	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	22c0      	movs	r2, #192	@ 0xc0
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff feb1 	bl	8002738 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	711a      	strb	r2, [r3, #4]
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff feaa 	bl	800274c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff fea0 	bl	8002760 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	711a      	strb	r2, [r3, #4]
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ffd8 	bl	8002a2e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	711a      	strb	r2, [r3, #4]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ffd1 	bl	8002a42 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff ffc7 	bl	8002a56 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	711a      	strb	r2, [r3, #4]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e098      	b.n	8002c1c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <HAL_DMA_Init+0x150>)
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d80f      	bhi.n	8002b16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <HAL_DMA_Init+0x154>)
 8002afe:	4413      	add	r3, r2
 8002b00:	4a4b      	ldr	r2, [pc, #300]	@ (8002c30 <HAL_DMA_Init+0x158>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	009a      	lsls	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a48      	ldr	r2, [pc, #288]	@ (8002c34 <HAL_DMA_Init+0x15c>)
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b14:	e00e      	b.n	8002b34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b46      	ldr	r3, [pc, #280]	@ (8002c38 <HAL_DMA_Init+0x160>)
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a43      	ldr	r2, [pc, #268]	@ (8002c30 <HAL_DMA_Init+0x158>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	009a      	lsls	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_DMA_Init+0x164>)
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b8e:	d039      	beq.n	8002c04 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <HAL_DMA_Init+0x15c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11a      	bne.n	8002bd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <HAL_DMA_Init+0x168>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f003 031c 	and.w	r3, r3, #28
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4924      	ldr	r1, [pc, #144]	@ (8002c40 <HAL_DMA_Init+0x168>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bb4:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <HAL_DMA_Init+0x168>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc0:	f003 031c 	and.w	r3, r3, #28
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	491d      	ldr	r1, [pc, #116]	@ (8002c40 <HAL_DMA_Init+0x168>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
 8002bce:	e019      	b.n	8002c04 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <HAL_DMA_Init+0x16c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	f003 031c 	and.w	r3, r3, #28
 8002bdc:	210f      	movs	r1, #15
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	4917      	ldr	r1, [pc, #92]	@ (8002c44 <HAL_DMA_Init+0x16c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bea:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <HAL_DMA_Init+0x16c>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f003 031c 	and.w	r3, r3, #28
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4911      	ldr	r1, [pc, #68]	@ (8002c44 <HAL_DMA_Init+0x16c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40020407 	.word	0x40020407
 8002c2c:	bffdfff8 	.word	0xbffdfff8
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	40020000 	.word	0x40020000
 8002c38:	bffdfbf8 	.word	0xbffdfbf8
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	400200a8 	.word	0x400200a8
 8002c44:	400204a8 	.word	0x400204a8

08002c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Start_IT+0x20>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e04b      	b.n	8002d00 <HAL_DMA_Start_IT+0xb8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d13a      	bne.n	8002cf2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f8e0 	bl	8002e66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 020e 	orr.w	r2, r2, #14
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e00f      	b.n	8002ce0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 020a 	orr.w	r2, r2, #10
 8002cde:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e005      	b.n	8002cfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f003 031c 	and.w	r3, r3, #28
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d026      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f003 021c 	and.w	r2, r3, #28
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2104      	movs	r1, #4
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d071      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d80:	e06c      	b.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 031c 	and.w	r3, r3, #28
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02e      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d029      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020a 	bic.w	r2, r2, #10
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f003 021c 	and.w	r2, r3, #28
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d038      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002df2:	e033      	b.n	8002e5c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f003 031c 	and.w	r3, r3, #28
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02a      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d025      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 020e 	bic.w	r2, r2, #14
 8002e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f003 021c 	and.w	r2, r3, #28
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
}
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	f003 021c 	and.w	r2, r3, #28
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d108      	bne.n	8002eaa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ea8:	e007      	b.n	8002eba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	e17f      	b.n	80031d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8171 	beq.w	80031d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d005      	beq.n	8002f08 <HAL_GPIO_Init+0x40>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d130      	bne.n	8002f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0201 	and.w	r2, r3, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d118      	bne.n	8002fa8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	6939      	ldr	r1, [r7, #16]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ac 	beq.w	80031d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	4b5f      	ldr	r3, [pc, #380]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	4a5e      	ldr	r2, [pc, #376]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6613      	str	r3, [r2, #96]	@ 0x60
 8003086:	4b5c      	ldr	r3, [pc, #368]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003092:	4a5a      	ldr	r2, [pc, #360]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_Init+0x242>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003200 <HAL_GPIO_Init+0x338>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_Init+0x23e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003204 <HAL_GPIO_Init+0x33c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x23a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003208 <HAL_GPIO_Init+0x340>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x236>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4c      	ldr	r2, [pc, #304]	@ (800320c <HAL_GPIO_Init+0x344>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x232>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003210 <HAL_GPIO_Init+0x348>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x22e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <HAL_GPIO_Init+0x34c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x22a>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x244>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x244>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x244>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x244>
 800310a:	2300      	movs	r3, #0
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800311c:	4937      	ldr	r1, [pc, #220]	@ (80031fc <HAL_GPIO_Init+0x334>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800312a:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <HAL_GPIO_Init+0x350>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800314e:	4a32      	ldr	r2, [pc, #200]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003154:	4b30      	ldr	r3, [pc, #192]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003178:	4a27      	ldr	r2, [pc, #156]	@ (8003218 <HAL_GPIO_Init+0x350>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800317e:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <HAL_GPIO_Init+0x350>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031cc:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <HAL_GPIO_Init+0x350>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f47f ae78 	bne.w	8002ed8 <HAL_GPIO_Init+0x10>
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	48000400 	.word	0x48000400
 8003204:	48000800 	.word	0x48000800
 8003208:	48000c00 	.word	0x48000c00
 800320c:	48001000 	.word	0x48001000
 8003210:	48001400 	.word	0x48001400
 8003214:	48001800 	.word	0x48001800
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003238:	e002      	b.n	8003240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_PWREx_GetVoltageRange+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003276:	d130      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003284:	d038      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2232      	movs	r2, #50	@ 0x32
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ac:	e002      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c0:	d102      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f2      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d110      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d007      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f0:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000
 800330c:	20000000 	.word	0x20000000
 8003310:	431bde83 	.word	0x431bde83

08003314 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e3ca      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003326:	4b97      	ldr	r3, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003330:	4b94      	ldr	r3, [pc, #592]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80e4 	beq.w	8003510 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	f040 808b 	bne.w	800346c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 8087 	bne.w	800346c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800335e:	4b89      	ldr	r3, [pc, #548]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e3a2      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	4b82      	ldr	r3, [pc, #520]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_RCC_OscConfig+0x7c>
 8003386:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800338e:	e005      	b.n	800339c <HAL_RCC_OscConfig+0x88>
 8003390:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800339c:	4293      	cmp	r3, r2
 800339e:	d223      	bcs.n	80033e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fd55 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e383      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b4:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a72      	ldr	r2, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b70      	ldr	r3, [pc, #448]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	496d      	ldr	r1, [pc, #436]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4968      	ldr	r1, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e025      	b.n	8003434 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a65      	ldr	r2, [pc, #404]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4960      	ldr	r1, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003406:	4b5f      	ldr	r3, [pc, #380]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	495b      	ldr	r1, [pc, #364]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd15 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e343      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003434:	f000 fc4a 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b52      	ldr	r3, [pc, #328]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4950      	ldr	r1, [pc, #320]	@ (8003588 <HAL_RCC_OscConfig+0x274>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	4a4e      	ldr	r2, [pc, #312]	@ (800358c <HAL_RCC_OscConfig+0x278>)
 8003452:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003454:	4b4e      	ldr	r3, [pc, #312]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fd1f 	bl	8000e9c <HAL_InitTick>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d052      	beq.n	800350e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	e327      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003474:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a42      	ldr	r2, [pc, #264]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003480:	f7fd fd5c 	bl	8000f3c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003488:	f7fd fd58 	bl	8000f3c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e310      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349a:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a6:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a36      	ldr	r2, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4931      	ldr	r1, [pc, #196]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	492c      	ldr	r1, [pc, #176]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	e01a      	b.n	8003510 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034da:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e6:	f7fd fd29 	bl	8000f3c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ee:	f7fd fd25 	bl	8000f3c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e2dd      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003500:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x1da>
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800350e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d074      	beq.n	8003606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x21a>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d10e      	bne.n	8003546 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d10b      	bne.n	8003546 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d064      	beq.n	8003604 <HAL_RCC_OscConfig+0x2f0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d160      	bne.n	8003604 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e2ba      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x24a>
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e026      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003566:	d115      	bne.n	8003594 <HAL_RCC_OscConfig+0x280>
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800356e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a02      	ldr	r2, [pc, #8]	@ (8003584 <HAL_RCC_OscConfig+0x270>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x298>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	0800571c 	.word	0x0800571c
 800358c:	20000000 	.word	0x20000000
 8003590:	20000004 	.word	0x20000004
 8003594:	4ba0      	ldr	r3, [pc, #640]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a9f      	ldr	r2, [pc, #636]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fcc2 	bl	8000f3c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fcbe 	bl	8000f3c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e276      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	4b92      	ldr	r3, [pc, #584]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x2a8>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fcae 	bl	8000f3c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fcaa 	bl	8000f3c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e262      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2d0>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d060      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x310>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d119      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d116      	bne.n	8003652 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b7c      	ldr	r3, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x328>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e23f      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4973      	ldr	r1, [pc, #460]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	e040      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365a:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fc69 	bl	8000f3c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd fc65 	bl	8000f3c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e21d      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	4b65      	ldr	r3, [pc, #404]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b62      	ldr	r3, [pc, #392]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	495f      	ldr	r1, [pc, #380]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e018      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fc45 	bl	8000f3c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd fc41 	bl	8000f3c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1f9      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	4b53      	ldr	r3, [pc, #332]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03c      	beq.n	800375a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd fc20 	bl	8000f3c <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd fc1c 	bl	8000f3c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1d4      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003712:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <HAL_RCC_OscConfig+0x3ec>
 8003720:	e01b      	b.n	800375a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003728:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd fc03 	bl	8000f3c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd fbff 	bl	8000f3c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1b7      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ef      	bne.n	800373a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a6 	beq.w	80038b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800376c:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377c:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003782:	6593      	str	r3, [r2, #88]	@ 0x58
 8003784:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	4b21      	ldr	r3, [pc, #132]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d118      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a0:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ac:	f7fd fbc6 	bl	8000f3c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b4:	f7fd fbc2 	bl	8000f3c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e17a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_RCC_OscConfig+0x508>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x4d8>
 80037da:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ea:	e029      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d115      	bne.n	8003820 <HAL_RCC_OscConfig+0x50c>
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <HAL_RCC_OscConfig+0x504>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x52c>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	4b9c      	ldr	r3, [pc, #624]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	4a9b      	ldr	r2, [pc, #620]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003830:	4b98      	ldr	r3, [pc, #608]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	4a97      	ldr	r2, [pc, #604]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fb78 	bl	8000f3c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fb74 	bl	8000f3c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e12a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	4b8b      	ldr	r3, [pc, #556]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ed      	beq.n	8003850 <HAL_RCC_OscConfig+0x53c>
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd fb61 	bl	8000f3c <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd fb5d 	bl	8000f3c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e113      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	4b7f      	ldr	r3, [pc, #508]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ed      	bne.n	800387e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	4a79      	ldr	r2, [pc, #484]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80fe 	beq.w	8003aba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	f040 80d0 	bne.w	8003a68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038c8:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0203 	and.w	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d130      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	3b01      	subs	r3, #1
 80038e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d127      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d11f      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003908:	2a07      	cmp	r2, #7
 800390a:	bf14      	ite	ne
 800390c:	2201      	movne	r2, #1
 800390e:	2200      	moveq	r2, #0
 8003910:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	4293      	cmp	r3, r2
 8003914:	d113      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d109      	bne.n	800393e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d06e      	beq.n	8003a1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d069      	beq.n	8003a18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0ad      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003960:	4b4c      	ldr	r3, [pc, #304]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4b      	ldr	r2, [pc, #300]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800396c:	f7fd fae6 	bl	8000f3c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd fae2 	bl	8000f3c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e09a      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003986:	4b43      	ldr	r3, [pc, #268]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003992:	4b40      	ldr	r3, [pc, #256]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCC_OscConfig+0x784>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ac:	0212      	lsls	r2, r2, #8
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0552      	lsls	r2, r2, #21
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039c0:	0852      	lsrs	r2, r2, #1
 80039c2:	3a01      	subs	r2, #1
 80039c4:	0652      	lsls	r2, r2, #25
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039cc:	0912      	lsrs	r2, r2, #4
 80039ce:	0452      	lsls	r2, r2, #17
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4930      	ldr	r1, [pc, #192]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f0:	f7fd faa4 	bl	8000f3c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd faa0 	bl	8000f3c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e058      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0a:	4b22      	ldr	r3, [pc, #136]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a16:	e050      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e04f      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d148      	bne.n	8003aba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a34:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a40:	f7fd fa7c 	bl	8000f3c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd fa78 	bl	8000f3c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e030      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x734>
 8003a66:	e028      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d023      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <HAL_RCC_OscConfig+0x780>)
 8003a74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fa5f 	bl	8000f3c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a80:	e00c      	b.n	8003a9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fd fa5b 	bl	8000f3c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d905      	bls.n	8003a9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e013      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
 8003a94:	40021000 	.word	0x40021000
 8003a98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ec      	bne.n	8003a82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4905      	ldr	r1, [pc, #20]	@ (8003ac4 <HAL_RCC_OscConfig+0x7b0>)
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_RCC_OscConfig+0x7b4>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
 8003ab4:	e001      	b.n	8003aba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	feeefffc 	.word	0xfeeefffc

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0e7      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b75      	ldr	r3, [pc, #468]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d910      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b72      	ldr	r3, [pc, #456]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4970      	ldr	r1, [pc, #448]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0cf      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b63      	ldr	r3, [pc, #396]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4960      	ldr	r1, [pc, #384]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d04c      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	4b5a      	ldr	r3, [pc, #360]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d121      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0a6      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b54      	ldr	r3, [pc, #336]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e09a      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b82:	4b4e      	ldr	r3, [pc, #312]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e08e      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b92:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e086      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4943      	ldr	r1, [pc, #268]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd f9c2 	bl	8000f3c <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fd f9be 	bl	8000f3c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e06e      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	4b31      	ldr	r3, [pc, #196]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d208      	bcs.n	8003c12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	492b      	ldr	r1, [pc, #172]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c12:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d210      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c20:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	4923      	ldr	r1, [pc, #140]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e036      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4918      	ldr	r1, [pc, #96]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6c:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4910      	ldr	r1, [pc, #64]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c80:	f000 f824 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	490b      	ldr	r1, [pc, #44]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	4a09      	ldr	r2, [pc, #36]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1fc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd f8f9 	bl	8000e9c <HAL_InitTick>
 8003caa:	4603      	mov	r3, r0
 8003cac:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cae:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800571c 	.word	0x0800571c
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	@ 0x24
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11e      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d00:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d0c:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d28:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e004      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d50:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d134      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0xac>
 8003d70:	e005      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d72:	4b1a      	ldr	r3, [pc, #104]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d74:	617b      	str	r3, [r7, #20]
      break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7a:	617b      	str	r3, [r7, #20]
      break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	fb03 f202 	mul.w	r2, r3, r2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	0e5b      	lsrs	r3, r3, #25
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	3301      	adds	r3, #1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	@ 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08005734 	.word	0x08005734
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de8:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000000 	.word	0x20000000

08003dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e00:	f7ff fff0 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	0800572c 	.word	0x0800572c

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e2c:	f7ff ffda 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0adb      	lsrs	r3, r3, #11
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4904      	ldr	r1, [pc, #16]	@ (8003e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800572c 	.word	0x0800572c

08003e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e60:	4b2a      	ldr	r3, [pc, #168]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e6c:	f7ff f9ee 	bl	800324c <HAL_PWREx_GetVoltageRange>
 8003e70:	6178      	str	r0, [r7, #20]
 8003e72:	e014      	b.n	8003e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	4b25      	ldr	r3, [pc, #148]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	4a24      	ldr	r2, [pc, #144]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e80:	4b22      	ldr	r3, [pc, #136]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e8c:	f7ff f9de 	bl	800324c <HAL_PWREx_GetVoltageRange>
 8003e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	4a1d      	ldr	r2, [pc, #116]	@ (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea4:	d10b      	bne.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b80      	cmp	r3, #128	@ 0x80
 8003eaa:	d919      	bls.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2ba0      	cmp	r3, #160	@ 0xa0
 8003eb0:	d902      	bls.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e013      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb8:	2301      	movs	r3, #1
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e010      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b80      	cmp	r3, #128	@ 0x80
 8003ec2:	d902      	bls.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e00a      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	@ 0x80
 8003ece:	d102      	bne.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e004      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b70      	cmp	r3, #112	@ 0x70
 8003eda:	d101      	bne.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003edc:	2301      	movs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0207 	bic.w	r2, r3, #7
 8003ee8:	4909      	ldr	r1, [pc, #36]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ef0:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40022000 	.word	0x40022000

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f20:	2300      	movs	r3, #0
 8003f22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d041      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f38:	d02a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f3e:	d824      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f44:	d008      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f4a:	d81e      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f56:	e018      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f58:	4b86      	ldr	r3, [pc, #536]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a85      	ldr	r2, [pc, #532]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f64:	e015      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fabb 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f76:	e00c      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3320      	adds	r3, #32
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fba6 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f98:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa6:	4973      	ldr	r1, [pc, #460]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fae:	e001      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d041      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fc8:	d02a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fce:	d824      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fda:	d81e      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe4:	d010      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fe6:	e018      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe8:	4b62      	ldr	r3, [pc, #392]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a61      	ldr	r2, [pc, #388]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff4:	e015      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa73 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3320      	adds	r3, #32
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fb5e 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	74fb      	strb	r3, [r7, #19]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004028:	4b52      	ldr	r3, [pc, #328]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004036:	494f      	ldr	r1, [pc, #316]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a0 	beq.w	8004192 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004070:	4a40      	ldr	r2, [pc, #256]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	@ 0x58
 8004078:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3a      	ldr	r2, [pc, #232]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004094:	f7fc ff52 	bl	8000f3c <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800409a:	e009      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fc ff4e 	bl	8000f3c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d902      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	74fb      	strb	r3, [r7, #19]
        break;
 80040ae:	e005      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040b0:	4b31      	ldr	r3, [pc, #196]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d15c      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d019      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040e0:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ec:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fc ff0d 	bl	8000f3c <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004124:	e00b      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fc ff09 	bl	8000f3c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d902      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	74fb      	strb	r3, [r7, #19]
            break;
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ec      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004162:	4904      	ldr	r1, [pc, #16]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800416a:	e009      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004180:	7c7b      	ldrb	r3, [r7, #17]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b9e      	ldr	r3, [pc, #632]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	4a9d      	ldr	r2, [pc, #628]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419e:	4b98      	ldr	r3, [pc, #608]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f023 0203 	bic.w	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	4994      	ldr	r1, [pc, #592]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c0:	4b8f      	ldr	r3, [pc, #572]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f023 020c 	bic.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	498c      	ldr	r1, [pc, #560]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e2:	4b87      	ldr	r3, [pc, #540]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	4983      	ldr	r1, [pc, #524]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004204:	4b7e      	ldr	r3, [pc, #504]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	497b      	ldr	r1, [pc, #492]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004226:	4b76      	ldr	r3, [pc, #472]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004234:	4972      	ldr	r1, [pc, #456]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004248:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	496a      	ldr	r1, [pc, #424]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426a:	4b65      	ldr	r3, [pc, #404]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	4961      	ldr	r1, [pc, #388]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800428c:	4b5c      	ldr	r3, [pc, #368]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	4959      	ldr	r1, [pc, #356]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ae:	4b54      	ldr	r3, [pc, #336]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	4950      	ldr	r1, [pc, #320]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	4948      	ldr	r1, [pc, #288]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f2:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	493f      	ldr	r1, [pc, #252]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d028      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004322:	4937      	ldr	r1, [pc, #220]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b32      	ldr	r3, [pc, #200]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a31      	ldr	r2, [pc, #196]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
 8004340:	e011      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800434a:	d10c      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f8c8 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d028      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004372:	4b23      	ldr	r3, [pc, #140]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	491f      	ldr	r1, [pc, #124]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004390:	d106      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a1a      	ldr	r2, [pc, #104]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800439c:	60d3      	str	r3, [r2, #12]
 800439e:	e011      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f899 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02b      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043de:	4908      	ldr	r1, [pc, #32]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ee:	d109      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a02      	ldr	r2, [pc, #8]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
 80043fc:	e014      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004408:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f867 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004442:	4928      	ldr	r1, [pc, #160]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004452:	d10d      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f844 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d014      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
 800446e:	e011      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3320      	adds	r3, #32
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f925 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ae:	490d      	ldr	r1, [pc, #52]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c2:	4b08      	ldr	r3, [pc, #32]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d2:	4904      	ldr	r1, [pc, #16]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044da:	7cbb      	ldrb	r3, [r7, #18]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000

080044e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044f6:	4b75      	ldr	r3, [pc, #468]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d018      	beq.n	8004534 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004502:	4b72      	ldr	r3, [pc, #456]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0203 	and.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d10d      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
       ||
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800451a:	4b6c      	ldr	r3, [pc, #432]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
       ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d047      	beq.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e044      	b.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d018      	beq.n	800456e <RCCEx_PLLSAI1_Config+0x86>
 800453c:	2b03      	cmp	r3, #3
 800453e:	d825      	bhi.n	800458c <RCCEx_PLLSAI1_Config+0xa4>
 8004540:	2b01      	cmp	r3, #1
 8004542:	d002      	beq.n	800454a <RCCEx_PLLSAI1_Config+0x62>
 8004544:	2b02      	cmp	r3, #2
 8004546:	d009      	beq.n	800455c <RCCEx_PLLSAI1_Config+0x74>
 8004548:	e020      	b.n	800458c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800454a:	4b60      	ldr	r3, [pc, #384]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11d      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455a:	e01a      	b.n	8004592 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800455c:	4b5b      	ldr	r3, [pc, #364]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456c:	e013      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800456e:	4b57      	ldr	r3, [pc, #348]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800457a:	4b54      	ldr	r3, [pc, #336]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800458a:	e006      	b.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e004      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004592:	bf00      	nop
 8004594:	e002      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800459a:	bf00      	nop
    }

    if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045a2:	4b4a      	ldr	r3, [pc, #296]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	430b      	orrs	r3, r1
 80045b8:	4944      	ldr	r1, [pc, #272]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d17d      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045c4:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a40      	ldr	r2, [pc, #256]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fc fcb4 	bl	8000f3c <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d8:	f7fc fcb0 	bl	8000f3c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ea:	e005      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ec:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ef      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d160      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d111      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004604:	4b31      	ldr	r3, [pc, #196]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800460c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	0211      	lsls	r1, r2, #8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	0912      	lsrs	r2, r2, #4
 800461c:	0452      	lsls	r2, r2, #17
 800461e:	430a      	orrs	r2, r1
 8004620:	492a      	ldr	r1, [pc, #168]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
 8004626:	e027      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d112      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462e:	4b27      	ldr	r3, [pc, #156]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004636:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	0211      	lsls	r1, r2, #8
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6912      	ldr	r2, [r2, #16]
 8004644:	0852      	lsrs	r2, r2, #1
 8004646:	3a01      	subs	r2, #1
 8004648:	0552      	lsls	r2, r2, #21
 800464a:	430a      	orrs	r2, r1
 800464c:	491f      	ldr	r1, [pc, #124]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
 8004652:	e011      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004654:	4b1d      	ldr	r3, [pc, #116]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800465c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6952      	ldr	r2, [r2, #20]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0652      	lsls	r2, r2, #25
 8004670:	430a      	orrs	r2, r1
 8004672:	4916      	ldr	r1, [pc, #88]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004678:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800467e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fc fc5a 	bl	8000f3c <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800468c:	f7fc fc56 	bl	8000f3c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
          break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4904      	ldr	r1, [pc, #16]	@ (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000

080046d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046de:	4b6a      	ldr	r3, [pc, #424]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046ea:	4b67      	ldr	r3, [pc, #412]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
       ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004702:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
       ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d047      	beq.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e044      	b.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d018      	beq.n	8004756 <RCCEx_PLLSAI2_Config+0x86>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d825      	bhi.n	8004774 <RCCEx_PLLSAI2_Config+0xa4>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <RCCEx_PLLSAI2_Config+0x62>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d009      	beq.n	8004744 <RCCEx_PLLSAI2_Config+0x74>
 8004730:	e020      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004732:	4b55      	ldr	r3, [pc, #340]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004742:	e01a      	b.n	800477a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004744:	4b50      	ldr	r3, [pc, #320]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e013      	b.n	800477e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004756:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004762:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e004      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004782:	bf00      	nop
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	430b      	orrs	r3, r1
 80047a0:	4939      	ldr	r1, [pc, #228]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d167      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047ac:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fc fbc0 	bl	8000f3c <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c0:	f7fc fbbc 	bl	8000f3c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
        break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ef      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d14a      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047ec:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6892      	ldr	r2, [r2, #8]
 80047fc:	0211      	lsls	r1, r2, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	0912      	lsrs	r2, r2, #4
 8004804:	0452      	lsls	r2, r2, #17
 8004806:	430a      	orrs	r2, r1
 8004808:	491f      	ldr	r1, [pc, #124]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	614b      	str	r3, [r1, #20]
 800480e:	e011      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004810:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004818:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6892      	ldr	r2, [r2, #8]
 8004820:	0211      	lsls	r1, r2, #8
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6912      	ldr	r2, [r2, #16]
 8004826:	0852      	lsrs	r2, r2, #1
 8004828:	3a01      	subs	r2, #1
 800482a:	0652      	lsls	r2, r2, #25
 800482c:	430a      	orrs	r2, r1
 800482e:	4916      	ldr	r1, [pc, #88]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004834:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fc fb7c 	bl	8000f3c <HAL_GetTick>
 8004844:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004846:	e009      	b.n	800485c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004848:	f7fc fb78 	bl	8000f3c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d902      	bls.n	800485c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	73fb      	strb	r3, [r7, #15]
          break;
 800485a:	e005      	b.n	8004868 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4904      	ldr	r1, [pc, #16]	@ (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e049      	b.n	8004932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc f9d6 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 f89e 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e047      	b.n	80049e4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	@ (80049f0 <HAL_TIM_Base_Start+0xb4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496e:	d018      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <HAL_TIM_Base_Start+0xb8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <HAL_TIM_Base_Start+0xbc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <HAL_TIM_Base_Start+0xc0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <HAL_TIM_Base_Start+0xc4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_Base_Start+0x66>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <HAL_TIM_Base_Start+0xc8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d115      	bne.n	80049ce <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <HAL_TIM_Base_Start+0xcc>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d015      	beq.n	80049e0 <HAL_TIM_Base_Start+0xa4>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d011      	beq.n	80049e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	e008      	b.n	80049e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e000      	b.n	80049e2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	00010007 	.word	0x00010007

08004a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a46      	ldr	r2, [pc, #280]	@ (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d00f      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a43      	ldr	r2, [pc, #268]	@ (8004b3c <TIM_Base_SetConfig+0x130>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a42      	ldr	r2, [pc, #264]	@ (8004b40 <TIM_Base_SetConfig+0x134>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a41      	ldr	r2, [pc, #260]	@ (8004b44 <TIM_Base_SetConfig+0x138>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a40      	ldr	r2, [pc, #256]	@ (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a35      	ldr	r2, [pc, #212]	@ (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d01b      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a32      	ldr	r2, [pc, #200]	@ (8004b3c <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d017      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a31      	ldr	r2, [pc, #196]	@ (8004b40 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a30      	ldr	r2, [pc, #192]	@ (8004b44 <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2f      	ldr	r2, [pc, #188]	@ (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2e      	ldr	r2, [pc, #184]	@ (8004b4c <TIM_Base_SetConfig+0x140>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2d      	ldr	r2, [pc, #180]	@ (8004b50 <TIM_Base_SetConfig+0x144>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0x9a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <TIM_Base_SetConfig+0x148>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <TIM_Base_SetConfig+0x140>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <TIM_Base_SetConfig+0x144>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a15      	ldr	r2, [pc, #84]	@ (8004b54 <TIM_Base_SetConfig+0x148>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800

08004b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e068      	b.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2e      	ldr	r2, [pc, #184]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004baa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be2:	d018      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10c      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40014000 	.word	0x40014000

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e040      	b.n	8004cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc f80a 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	@ 0x24
 8004c94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fae0 	bl	8005274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f825 	bl	8004d04 <UART_SetConfig>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e01b      	b.n	8004cfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb5f 	bl	80053b8 <UART_CheckIdleState>
 8004cfa:	4603      	mov	r3, r0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d08:	b08a      	sub	sp, #40	@ 0x28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4ba4      	ldr	r3, [pc, #656]	@ (8004fc4 <UART_SetConfig+0x2c0>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a99      	ldr	r2, [pc, #612]	@ (8004fc8 <UART_SetConfig+0x2c4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a90      	ldr	r2, [pc, #576]	@ (8004fcc <UART_SetConfig+0x2c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d126      	bne.n	8004ddc <UART_SetConfig+0xd8>
 8004d8e:	4b90      	ldr	r3, [pc, #576]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d81b      	bhi.n	8004dd4 <UART_SetConfig+0xd0>
 8004d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0xa0>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dba:	e116      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e112      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dca:	e10e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd2:	e10a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dda:	e106      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7c      	ldr	r2, [pc, #496]	@ (8004fd4 <UART_SetConfig+0x2d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d138      	bne.n	8004e58 <UART_SetConfig+0x154>
 8004de6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	d82d      	bhi.n	8004e50 <UART_SetConfig+0x14c>
 8004df4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dfc <UART_SetConfig+0xf8>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e51 	.word	0x08004e51
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004e51 	.word	0x08004e51
 8004e18:	08004e51 	.word	0x08004e51
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	08004e51 	.word	0x08004e51
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e49 	.word	0x08004e49
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e36:	e0d8      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3e:	e0d4      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e46:	e0d0      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4e:	e0cc      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e56:	e0c8      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5e      	ldr	r2, [pc, #376]	@ (8004fd8 <UART_SetConfig+0x2d4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d125      	bne.n	8004eae <UART_SetConfig+0x1aa>
 8004e62:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e6c:	2b30      	cmp	r3, #48	@ 0x30
 8004e6e:	d016      	beq.n	8004e9e <UART_SetConfig+0x19a>
 8004e70:	2b30      	cmp	r3, #48	@ 0x30
 8004e72:	d818      	bhi.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d00a      	beq.n	8004e8e <UART_SetConfig+0x18a>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d814      	bhi.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <UART_SetConfig+0x182>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d008      	beq.n	8004e96 <UART_SetConfig+0x192>
 8004e84:	e00f      	b.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8c:	e0ad      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e94:	e0a9      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e96:	2304      	movs	r3, #4
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9c:	e0a5      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea4:	e0a1      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eac:	e09d      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8004fdc <UART_SetConfig+0x2d8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d125      	bne.n	8004f04 <UART_SetConfig+0x200>
 8004eb8:	4b45      	ldr	r3, [pc, #276]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec4:	d016      	beq.n	8004ef4 <UART_SetConfig+0x1f0>
 8004ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec8:	d818      	bhi.n	8004efc <UART_SetConfig+0x1f8>
 8004eca:	2b80      	cmp	r3, #128	@ 0x80
 8004ecc:	d00a      	beq.n	8004ee4 <UART_SetConfig+0x1e0>
 8004ece:	2b80      	cmp	r3, #128	@ 0x80
 8004ed0:	d814      	bhi.n	8004efc <UART_SetConfig+0x1f8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <UART_SetConfig+0x1d8>
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x1e8>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x1f8>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e082      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e07e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e07a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e076      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e072      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a35      	ldr	r2, [pc, #212]	@ (8004fe0 <UART_SetConfig+0x2dc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d12a      	bne.n	8004f64 <UART_SetConfig+0x260>
 8004f0e:	4b30      	ldr	r3, [pc, #192]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1c:	d01a      	beq.n	8004f54 <UART_SetConfig+0x250>
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0x258>
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f28:	d00c      	beq.n	8004f44 <UART_SetConfig+0x240>
 8004f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f2e:	d815      	bhi.n	8004f5c <UART_SetConfig+0x258>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <UART_SetConfig+0x238>
 8004f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f38:	d008      	beq.n	8004f4c <UART_SetConfig+0x248>
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x258>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e052      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e04e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e04a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e046      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e042      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <UART_SetConfig+0x2c4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d13a      	bne.n	8004fe4 <UART_SetConfig+0x2e0>
 8004f6e:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f7c:	d01a      	beq.n	8004fb4 <UART_SetConfig+0x2b0>
 8004f7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f82:	d81b      	bhi.n	8004fbc <UART_SetConfig+0x2b8>
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f88:	d00c      	beq.n	8004fa4 <UART_SetConfig+0x2a0>
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f8e:	d815      	bhi.n	8004fbc <UART_SetConfig+0x2b8>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <UART_SetConfig+0x298>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f98:	d008      	beq.n	8004fac <UART_SetConfig+0x2a8>
 8004f9a:	e00f      	b.n	8004fbc <UART_SetConfig+0x2b8>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e022      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e01e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e01a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fba:	e016      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e012      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fc4:	efff69f3 	.word	0xefff69f3
 8004fc8:	40008000 	.word	0x40008000
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	40004800 	.word	0x40004800
 8004fdc:	40004c00 	.word	0x40004c00
 8004fe0:	40005000 	.word	0x40005000
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a9f      	ldr	r2, [pc, #636]	@ (800526c <UART_SetConfig+0x568>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d17a      	bne.n	80050ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d824      	bhi.n	8005046 <UART_SetConfig+0x342>
 8004ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0x300>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005029 	.word	0x08005029
 8005008:	08005047 	.word	0x08005047
 800500c:	08005031 	.word	0x08005031
 8005010:	08005047 	.word	0x08005047
 8005014:	08005037 	.word	0x08005037
 8005018:	08005047 	.word	0x08005047
 800501c:	08005047 	.word	0x08005047
 8005020:	08005047 	.word	0x08005047
 8005024:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe fee8 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b8f      	ldr	r3, [pc, #572]	@ (8005270 <UART_SetConfig+0x56c>)
 8005032:	61fb      	str	r3, [r7, #28]
        break;
 8005034:	e00d      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe fe49 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
        break;
 800503c:	e009      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
        break;
 8005044:	e005      	b.n	8005052 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80fb 	beq.w	8005250 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	429a      	cmp	r2, r3
 8005068:	d305      	bcc.n	8005076 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800507c:	e0e8      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2200      	movs	r2, #0
 8005082:	461c      	mov	r4, r3
 8005084:	4615      	mov	r5, r2
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	022b      	lsls	r3, r5, #8
 8005090:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005094:	0222      	lsls	r2, r4, #8
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	6849      	ldr	r1, [r1, #4]
 800509a:	0849      	lsrs	r1, r1, #1
 800509c:	2000      	movs	r0, #0
 800509e:	4688      	mov	r8, r1
 80050a0:	4681      	mov	r9, r0
 80050a2:	eb12 0a08 	adds.w	sl, r2, r8
 80050a6:	eb43 0b09 	adc.w	fp, r3, r9
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f884 	bl	80001c8 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ce:	d308      	bcc.n	80050e2 <UART_SetConfig+0x3de>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d6:	d204      	bcs.n	80050e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e0b6      	b.n	8005250 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050e8:	e0b2      	b.n	8005250 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f2:	d15e      	bne.n	80051b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d828      	bhi.n	800514e <UART_SetConfig+0x44a>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <UART_SetConfig+0x400>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	0800514f 	.word	0x0800514f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800514f 	.word	0x0800514f
 800511c:	0800514f 	.word	0x0800514f
 8005120:	0800514f 	.word	0x0800514f
 8005124:	08005147 	.word	0x08005147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fe fe68 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 800512c:	61f8      	str	r0, [r7, #28]
        break;
 800512e:	e014      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fe fe7a 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8005134:	61f8      	str	r0, [r7, #28]
        break;
 8005136:	e010      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005138:	4b4d      	ldr	r3, [pc, #308]	@ (8005270 <UART_SetConfig+0x56c>)
 800513a:	61fb      	str	r3, [r7, #28]
        break;
 800513c:	e00d      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe fdc5 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8005142:	61f8      	str	r0, [r7, #28]
        break;
 8005144:	e009      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514a:	61fb      	str	r3, [r7, #28]
        break;
 800514c:	e005      	b.n	800515a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d077      	beq.n	8005250 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	005a      	lsls	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b0f      	cmp	r3, #15
 800517a:	d916      	bls.n	80051aa <UART_SetConfig+0x4a6>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005182:	d212      	bcs.n	80051aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f023 030f 	bic.w	r3, r3, #15
 800518c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	b29a      	uxth	r2, r3
 800519a:	8afb      	ldrh	r3, [r7, #22]
 800519c:	4313      	orrs	r3, r2
 800519e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	8afa      	ldrh	r2, [r7, #22]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e052      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051b0:	e04e      	b.n	8005250 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d827      	bhi.n	800520a <UART_SetConfig+0x506>
 80051ba:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <UART_SetConfig+0x4bc>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fe0a 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 80051e8:	61f8      	str	r0, [r7, #28]
        break;
 80051ea:	e014      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fe fe1c 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 80051f0:	61f8      	str	r0, [r7, #28]
        break;
 80051f2:	e010      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <UART_SetConfig+0x56c>)
 80051f6:	61fb      	str	r3, [r7, #28]
        break;
 80051f8:	e00d      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fe fd67 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 80051fe:	61f8      	str	r0, [r7, #28]
        break;
 8005200:	e009      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005206:	61fb      	str	r3, [r7, #28]
        break;
 8005208:	e005      	b.n	8005216 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005214:	bf00      	nop
    }

    if (pclk != 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d019      	beq.n	8005250 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	085a      	lsrs	r2, r3, #1
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	d909      	bls.n	800524a <UART_SetConfig+0x546>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523c:	d205      	bcs.n	800524a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	e002      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800525c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	@ 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	40008000 	.word	0x40008000
 8005270:	00f42400 	.word	0x00f42400

08005274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01a      	beq.n	800538a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005372:	d10a      	bne.n	800538a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b098      	sub	sp, #96	@ 0x60
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c8:	f7fb fdb8 	bl	8000f3c <HAL_GetTick>
 80053cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d12e      	bne.n	800543a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e4:	2200      	movs	r2, #0
 80053e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f88c 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d021      	beq.n	800543a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540a:	653b      	str	r3, [r7, #80]	@ 0x50
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800541a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e6      	bne.n	80053f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e062      	b.n	8005500 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d149      	bne.n	80054dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005450:	2200      	movs	r2, #0
 8005452:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f856 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03c      	beq.n	80054dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	623b      	str	r3, [r7, #32]
   return(result);
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
 8005482:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800548e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b4:	61fa      	str	r2, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	617b      	str	r3, [r7, #20]
   return(result);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e011      	b.n	8005500 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3758      	adds	r7, #88	@ 0x58
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	e04f      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005520:	d04b      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fb fd0b 	bl	8000f3c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <UART_WaitOnFlagUntilTimeout+0x30>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e04e      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d037      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b80      	cmp	r3, #128	@ 0x80
 800554e:	d034      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b40      	cmp	r3, #64	@ 0x40
 8005554:	d031      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d110      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2208      	movs	r2, #8
 800556a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f838 	bl	80055e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2208      	movs	r2, #8
 8005576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e029      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005594:	d111      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800559e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f81e 	bl	80055e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e00f      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d0a0      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b095      	sub	sp, #84	@ 0x54
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005608:	643b      	str	r3, [r7, #64]	@ 0x40
 800560a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800560e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	61fb      	str	r3, [r7, #28]
   return(result);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800563c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800563e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005654:	2b01      	cmp	r3, #1
 8005656:	d118      	bne.n	800568a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	60bb      	str	r3, [r7, #8]
   return(result);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 0310 	bic.w	r3, r3, #16
 800566c:	647b      	str	r3, [r7, #68]	@ 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	613b      	str	r3, [r7, #16]
   return(result);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800569e:	bf00      	nop
 80056a0:	3754      	adds	r7, #84	@ 0x54
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <memset>:
 80056aa:	4402      	add	r2, r0
 80056ac:	4603      	mov	r3, r0
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d100      	bne.n	80056b4 <memset+0xa>
 80056b2:	4770      	bx	lr
 80056b4:	f803 1b01 	strb.w	r1, [r3], #1
 80056b8:	e7f9      	b.n	80056ae <memset+0x4>
	...

080056bc <__libc_init_array>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	4d0d      	ldr	r5, [pc, #52]	@ (80056f4 <__libc_init_array+0x38>)
 80056c0:	4c0d      	ldr	r4, [pc, #52]	@ (80056f8 <__libc_init_array+0x3c>)
 80056c2:	1b64      	subs	r4, r4, r5
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	2600      	movs	r6, #0
 80056c8:	42a6      	cmp	r6, r4
 80056ca:	d109      	bne.n	80056e0 <__libc_init_array+0x24>
 80056cc:	4d0b      	ldr	r5, [pc, #44]	@ (80056fc <__libc_init_array+0x40>)
 80056ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005700 <__libc_init_array+0x44>)
 80056d0:	f000 f818 	bl	8005704 <_init>
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	2600      	movs	r6, #0
 80056da:	42a6      	cmp	r6, r4
 80056dc:	d105      	bne.n	80056ea <__libc_init_array+0x2e>
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e4:	4798      	blx	r3
 80056e6:	3601      	adds	r6, #1
 80056e8:	e7ee      	b.n	80056c8 <__libc_init_array+0xc>
 80056ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ee:	4798      	blx	r3
 80056f0:	3601      	adds	r6, #1
 80056f2:	e7f2      	b.n	80056da <__libc_init_array+0x1e>
 80056f4:	0800576c 	.word	0x0800576c
 80056f8:	0800576c 	.word	0x0800576c
 80056fc:	0800576c 	.word	0x0800576c
 8005700:	08005770 	.word	0x08005770

08005704 <_init>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr

08005710 <_fini>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr
