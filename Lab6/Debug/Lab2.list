
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005918  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005aa0  08005aa0  00006aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d00  08005d00  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d00  08005d00  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d08  08005d08  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00006d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000068  08005d78  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08005d78  0000742c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a260  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001759  00000000  00000000  000112f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00012a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a2  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259f2  00000000  00000000  000139a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009de2  00000000  00000000  00039394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8169  00000000  00000000  00043176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  0012b324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a88 	.word	0x08005a88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08005a88 	.word	0x08005a88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	f000 b988 	b.w	8000eb8 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	468e      	mov	lr, r1
 8000bc8:	4604      	mov	r4, r0
 8000bca:	4688      	mov	r8, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14a      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d962      	bls.n	8000c9c <__udivmoddi4+0xdc>
 8000bd6:	fab2 f682 	clz	r6, r2
 8000bda:	b14e      	cbz	r6, 8000bf0 <__udivmoddi4+0x30>
 8000bdc:	f1c6 0320 	rsb	r3, r6, #32
 8000be0:	fa01 f806 	lsl.w	r8, r1, r6
 8000be4:	fa20 f303 	lsr.w	r3, r0, r3
 8000be8:	40b7      	lsls	r7, r6
 8000bea:	ea43 0808 	orr.w	r8, r3, r8
 8000bee:	40b4      	lsls	r4, r6
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bfc:	0c23      	lsrs	r3, r4, #16
 8000bfe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c06:	fb01 f20c 	mul.w	r2, r1, ip
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x62>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c14:	f080 80ea 	bcs.w	8000dec <__udivmoddi4+0x22c>
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	f240 80e7 	bls.w	8000dec <__udivmoddi4+0x22c>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	443b      	add	r3, r7
 8000c22:	1a9a      	subs	r2, r3, r2
 8000c24:	b2a3      	uxth	r3, r4
 8000c26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c36:	459c      	cmp	ip, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x8e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c40:	f080 80d6 	bcs.w	8000df0 <__udivmoddi4+0x230>
 8000c44:	459c      	cmp	ip, r3
 8000c46:	f240 80d3 	bls.w	8000df0 <__udivmoddi4+0x230>
 8000c4a:	443b      	add	r3, r7
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c52:	eba3 030c 	sub.w	r3, r3, ip
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11d      	cbz	r5, 8000c62 <__udivmoddi4+0xa2>
 8000c5a:	40f3      	lsrs	r3, r6
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d905      	bls.n	8000c76 <__udivmoddi4+0xb6>
 8000c6a:	b10d      	cbz	r5, 8000c70 <__udivmoddi4+0xb0>
 8000c6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4608      	mov	r0, r1
 8000c74:	e7f5      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000c76:	fab3 f183 	clz	r1, r3
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	d146      	bne.n	8000d0c <__udivmoddi4+0x14c>
 8000c7e:	4573      	cmp	r3, lr
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xc8>
 8000c82:	4282      	cmp	r2, r0
 8000c84:	f200 8105 	bhi.w	8000e92 <__udivmoddi4+0x2d2>
 8000c88:	1a84      	subs	r4, r0, r2
 8000c8a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4690      	mov	r8, r2
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d0e5      	beq.n	8000c62 <__udivmoddi4+0xa2>
 8000c96:	e9c5 4800 	strd	r4, r8, [r5]
 8000c9a:	e7e2      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f000 8090 	beq.w	8000dc2 <__udivmoddi4+0x202>
 8000ca2:	fab2 f682 	clz	r6, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f040 80a4 	bne.w	8000df4 <__udivmoddi4+0x234>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	0c03      	lsrs	r3, r0, #16
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	b2bc      	uxth	r4, r7
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cbe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc6:	fb04 f20c 	mul.w	r2, r4, ip
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x11e>
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x11c>
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f200 80e0 	bhi.w	8000e9c <__udivmoddi4+0x2dc>
 8000cdc:	46c4      	mov	ip, r8
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cec:	fb02 f404 	mul.w	r4, r2, r4
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x144>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x142>
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	f200 80ca 	bhi.w	8000e96 <__udivmoddi4+0x2d6>
 8000d02:	4602      	mov	r2, r0
 8000d04:	1b1b      	subs	r3, r3, r4
 8000d06:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0x98>
 8000d0c:	f1c1 0620 	rsb	r6, r1, #32
 8000d10:	408b      	lsls	r3, r1
 8000d12:	fa22 f706 	lsr.w	r7, r2, r6
 8000d16:	431f      	orrs	r7, r3
 8000d18:	fa0e f401 	lsl.w	r4, lr, r1
 8000d1c:	fa20 f306 	lsr.w	r3, r0, r6
 8000d20:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d24:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	fa1f fc87 	uxth.w	ip, r7
 8000d32:	fbbe f0f9 	udiv	r0, lr, r9
 8000d36:	0c1c      	lsrs	r4, r3, #16
 8000d38:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d3c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d40:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x1a0>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d52:	f080 809c 	bcs.w	8000e8e <__udivmoddi4+0x2ce>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f240 8099 	bls.w	8000e8e <__udivmoddi4+0x2ce>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	443c      	add	r4, r7
 8000d60:	eba4 040e 	sub.w	r4, r4, lr
 8000d64:	fa1f fe83 	uxth.w	lr, r3
 8000d68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d70:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d74:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1ce>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d82:	f080 8082 	bcs.w	8000e8a <__udivmoddi4+0x2ca>
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d97f      	bls.n	8000e8a <__udivmoddi4+0x2ca>
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d9a:	4564      	cmp	r4, ip
 8000d9c:	4673      	mov	r3, lr
 8000d9e:	46e1      	mov	r9, ip
 8000da0:	d362      	bcc.n	8000e68 <__udivmoddi4+0x2a8>
 8000da2:	d05f      	beq.n	8000e64 <__udivmoddi4+0x2a4>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x1fe>
 8000da6:	ebb8 0203 	subs.w	r2, r8, r3
 8000daa:	eb64 0409 	sbc.w	r4, r4, r9
 8000dae:	fa04 f606 	lsl.w	r6, r4, r6
 8000db2:	fa22 f301 	lsr.w	r3, r2, r1
 8000db6:	431e      	orrs	r6, r3
 8000db8:	40cc      	lsrs	r4, r1
 8000dba:	e9c5 6400 	strd	r6, r4, [r5]
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e74f      	b.n	8000c62 <__udivmoddi4+0xa2>
 8000dc2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc6:	0c01      	lsrs	r1, r0, #16
 8000dc8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	463c      	mov	r4, r7
 8000dd8:	46b8      	mov	r8, r7
 8000dda:	46be      	mov	lr, r7
 8000ddc:	2620      	movs	r6, #32
 8000dde:	fbb1 f1f7 	udiv	r1, r1, r7
 8000de2:	eba2 0208 	sub.w	r2, r2, r8
 8000de6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dea:	e766      	b.n	8000cba <__udivmoddi4+0xfa>
 8000dec:	4601      	mov	r1, r0
 8000dee:	e718      	b.n	8000c22 <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e72c      	b.n	8000c4e <__udivmoddi4+0x8e>
 8000df4:	f1c6 0220 	rsb	r2, r6, #32
 8000df8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	40b1      	lsls	r1, r6
 8000e00:	fa20 f202 	lsr.w	r2, r0, r2
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e14:	0c11      	lsrs	r1, r2, #16
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb08 f904 	mul.w	r9, r8, r4
 8000e1e:	40b0      	lsls	r0, r6
 8000e20:	4589      	cmp	r9, r1
 8000e22:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e26:	b280      	uxth	r0, r0
 8000e28:	d93e      	bls.n	8000ea8 <__udivmoddi4+0x2e8>
 8000e2a:	1879      	adds	r1, r7, r1
 8000e2c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e30:	d201      	bcs.n	8000e36 <__udivmoddi4+0x276>
 8000e32:	4589      	cmp	r9, r1
 8000e34:	d81f      	bhi.n	8000e76 <__udivmoddi4+0x2b6>
 8000e36:	eba1 0109 	sub.w	r1, r1, r9
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fb09 f804 	mul.w	r8, r9, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	b292      	uxth	r2, r2
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	4542      	cmp	r2, r8
 8000e4e:	d229      	bcs.n	8000ea4 <__udivmoddi4+0x2e4>
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e56:	d2c4      	bcs.n	8000de2 <__udivmoddi4+0x222>
 8000e58:	4542      	cmp	r2, r8
 8000e5a:	d2c2      	bcs.n	8000de2 <__udivmoddi4+0x222>
 8000e5c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e60:	443a      	add	r2, r7
 8000e62:	e7be      	b.n	8000de2 <__udivmoddi4+0x222>
 8000e64:	45f0      	cmp	r8, lr
 8000e66:	d29d      	bcs.n	8000da4 <__udivmoddi4+0x1e4>
 8000e68:	ebbe 0302 	subs.w	r3, lr, r2
 8000e6c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e70:	3801      	subs	r0, #1
 8000e72:	46e1      	mov	r9, ip
 8000e74:	e796      	b.n	8000da4 <__udivmoddi4+0x1e4>
 8000e76:	eba7 0909 	sub.w	r9, r7, r9
 8000e7a:	4449      	add	r1, r9
 8000e7c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e80:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e84:	fb09 f804 	mul.w	r8, r9, r4
 8000e88:	e7db      	b.n	8000e42 <__udivmoddi4+0x282>
 8000e8a:	4673      	mov	r3, lr
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1ce>
 8000e8e:	4650      	mov	r0, sl
 8000e90:	e766      	b.n	8000d60 <__udivmoddi4+0x1a0>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e6fd      	b.n	8000c92 <__udivmoddi4+0xd2>
 8000e96:	443b      	add	r3, r7
 8000e98:	3a02      	subs	r2, #2
 8000e9a:	e733      	b.n	8000d04 <__udivmoddi4+0x144>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	443b      	add	r3, r7
 8000ea2:	e71c      	b.n	8000cde <__udivmoddi4+0x11e>
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	e79c      	b.n	8000de2 <__udivmoddi4+0x222>
 8000ea8:	eba1 0109 	sub.w	r1, r1, r9
 8000eac:	46c4      	mov	ip, r8
 8000eae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb2:	fb09 f804 	mul.w	r8, r9, r4
 8000eb6:	e7c4      	b.n	8000e42 <__udivmoddi4+0x282>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	// unit impulse signal
	for(n=0;n<N;n++){
 8000ec0:	4b84      	ldr	r3, [pc, #528]	@ (80010d4 <main+0x218>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e015      	b.n	8000ef4 <main+0x38>
		if (n == 0) delta[n] = 1;
 8000ec8:	4b82      	ldr	r3, [pc, #520]	@ (80010d4 <main+0x218>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d106      	bne.n	8000ede <main+0x22>
 8000ed0:	4b80      	ldr	r3, [pc, #512]	@ (80010d4 <main+0x218>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a80      	ldr	r2, [pc, #512]	@ (80010d8 <main+0x21c>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000edc:	e005      	b.n	8000eea <main+0x2e>
		else delta[n] = 0;
 8000ede:	4b7d      	ldr	r3, [pc, #500]	@ (80010d4 <main+0x218>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80010d8 <main+0x21c>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(n=0;n<N;n++){
 8000eea:	4b7a      	ldr	r3, [pc, #488]	@ (80010d4 <main+0x218>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a78      	ldr	r2, [pc, #480]	@ (80010d4 <main+0x218>)
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b77      	ldr	r3, [pc, #476]	@ (80010d4 <main+0x218>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b13      	cmp	r3, #19
 8000efa:	dde5      	ble.n	8000ec8 <main+0xc>
	}

	//unit step signal
	for(n=0;n<N;n++) step[n]=1;
 8000efc:	4b75      	ldr	r3, [pc, #468]	@ (80010d4 <main+0x218>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e00a      	b.n	8000f1a <main+0x5e>
 8000f04:	4b73      	ldr	r3, [pc, #460]	@ (80010d4 <main+0x218>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a74      	ldr	r2, [pc, #464]	@ (80010dc <main+0x220>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f10:	4b70      	ldr	r3, [pc, #448]	@ (80010d4 <main+0x218>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a6f      	ldr	r2, [pc, #444]	@ (80010d4 <main+0x218>)
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80010d4 <main+0x218>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b13      	cmp	r3, #19
 8000f20:	ddf0      	ble.n	8000f04 <main+0x48>
	for(n=0;n<N;n++) {
 8000f22:	4b6c      	ldr	r3, [pc, #432]	@ (80010d4 <main+0x218>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e022      	b.n	8000f70 <main+0xb4>
		if (n < 3) x1[n] = 0;
 8000f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80010d4 <main+0x218>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	dc08      	bgt.n	8000f44 <main+0x88>
 8000f32:	4b68      	ldr	r3, [pc, #416]	@ (80010d4 <main+0x218>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6a      	ldr	r2, [pc, #424]	@ (80010e0 <main+0x224>)
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e010      	b.n	8000f66 <main+0xaa>
		else x1[n] = step[n - 3];
 8000f44:	4b63      	ldr	r3, [pc, #396]	@ (80010d4 <main+0x218>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	4a64      	ldr	r2, [pc, #400]	@ (80010dc <main+0x220>)
 8000f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f50:	4b60      	ldr	r3, [pc, #384]	@ (80010d4 <main+0x218>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	ee07 2a90 	vmov	s15, r2
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5c:	4a60      	ldr	r2, [pc, #384]	@ (80010e0 <main+0x224>)
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	edc3 7a00 	vstr	s15, [r3]
	for(n=0;n<N;n++) {
 8000f66:	4b5b      	ldr	r3, [pc, #364]	@ (80010d4 <main+0x218>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a59      	ldr	r2, [pc, #356]	@ (80010d4 <main+0x218>)
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b58      	ldr	r3, [pc, #352]	@ (80010d4 <main+0x218>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b13      	cmp	r3, #19
 8000f76:	ddd8      	ble.n	8000f2a <main+0x6e>
	}

	//rectangular signal between n=0 and 5
	for(n=0;n<N;n++){
 8000f78:	4b56      	ldr	r3, [pc, #344]	@ (80010d4 <main+0x218>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e021      	b.n	8000fc4 <main+0x108>
	  if ((n>=0) & (n<6)) rect[n]=1;
 8000f80:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <main+0x218>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	0fdb      	lsrs	r3, r3, #31
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b52      	ldr	r3, [pc, #328]	@ (80010d4 <main+0x218>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	bfd4      	ite	le
 8000f92:	2301      	movle	r3, #1
 8000f94:	2300      	movgt	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <main+0xf2>
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <main+0x218>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80010e4 <main+0x228>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fac:	e005      	b.n	8000fba <main+0xfe>
	  else rect[n]=0;
 8000fae:	4b49      	ldr	r3, [pc, #292]	@ (80010d4 <main+0x218>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	@ (80010e4 <main+0x228>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(n=0;n<N;n++){
 8000fba:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <main+0x218>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a44      	ldr	r2, [pc, #272]	@ (80010d4 <main+0x218>)
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <main+0x218>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b13      	cmp	r3, #19
 8000fca:	ddd9      	ble.n	8000f80 <main+0xc4>
	}
	for(n=0;n<N;n++) {
 8000fcc:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <main+0x218>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e01e      	b.n	8001012 <main+0x156>
		if (n < 3) x1[n] = 0;
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <main+0x218>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	dc08      	bgt.n	8000fee <main+0x132>
 8000fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80010d4 <main+0x218>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a3f      	ldr	r2, [pc, #252]	@ (80010e0 <main+0x224>)
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e00c      	b.n	8001008 <main+0x14c>
		else x1[n] = expon[n - 3];
 8000fee:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <main+0x218>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1eda      	subs	r2, r3, #3
 8000ff4:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <main+0x218>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	493b      	ldr	r1, [pc, #236]	@ (80010e8 <main+0x22c>)
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	440a      	add	r2, r1
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4937      	ldr	r1, [pc, #220]	@ (80010e0 <main+0x224>)
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	601a      	str	r2, [r3, #0]
	for(n=0;n<N;n++) {
 8001008:	4b32      	ldr	r3, [pc, #200]	@ (80010d4 <main+0x218>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <main+0x218>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <main+0x218>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b13      	cmp	r3, #19
 8001018:	dddc      	ble.n	8000fd4 <main+0x118>
	}

	//exponential signal
	for(n=0;n<N;n++) expon[n]=pow(a,(float)n);
 800101a:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <main+0x218>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e028      	b.n	8001074 <main+0x1b8>
 8001022:	4b32      	ldr	r3, [pc, #200]	@ (80010ec <main+0x230>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa32 	bl	8000490 <__aeabi_f2d>
 800102c:	4604      	mov	r4, r0
 800102e:	460d      	mov	r5, r1
 8001030:	4b28      	ldr	r3, [pc, #160]	@ (80010d4 <main+0x218>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa26 	bl	8000490 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ec43 2b11 	vmov	d1, r2, r3
 800104c:	ec45 4b10 	vmov	d0, r4, r5
 8001050:	f002 fe1a 	bl	8003c88 <pow>
 8001054:	ec51 0b10 	vmov	r0, r1, d0
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <main+0x218>)
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	f7ff fd48 	bl	8000af0 <__aeabi_d2f>
 8001060:	4602      	mov	r2, r0
 8001062:	4921      	ldr	r1, [pc, #132]	@ (80010e8 <main+0x22c>)
 8001064:	00a3      	lsls	r3, r4, #2
 8001066:	440b      	add	r3, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <main+0x218>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <main+0x218>)
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <main+0x218>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b13      	cmp	r3, #19
 800107a:	ddd2      	ble.n	8001022 <main+0x166>
	for(n=0;n<N;n++) {
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <main+0x218>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e01e      	b.n	80010c2 <main+0x206>
		if (n < 3) x1[n] = 0;
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <main+0x218>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	dc08      	bgt.n	800109e <main+0x1e2>
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <main+0x218>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a13      	ldr	r2, [pc, #76]	@ (80010e0 <main+0x224>)
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e00c      	b.n	80010b8 <main+0x1fc>
		else x1[n] = expon[n - 3];
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <main+0x218>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1eda      	subs	r2, r3, #3
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <main+0x218>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	490f      	ldr	r1, [pc, #60]	@ (80010e8 <main+0x22c>)
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	440a      	add	r2, r1
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	490b      	ldr	r1, [pc, #44]	@ (80010e0 <main+0x224>)
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	601a      	str	r2, [r3, #0]
	for(n=0;n<N;n++) {
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <main+0x218>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <main+0x218>)
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <main+0x218>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b13      	cmp	r3, #19
 80010c8:	dddc      	ble.n	8001084 <main+0x1c8>
	}


	//sinusoidal signal
	for(n=0;n<N;n++) sinus[n]=sin(w0*(float)n) + sin(w1*(float)n);
 80010ca:	4b02      	ldr	r3, [pc, #8]	@ (80010d4 <main+0x218>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e052      	b.n	8001178 <main+0x2bc>
 80010d2:	bf00      	nop
 80010d4:	2000010c 	.word	0x2000010c
 80010d8:	20000110 	.word	0x20000110
 80010dc:	20000160 	.word	0x20000160
 80010e0:	200002a0 	.word	0x200002a0
 80010e4:	200001b0 	.word	0x200001b0
 80010e8:	20000200 	.word	0x20000200
 80010ec:	20000000 	.word	0x20000000
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <main+0x2d8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <main+0x2dc>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff f9c1 	bl	8000490 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	ec43 2b10 	vmov	d0, r2, r3
 8001116:	f002 fe27 	bl	8003d68 <sin>
 800111a:	ec55 4b10 	vmov	r4, r5, d0
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <main+0x2d8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <main+0x2e0>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001134:	ee17 0a90 	vmov	r0, s15
 8001138:	f7ff f9aa 	bl	8000490 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	ec43 2b10 	vmov	d0, r2, r3
 8001144:	f002 fe10 	bl	8003d68 <sin>
 8001148:	ec53 2b10 	vmov	r2, r3, d0
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f840 	bl	80001d4 <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	490e      	ldr	r1, [pc, #56]	@ (8001194 <main+0x2d8>)
 800115a:	680c      	ldr	r4, [r1, #0]
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fcc6 	bl	8000af0 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	490e      	ldr	r1, [pc, #56]	@ (80011a0 <main+0x2e4>)
 8001168:	00a3      	lsls	r3, r4, #2
 800116a:	440b      	add	r3, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <main+0x2d8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <main+0x2d8>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <main+0x2d8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b13      	cmp	r3, #19
 800117e:	ddb7      	ble.n	80010f0 <main+0x234>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001180:	f000 f9ea 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f80e 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 f88e 	bl	80012a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800118c:	f000 f85c 	bl	8001248 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <main+0x2d4>
 8001194:	2000010c 	.word	0x2000010c
 8001198:	20000004 	.word	0x20000004
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000250 	.word	0x20000250

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b096      	sub	sp, #88	@ 0x58
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2244      	movs	r2, #68	@ 0x44
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fd35 	bl	8003c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ca:	f000 fcf7 	bl	8001bbc <HAL_PWREx_ControlVoltageScaling>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d4:	f000 f8ce 	bl	8001374 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ea:	2302      	movs	r3, #2
 80011ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011f2:	230a      	movs	r3, #10
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011f6:	2307      	movs	r3, #7
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fd2e 	bl	8001c68 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001212:	f000 f8af 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2303      	movs	r3, #3
 800121c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2104      	movs	r1, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f001 f8f6 	bl	8002420 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800123a:	f000 f89b 	bl	8001374 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3758      	adds	r7, #88	@ 0x58
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800124e:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800128c:	f001 ffa8 	bl	80031e0 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 f86d 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000084 	.word	0x20000084
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a2a      	ldr	r2, [pc, #168]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4b25      	ldr	r3, [pc, #148]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a24      	ldr	r2, [pc, #144]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_GPIO_Init+0xc4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <MX_GPIO_Init+0xc4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_GPIO_Init+0xc4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001326:	f000 fc23 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480b      	ldr	r0, [pc, #44]	@ (8001370 <MX_GPIO_Init+0xc8>)
 8001342:	f000 fa6b 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001346:	2320      	movs	r3, #32
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f000 fa5c 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	@ 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	48000800 	.word	0x48000800

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_MspInit+0x44>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6613      	str	r3, [r2, #96]	@ 0x60
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_MspInit+0x44>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <HAL_MspInit+0x44>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_MspInit+0x44>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ac      	sub	sp, #176	@ 0xb0
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2288      	movs	r2, #136	@ 0x88
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fc1a 	bl	8003c22 <memset>
  if(huart->Instance==USART2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <HAL_UART_MspInit+0xb0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d13b      	bne.n	8001470 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fa2f 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001410:	f7ff ffb0 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_UART_MspInit+0xb4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001418:	4a18      	ldr	r2, [pc, #96]	@ (800147c <HAL_UART_MspInit+0xb4>)
 800141a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_UART_MspInit+0xb4>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_UART_MspInit+0xb4>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_UART_MspInit+0xb4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_UART_MspInit+0xb4>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001444:	230c      	movs	r3, #12
 8001446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145c:	2307      	movs	r3, #7
 800145e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f000 f9d6 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001470:	bf00      	nop
 8001472:	37b0      	adds	r7, #176	@ 0xb0
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40004400 	.word	0x40004400
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f89b 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001508:	f7ff ffea 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <LoopForever+0x6>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <LoopForever+0xe>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	@ (8001550 <LoopForever+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 fb85 	bl	8003c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001536:	f7ff fcc1 	bl	8000ebc <main>

0800153a <LoopForever>:

LoopForever:
    b LoopForever
 800153a:	e7fe      	b.n	800153a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800153c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001548:	08005d10 	.word	0x08005d10
  ldr r2, =_sbss
 800154c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001550:	2000042c 	.word	0x2000042c

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <HAL_Init+0x3c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_Init+0x3c>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156e:	2003      	movs	r0, #3
 8001570:	f000 f920 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f80f 	bl	8001598 <HAL_InitTick>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	e001      	b.n	800158a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001586:	f7ff fefb 	bl	8001380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_InitTick+0x6c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d023      	beq.n	80015f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_InitTick+0x70>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_InitTick+0x6c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f91d 	bl	8001802 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d809      	bhi.n	80015e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015dc:	f000 f8f5 	bl	80017ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_InitTick+0x74>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e007      	b.n	80015f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e004      	b.n	80015f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e001      	b.n	80015f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000014 	.word	0x20000014
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000010 	.word	0x20000010

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000014 	.word	0x20000014
 8001634:	200002f0 	.word	0x200002f0

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200002f0 	.word	0x200002f0

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff47 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff5c 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffb0 	bl	8001770 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e17f      	b.n	8001b2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8171 	beq.w	8001b26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d118      	bne.n	80018fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b03      	cmp	r3, #3
 8001906:	d017      	beq.n	8001938 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d123      	bne.n	800198c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	6939      	ldr	r1, [r7, #16]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80ac 	beq.w	8001b26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b5f      	ldr	r3, [pc, #380]	@ (8001b4c <HAL_GPIO_Init+0x330>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b4c <HAL_GPIO_Init+0x330>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019da:	4b5c      	ldr	r3, [pc, #368]	@ (8001b4c <HAL_GPIO_Init+0x330>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b50 <HAL_GPIO_Init+0x334>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x242>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	@ (8001b54 <HAL_GPIO_Init+0x338>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x23e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b58 <HAL_GPIO_Init+0x33c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x23a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	@ (8001b5c <HAL_GPIO_Init+0x340>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x236>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b60 <HAL_GPIO_Init+0x344>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x232>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	@ (8001b64 <HAL_GPIO_Init+0x348>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x22e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b68 <HAL_GPIO_Init+0x34c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x22a>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a46:	2307      	movs	r3, #7
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a70:	4937      	ldr	r1, [pc, #220]	@ (8001b50 <HAL_GPIO_Init+0x334>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa2:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001acc:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <HAL_GPIO_Init+0x350>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f47f ae78 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00
 8001b60:	48001000 	.word	0x48001000
 8001b64:	48001400 	.word	0x48001400
 8001b68:	48001800 	.word	0x48001800
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bca:	d130      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd8:	d038      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2232      	movs	r2, #50	@ 0x32
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c00:	e002      	b.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c14:	d102      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f2      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c28:	d110      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e00f      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3a:	d007      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c44:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e3ca      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b97      	ldr	r3, [pc, #604]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b94      	ldr	r3, [pc, #592]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80e4 	beq.w	8001e64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4a>
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	f040 808b 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 8087 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e3a2      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1a      	ldr	r2, [r3, #32]
 8001cce:	4b82      	ldr	r3, [pc, #520]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x7c>
 8001cda:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce2:	e005      	b.n	8001cf0 <HAL_RCC_OscConfig+0x88>
 8001ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d223      	bcs.n	8001d3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fd55 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e383      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d08:	4b73      	ldr	r3, [pc, #460]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a72      	ldr	r2, [pc, #456]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b70      	ldr	r3, [pc, #448]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	496d      	ldr	r1, [pc, #436]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d26:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4968      	ldr	r1, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e025      	b.n	8001d88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3c:	4b66      	ldr	r3, [pc, #408]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4960      	ldr	r1, [pc, #384]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	495b      	ldr	r1, [pc, #364]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fd15 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e343      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d88:	f000 fc4a 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	4950      	ldr	r1, [pc, #320]	@ (8001edc <HAL_RCC_OscConfig+0x274>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee0 <HAL_RCC_OscConfig+0x278>)
 8001da6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fbf3 	bl	8001598 <HAL_InitTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d052      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	e327      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d032      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a42      	ldr	r2, [pc, #264]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc30 	bl	8001638 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc2c 	bl	8001638 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e310      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4931      	ldr	r1, [pc, #196]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	492c      	ldr	r1, [pc, #176]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e01a      	b.n	8001e64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a29      	ldr	r2, [pc, #164]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fbfd 	bl	8001638 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e42:	f7ff fbf9 	bl	8001638 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e2dd      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x1da>
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d074      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x21a>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d10e      	bne.n	8001e9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d064      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d160      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e2ba      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e026      	b.n	8001f00 <HAL_RCC_OscConfig+0x298>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eba:	d115      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x280>
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a02      	ldr	r2, [pc, #8]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x298>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08005aa0 	.word	0x08005aa0
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	20000010 	.word	0x20000010
 8001ee8:	4ba0      	ldr	r3, [pc, #640]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a9f      	ldr	r2, [pc, #636]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a9c      	ldr	r2, [pc, #624]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb96 	bl	8001638 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fb92 	bl	8001638 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e276      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	4b92      	ldr	r3, [pc, #584]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2a8>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb82 	bl	8001638 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fb7e 	bl	8001638 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e262      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4a:	4b88      	ldr	r3, [pc, #544]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2d0>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d060      	beq.n	8002028 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x310>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d116      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	4b7c      	ldr	r3, [pc, #496]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x328>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e23f      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4973      	ldr	r1, [pc, #460]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa4:	e040      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fae:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb3d 	bl	8001638 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fb39 	bl	8001638 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e21d      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd4:	4b65      	ldr	r3, [pc, #404]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b62      	ldr	r3, [pc, #392]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	495f      	ldr	r1, [pc, #380]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fb19 	bl	8001638 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fb15 	bl	8001638 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1f9      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03c      	beq.n	80020ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002042:	4a4a      	ldr	r2, [pc, #296]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff faf4 	bl	8001638 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff faf0 	bl	8001638 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1d4      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCC_OscConfig+0x3ec>
 8002074:	e01b      	b.n	80020ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207c:	4a3b      	ldr	r2, [pc, #236]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff fad7 	bl	8001638 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff fad3 	bl	8001638 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1b7      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ef      	bne.n	800208e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a6 	beq.w	8002208 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCC_OscConfig+0x508>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d118      	bne.n	8002126 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_OscConfig+0x508>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_RCC_OscConfig+0x508>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002100:	f7ff fa9a 	bl	8001638 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7ff fa96 	bl	8001638 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e17a      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x508>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x4d8>
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213e:	e029      	b.n	8002194 <HAL_RCC_OscConfig+0x52c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d115      	bne.n	8002174 <HAL_RCC_OscConfig+0x50c>
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	4a03      	ldr	r2, [pc, #12]	@ (800216c <HAL_RCC_OscConfig+0x504>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x52c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	4b9c      	ldr	r3, [pc, #624]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	4a9b      	ldr	r2, [pc, #620]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002184:	4b98      	ldr	r3, [pc, #608]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a97      	ldr	r2, [pc, #604]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff fa4c 	bl	8001638 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7ff fa48 	bl	8001638 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e12a      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b8b      	ldr	r3, [pc, #556]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ed      	beq.n	80021a4 <HAL_RCC_OscConfig+0x53c>
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff fa35 	bl	8001638 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff fa31 	bl	8001638 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e113      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e8:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ed      	bne.n	80021d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b7a      	ldr	r3, [pc, #488]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	4a79      	ldr	r2, [pc, #484]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80fe 	beq.w	800240e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	2b02      	cmp	r3, #2
 8002218:	f040 80d0 	bne.w	80023bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800221c:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d130      	bne.n	8002292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	3b01      	subs	r3, #1
 800223c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d127      	bne.n	8002292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d11f      	bne.n	8002292 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800225c:	2a07      	cmp	r2, #7
 800225e:	bf14      	ite	ne
 8002260:	2201      	movne	r2, #1
 8002262:	2200      	moveq	r2, #0
 8002264:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002266:	4293      	cmp	r3, r2
 8002268:	d113      	bne.n	8002292 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d109      	bne.n	8002292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d06e      	beq.n	8002370 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d069      	beq.n	800236c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002298:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022a4:	4b50      	ldr	r3, [pc, #320]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ad      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022b4:	4b4c      	ldr	r3, [pc, #304]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c0:	f7ff f9ba 	bl	8001638 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff f9b6 	bl	8001638 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e09a      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022da:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e6:	4b40      	ldr	r3, [pc, #256]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <HAL_RCC_OscConfig+0x784>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022f6:	3a01      	subs	r2, #1
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002300:	0212      	lsls	r2, r2, #8
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002308:	0852      	lsrs	r2, r2, #1
 800230a:	3a01      	subs	r2, #1
 800230c:	0552      	lsls	r2, r2, #21
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002314:	0852      	lsrs	r2, r2, #1
 8002316:	3a01      	subs	r2, #1
 8002318:	0652      	lsls	r2, r2, #25
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002320:	0912      	lsrs	r2, r2, #4
 8002322:	0452      	lsls	r2, r2, #17
 8002324:	430a      	orrs	r2, r1
 8002326:	4930      	ldr	r1, [pc, #192]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002344:	f7ff f978 	bl	8001638 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff f974 	bl	8001638 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e058      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236a:	e050      	b.n	800240e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04f      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d148      	bne.n	800240e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002386:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 800238e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002394:	f7ff f950 	bl	8001638 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff f94c 	bl	8001638 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e030      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x734>
 80023ba:	e028      	b.n	800240e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d023      	beq.n	800240a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_RCC_OscConfig+0x780>)
 80023c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff f933 	bl	8001638 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	e00c      	b.n	80023f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff f92f 	bl	8001638 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d905      	bls.n	80023f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e013      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_RCC_OscConfig+0x7b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ec      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_OscConfig+0x7b0>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4905      	ldr	r1, [pc, #20]	@ (8002418 <HAL_RCC_OscConfig+0x7b0>)
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x7b4>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e001      	b.n	800240e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	feeefffc 	.word	0xfeeefffc

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0e7      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b75      	ldr	r3, [pc, #468]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b72      	ldr	r3, [pc, #456]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4970      	ldr	r1, [pc, #448]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cf      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b66      	ldr	r3, [pc, #408]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800247c:	429a      	cmp	r2, r3
 800247e:	d908      	bls.n	8002492 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4960      	ldr	r1, [pc, #384]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04c      	beq.n	8002538 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d121      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0a6      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	4b54      	ldr	r3, [pc, #336]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e09a      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e08e      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e086      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4943      	ldr	r1, [pc, #268]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7ff f896 	bl	8001638 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff f892 	bl	8001638 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e06e      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002550:	429a      	cmp	r2, r3
 8002552:	d208      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	492b      	ldr	r1, [pc, #172]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002566:	4b29      	ldr	r3, [pc, #164]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d210      	bcs.n	8002596 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002574:	4b25      	ldr	r3, [pc, #148]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 0207 	bic.w	r2, r3, #7
 800257c:	4923      	ldr	r1, [pc, #140]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e036      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4918      	ldr	r1, [pc, #96]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4910      	ldr	r1, [pc, #64]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d4:	f000 f824 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	490b      	ldr	r1, [pc, #44]	@ (8002614 <HAL_RCC_ClockConfig+0x1f4>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <HAL_RCC_ClockConfig+0x1fc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe ffcd 	bl	8001598 <HAL_InitTick>
 80025fe:	4603      	mov	r3, r0
 8002600:	72fb      	strb	r3, [r7, #11]

  return status;
 8002602:	7afb      	ldrb	r3, [r7, #11]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
 8002614:	08005aa0 	.word	0x08005aa0
 8002618:	2000000c 	.word	0x2000000c
 800261c:	20000010 	.word	0x20000010

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b3e      	ldr	r3, [pc, #248]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d121      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d11e      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002654:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002660:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e005      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002670:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800267c:	4a2b      	ldr	r2, [pc, #172]	@ (800272c <HAL_RCC_GetSysClockFreq+0x10c>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d102      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002698:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x110>)
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e004      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a4:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x114>)
 80026a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d134      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d003      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0xac>
 80026c4:	e005      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c8:	617b      	str	r3, [r7, #20]
      break;
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ce:	617b      	str	r3, [r7, #20]
      break;
 80026d0:	e002      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	617b      	str	r3, [r7, #20]
      break;
 80026d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	3301      	adds	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	fb03 f202 	mul.w	r2, r3, r2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0e5b      	lsrs	r3, r3, #25
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	3301      	adds	r3, #1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002718:	69bb      	ldr	r3, [r7, #24]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	08005ab8 	.word	0x08005ab8
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	2000000c 	.word	0x2000000c

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4904      	ldr	r1, [pc, #16]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	08005ab0 	.word	0x08005ab0

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002780:	f7ff ffda 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08005ab0 	.word	0x08005ab0

080027a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f9ee 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
 80027c6:	e014      	b.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e0:	f7ff f9de 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 80027e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f8:	d10b      	bne.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b80      	cmp	r3, #128	@ 0x80
 80027fe:	d919      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2ba0      	cmp	r3, #160	@ 0xa0
 8002804:	d902      	bls.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002806:	2302      	movs	r3, #2
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e013      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e010      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	@ 0x80
 8002816:	d902      	bls.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002818:	2303      	movs	r3, #3
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e00a      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	@ 0x80
 8002822:	d102      	bne.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002824:	2302      	movs	r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e004      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d101      	bne.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 0207 	bic.w	r2, r3, #7
 800283c:	4909      	ldr	r1, [pc, #36]	@ (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	40022000 	.word	0x40022000

08002868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002870:	2300      	movs	r3, #0
 8002872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002874:	2300      	movs	r3, #0
 8002876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002880:	2b00      	cmp	r3, #0
 8002882:	d041      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002888:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800288c:	d02a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800288e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002892:	d824      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002894:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002898:	d008      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800289a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800289e:	d81e      	bhi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a8:	d010      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028aa:	e018      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028ac:	4b86      	ldr	r3, [pc, #536]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a85      	ldr	r2, [pc, #532]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b8:	e015      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fabb 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ca:	e00c      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3320      	adds	r3, #32
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fba6 	bl	8003024 <RCCEx_PLLSAI2_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028dc:	e003      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	74fb      	strb	r3, [r7, #19]
      break;
 80028e2:	e000      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ec:	4b76      	ldr	r3, [pc, #472]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fa:	4973      	ldr	r1, [pc, #460]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002902:	e001      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d041      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002918:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800291c:	d02a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800291e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002922:	d824      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002928:	d008      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800292a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800292e:	d81e      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d010      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800293a:	e018      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800293c:	4b62      	ldr	r3, [pc, #392]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a61      	ldr	r2, [pc, #388]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002946:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002948:	e015      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa73 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800295a:	e00c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3320      	adds	r3, #32
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fb5e 	bl	8003024 <RCCEx_PLLSAI2_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800296c:	e003      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	74fb      	strb	r3, [r7, #19]
      break;
 8002972:	e000      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800297c:	4b52      	ldr	r3, [pc, #328]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800298a:	494f      	ldr	r1, [pc, #316]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002992:	e001      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a0 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029aa:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c0:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	4a40      	ldr	r2, [pc, #256]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80029cc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d8:	2301      	movs	r3, #1
 80029da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029dc:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3a      	ldr	r2, [pc, #232]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fe26 	bl	8001638 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ee:	e009      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f0:	f7fe fe22 	bl	8001638 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	74fb      	strb	r3, [r7, #19]
        break;
 8002a02:	e005      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a04:	4b31      	ldr	r3, [pc, #196]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ef      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d15c      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a16:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01f      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d019      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	4a20      	ldr	r2, [pc, #128]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a60:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fde1 	bl	8001638 <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	e00b      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fddd 	bl	8001638 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d902      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ec      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ab6:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002abe:	e009      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
 8002ac4:	e006      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad4:	7c7b      	ldrb	r3, [r7, #17]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b9e      	ldr	r3, [pc, #632]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	4a9d      	ldr	r2, [pc, #628]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af2:	4b98      	ldr	r3, [pc, #608]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f023 0203 	bic.w	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	4994      	ldr	r1, [pc, #592]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b14:	4b8f      	ldr	r3, [pc, #572]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f023 020c 	bic.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	498c      	ldr	r1, [pc, #560]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b36:	4b87      	ldr	r3, [pc, #540]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	4983      	ldr	r1, [pc, #524]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b58:	4b7e      	ldr	r3, [pc, #504]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	497b      	ldr	r1, [pc, #492]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7a:	4b76      	ldr	r3, [pc, #472]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b88:	4972      	ldr	r1, [pc, #456]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	496a      	ldr	r1, [pc, #424]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	4961      	ldr	r1, [pc, #388]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bee:	4959      	ldr	r1, [pc, #356]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c02:	4b54      	ldr	r3, [pc, #336]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c10:	4950      	ldr	r1, [pc, #320]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c24:	4b4b      	ldr	r3, [pc, #300]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c32:	4948      	ldr	r1, [pc, #288]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c46:	4b43      	ldr	r3, [pc, #268]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	493f      	ldr	r1, [pc, #252]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d028      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c68:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c76:	4937      	ldr	r1, [pc, #220]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b32      	ldr	r3, [pc, #200]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
 8002c94:	e011      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f8c8 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d028      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cc6:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ccc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	491f      	ldr	r1, [pc, #124]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf0:	60d3      	str	r3, [r2, #12]
 8002cf2:	e011      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f899 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02b      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d32:	4908      	ldr	r1, [pc, #32]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d42:	d109      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a02      	ldr	r2, [pc, #8]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	60d3      	str	r3, [r2, #12]
 8002d50:	e014      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f867 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d02f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d96:	4928      	ldr	r1, [pc, #160]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	2102      	movs	r1, #2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f844 	bl	8002e3c <RCCEx_PLLSAI1_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d014      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	74bb      	strb	r3, [r7, #18]
 8002dc2:	e011      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f925 	bl	8003024 <RCCEx_PLLSAI2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002df4:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e02:	490d      	ldr	r1, [pc, #52]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e26:	4904      	ldr	r1, [pc, #16]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000

08002e3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e4a:	4b75      	ldr	r3, [pc, #468]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e56:	4b72      	ldr	r3, [pc, #456]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0203 	and.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d10d      	bne.n	8002e82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
       ||
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d047      	beq.n	8002f12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	e044      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d018      	beq.n	8002ec2 <RCCEx_PLLSAI1_Config+0x86>
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d825      	bhi.n	8002ee0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x62>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d009      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x74>
 8002e9c:	e020      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e9e:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11d      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eae:	e01a      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e013      	b.n	8002eea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ec2:	4b57      	ldr	r3, [pc, #348]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ece:	4b54      	ldr	r3, [pc, #336]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ede:	e006      	b.n	8002eee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e004      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	4944      	ldr	r1, [pc, #272]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d17d      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f18:	4b41      	ldr	r3, [pc, #260]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a40      	ldr	r2, [pc, #256]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe fb88 	bl	8001638 <HAL_GetTick>
 8002f28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f2a:	e009      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f2c:	f7fe fb84 	bl	8001638 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d902      	bls.n	8002f40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f3e:	e005      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f40:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ef      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d160      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f58:	4b31      	ldr	r3, [pc, #196]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6892      	ldr	r2, [r2, #8]
 8002f68:	0211      	lsls	r1, r2, #8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	0912      	lsrs	r2, r2, #4
 8002f70:	0452      	lsls	r2, r2, #17
 8002f72:	430a      	orrs	r2, r1
 8002f74:	492a      	ldr	r1, [pc, #168]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]
 8002f7a:	e027      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d112      	bne.n	8002fa8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f82:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6892      	ldr	r2, [r2, #8]
 8002f92:	0211      	lsls	r1, r2, #8
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6912      	ldr	r2, [r2, #16]
 8002f98:	0852      	lsrs	r2, r2, #1
 8002f9a:	3a01      	subs	r2, #1
 8002f9c:	0552      	lsls	r2, r2, #21
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	491f      	ldr	r1, [pc, #124]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	610b      	str	r3, [r1, #16]
 8002fa6:	e011      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
 8002fb8:	0211      	lsls	r1, r2, #8
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6952      	ldr	r2, [r2, #20]
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0652      	lsls	r2, r2, #25
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	4916      	ldr	r1, [pc, #88]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fb2e 	bl	8001638 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fde:	e009      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe0:	f7fe fb2a 	bl	8001638 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff2:	e005      	b.n	8003000 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4904      	ldr	r1, [pc, #16]	@ (8003020 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003032:	4b6a      	ldr	r3, [pc, #424]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d018      	beq.n	8003070 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800303e:	4b67      	ldr	r3, [pc, #412]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d10d      	bne.n	800306a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
       ||
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003056:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
       ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d047      	beq.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e044      	b.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d018      	beq.n	80030aa <RCCEx_PLLSAI2_Config+0x86>
 8003078:	2b03      	cmp	r3, #3
 800307a:	d825      	bhi.n	80030c8 <RCCEx_PLLSAI2_Config+0xa4>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <RCCEx_PLLSAI2_Config+0x62>
 8003080:	2b02      	cmp	r3, #2
 8003082:	d009      	beq.n	8003098 <RCCEx_PLLSAI2_Config+0x74>
 8003084:	e020      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003086:	4b55      	ldr	r3, [pc, #340]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11d      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003096:	e01a      	b.n	80030ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003098:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e013      	b.n	80030d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030aa:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030b6:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030c6:	e006      	b.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e004      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030de:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	430b      	orrs	r3, r1
 80030f4:	4939      	ldr	r1, [pc, #228]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d167      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003100:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe fa94 	bl	8001638 <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003112:	e009      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003114:	f7fe fa90 	bl	8001638 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	73fb      	strb	r3, [r7, #15]
        break;
 8003126:	e005      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003128:	4b2c      	ldr	r3, [pc, #176]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ef      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d14a      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	0211      	lsls	r1, r2, #8
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68d2      	ldr	r2, [r2, #12]
 8003156:	0912      	lsrs	r2, r2, #4
 8003158:	0452      	lsls	r2, r2, #17
 800315a:	430a      	orrs	r2, r1
 800315c:	491f      	ldr	r1, [pc, #124]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	614b      	str	r3, [r1, #20]
 8003162:	e011      	b.n	8003188 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800316c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	0211      	lsls	r1, r2, #8
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6912      	ldr	r2, [r2, #16]
 800317a:	0852      	lsrs	r2, r2, #1
 800317c:	3a01      	subs	r2, #1
 800317e:	0652      	lsls	r2, r2, #25
 8003180:	430a      	orrs	r2, r1
 8003182:	4916      	ldr	r1, [pc, #88]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fe fa50 	bl	8001638 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800319a:	e009      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800319c:	f7fe fa4c 	bl	8001638 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	73fb      	strb	r3, [r7, #15]
          break;
 80031ae:	e005      	b.n	80031bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4904      	ldr	r1, [pc, #16]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e040      	b.n	8003274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f8e0 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	@ 0x24
 800320c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fae0 	bl	80037ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f825 	bl	800327c <UART_SetConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01b      	b.n	8003274 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fb5f 	bl	8003930 <UART_CheckIdleState>
 8003272:	4603      	mov	r3, r0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b08a      	sub	sp, #40	@ 0x28
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4ba4      	ldr	r3, [pc, #656]	@ (800353c <UART_SetConfig+0x2c0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a99      	ldr	r2, [pc, #612]	@ (8003540 <UART_SetConfig+0x2c4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e4:	4313      	orrs	r3, r2
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a90      	ldr	r2, [pc, #576]	@ (8003544 <UART_SetConfig+0x2c8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d126      	bne.n	8003354 <UART_SetConfig+0xd8>
 8003306:	4b90      	ldr	r3, [pc, #576]	@ (8003548 <UART_SetConfig+0x2cc>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d81b      	bhi.n	800334c <UART_SetConfig+0xd0>
 8003314:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <UART_SetConfig+0xa0>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333d 	.word	0x0800333d
 8003324:	08003335 	.word	0x08003335
 8003328:	08003345 	.word	0x08003345
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e116      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003334:	2302      	movs	r3, #2
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333a:	e112      	b.n	8003562 <UART_SetConfig+0x2e6>
 800333c:	2304      	movs	r3, #4
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003342:	e10e      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003344:	2308      	movs	r3, #8
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334a:	e10a      	b.n	8003562 <UART_SetConfig+0x2e6>
 800334c:	2310      	movs	r3, #16
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003352:	e106      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7c      	ldr	r2, [pc, #496]	@ (800354c <UART_SetConfig+0x2d0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d138      	bne.n	80033d0 <UART_SetConfig+0x154>
 800335e:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <UART_SetConfig+0x2cc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d82d      	bhi.n	80033c8 <UART_SetConfig+0x14c>
 800336c:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <UART_SetConfig+0xf8>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033c9 	.word	0x080033c9
 800337c:	080033c9 	.word	0x080033c9
 8003380:	080033c9 	.word	0x080033c9
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080033c9 	.word	0x080033c9
 800338c:	080033c9 	.word	0x080033c9
 8003390:	080033c9 	.word	0x080033c9
 8003394:	080033b1 	.word	0x080033b1
 8003398:	080033c9 	.word	0x080033c9
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033c1 	.word	0x080033c1
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ae:	e0d8      	b.n	8003562 <UART_SetConfig+0x2e6>
 80033b0:	2302      	movs	r3, #2
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e0d4      	b.n	8003562 <UART_SetConfig+0x2e6>
 80033b8:	2304      	movs	r3, #4
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e0d0      	b.n	8003562 <UART_SetConfig+0x2e6>
 80033c0:	2308      	movs	r3, #8
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e0cc      	b.n	8003562 <UART_SetConfig+0x2e6>
 80033c8:	2310      	movs	r3, #16
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e0c8      	b.n	8003562 <UART_SetConfig+0x2e6>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003550 <UART_SetConfig+0x2d4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d125      	bne.n	8003426 <UART_SetConfig+0x1aa>
 80033da:	4b5b      	ldr	r3, [pc, #364]	@ (8003548 <UART_SetConfig+0x2cc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033e4:	2b30      	cmp	r3, #48	@ 0x30
 80033e6:	d016      	beq.n	8003416 <UART_SetConfig+0x19a>
 80033e8:	2b30      	cmp	r3, #48	@ 0x30
 80033ea:	d818      	bhi.n	800341e <UART_SetConfig+0x1a2>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d00a      	beq.n	8003406 <UART_SetConfig+0x18a>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d814      	bhi.n	800341e <UART_SetConfig+0x1a2>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <UART_SetConfig+0x182>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d008      	beq.n	800340e <UART_SetConfig+0x192>
 80033fc:	e00f      	b.n	800341e <UART_SetConfig+0x1a2>
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003404:	e0ad      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003406:	2302      	movs	r3, #2
 8003408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340c:	e0a9      	b.n	8003562 <UART_SetConfig+0x2e6>
 800340e:	2304      	movs	r3, #4
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003414:	e0a5      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003416:	2308      	movs	r3, #8
 8003418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341c:	e0a1      	b.n	8003562 <UART_SetConfig+0x2e6>
 800341e:	2310      	movs	r3, #16
 8003420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003424:	e09d      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <UART_SetConfig+0x2d8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d125      	bne.n	800347c <UART_SetConfig+0x200>
 8003430:	4b45      	ldr	r3, [pc, #276]	@ (8003548 <UART_SetConfig+0x2cc>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800343a:	2bc0      	cmp	r3, #192	@ 0xc0
 800343c:	d016      	beq.n	800346c <UART_SetConfig+0x1f0>
 800343e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003440:	d818      	bhi.n	8003474 <UART_SetConfig+0x1f8>
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d00a      	beq.n	800345c <UART_SetConfig+0x1e0>
 8003446:	2b80      	cmp	r3, #128	@ 0x80
 8003448:	d814      	bhi.n	8003474 <UART_SetConfig+0x1f8>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <UART_SetConfig+0x1d8>
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	d008      	beq.n	8003464 <UART_SetConfig+0x1e8>
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x1f8>
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345a:	e082      	b.n	8003562 <UART_SetConfig+0x2e6>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003462:	e07e      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e07a      	b.n	8003562 <UART_SetConfig+0x2e6>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003472:	e076      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347a:	e072      	b.n	8003562 <UART_SetConfig+0x2e6>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <UART_SetConfig+0x2dc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12a      	bne.n	80034dc <UART_SetConfig+0x260>
 8003486:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <UART_SetConfig+0x2cc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003494:	d01a      	beq.n	80034cc <UART_SetConfig+0x250>
 8003496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800349a:	d81b      	bhi.n	80034d4 <UART_SetConfig+0x258>
 800349c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a0:	d00c      	beq.n	80034bc <UART_SetConfig+0x240>
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a6:	d815      	bhi.n	80034d4 <UART_SetConfig+0x258>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x238>
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b0:	d008      	beq.n	80034c4 <UART_SetConfig+0x248>
 80034b2:	e00f      	b.n	80034d4 <UART_SetConfig+0x258>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	e052      	b.n	8003562 <UART_SetConfig+0x2e6>
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c2:	e04e      	b.n	8003562 <UART_SetConfig+0x2e6>
 80034c4:	2304      	movs	r3, #4
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ca:	e04a      	b.n	8003562 <UART_SetConfig+0x2e6>
 80034cc:	2308      	movs	r3, #8
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d2:	e046      	b.n	8003562 <UART_SetConfig+0x2e6>
 80034d4:	2310      	movs	r3, #16
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034da:	e042      	b.n	8003562 <UART_SetConfig+0x2e6>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <UART_SetConfig+0x2c4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d13a      	bne.n	800355c <UART_SetConfig+0x2e0>
 80034e6:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <UART_SetConfig+0x2cc>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f4:	d01a      	beq.n	800352c <UART_SetConfig+0x2b0>
 80034f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034fa:	d81b      	bhi.n	8003534 <UART_SetConfig+0x2b8>
 80034fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003500:	d00c      	beq.n	800351c <UART_SetConfig+0x2a0>
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003506:	d815      	bhi.n	8003534 <UART_SetConfig+0x2b8>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <UART_SetConfig+0x298>
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003510:	d008      	beq.n	8003524 <UART_SetConfig+0x2a8>
 8003512:	e00f      	b.n	8003534 <UART_SetConfig+0x2b8>
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e022      	b.n	8003562 <UART_SetConfig+0x2e6>
 800351c:	2302      	movs	r3, #2
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e01e      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003524:	2304      	movs	r3, #4
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e01a      	b.n	8003562 <UART_SetConfig+0x2e6>
 800352c:	2308      	movs	r3, #8
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003532:	e016      	b.n	8003562 <UART_SetConfig+0x2e6>
 8003534:	2310      	movs	r3, #16
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353a:	e012      	b.n	8003562 <UART_SetConfig+0x2e6>
 800353c:	efff69f3 	.word	0xefff69f3
 8003540:	40008000 	.word	0x40008000
 8003544:	40013800 	.word	0x40013800
 8003548:	40021000 	.word	0x40021000
 800354c:	40004400 	.word	0x40004400
 8003550:	40004800 	.word	0x40004800
 8003554:	40004c00 	.word	0x40004c00
 8003558:	40005000 	.word	0x40005000
 800355c:	2310      	movs	r3, #16
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a9f      	ldr	r2, [pc, #636]	@ (80037e4 <UART_SetConfig+0x568>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d17a      	bne.n	8003662 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800356c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003570:	2b08      	cmp	r3, #8
 8003572:	d824      	bhi.n	80035be <UART_SetConfig+0x342>
 8003574:	a201      	add	r2, pc, #4	@ (adr r2, 800357c <UART_SetConfig+0x300>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035bf 	.word	0x080035bf
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035bf 	.word	0x080035bf
 800358c:	080035af 	.word	0x080035af
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035bf 	.word	0x080035bf
 800359c:	080035b7 	.word	0x080035b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7ff f8d6 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80035a4:	61f8      	str	r0, [r7, #28]
        break;
 80035a6:	e010      	b.n	80035ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b8f      	ldr	r3, [pc, #572]	@ (80037e8 <UART_SetConfig+0x56c>)
 80035aa:	61fb      	str	r3, [r7, #28]
        break;
 80035ac:	e00d      	b.n	80035ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7ff f837 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80035b2:	61f8      	str	r0, [r7, #28]
        break;
 80035b4:	e009      	b.n	80035ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ba:	61fb      	str	r3, [r7, #28]
        break;
 80035bc:	e005      	b.n	80035ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80fb 	beq.w	80037c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d305      	bcc.n	80035ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d903      	bls.n	80035f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035f4:	e0e8      	b.n	80037c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2200      	movs	r2, #0
 80035fa:	461c      	mov	r4, r3
 80035fc:	4615      	mov	r5, r2
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	022b      	lsls	r3, r5, #8
 8003608:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800360c:	0222      	lsls	r2, r4, #8
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	6849      	ldr	r1, [r1, #4]
 8003612:	0849      	lsrs	r1, r1, #1
 8003614:	2000      	movs	r0, #0
 8003616:	4688      	mov	r8, r1
 8003618:	4681      	mov	r9, r0
 800361a:	eb12 0a08 	adds.w	sl, r2, r8
 800361e:	eb43 0b09 	adc.w	fp, r3, r9
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003630:	4650      	mov	r0, sl
 8003632:	4659      	mov	r1, fp
 8003634:	f7fd faac 	bl	8000b90 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4613      	mov	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003646:	d308      	bcc.n	800365a <UART_SetConfig+0x3de>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364e:	d204      	bcs.n	800365a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	e0b6      	b.n	80037c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003660:	e0b2      	b.n	80037c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800366a:	d15e      	bne.n	800372a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800366c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003670:	2b08      	cmp	r3, #8
 8003672:	d828      	bhi.n	80036c6 <UART_SetConfig+0x44a>
 8003674:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <UART_SetConfig+0x400>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	080036a1 	.word	0x080036a1
 8003680:	080036a9 	.word	0x080036a9
 8003684:	080036b1 	.word	0x080036b1
 8003688:	080036c7 	.word	0x080036c7
 800368c:	080036b7 	.word	0x080036b7
 8003690:	080036c7 	.word	0x080036c7
 8003694:	080036c7 	.word	0x080036c7
 8003698:	080036c7 	.word	0x080036c7
 800369c:	080036bf 	.word	0x080036bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a0:	f7ff f856 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80036a4:	61f8      	str	r0, [r7, #28]
        break;
 80036a6:	e014      	b.n	80036d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a8:	f7ff f868 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80036ac:	61f8      	str	r0, [r7, #28]
        break;
 80036ae:	e010      	b.n	80036d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b0:	4b4d      	ldr	r3, [pc, #308]	@ (80037e8 <UART_SetConfig+0x56c>)
 80036b2:	61fb      	str	r3, [r7, #28]
        break;
 80036b4:	e00d      	b.n	80036d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b6:	f7fe ffb3 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80036ba:	61f8      	str	r0, [r7, #28]
        break;
 80036bc:	e009      	b.n	80036d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c2:	61fb      	str	r3, [r7, #28]
        break;
 80036c4:	e005      	b.n	80036d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d077      	beq.n	80037c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005a      	lsls	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d916      	bls.n	8003722 <UART_SetConfig+0x4a6>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fa:	d212      	bcs.n	8003722 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f023 030f 	bic.w	r3, r3, #15
 8003704:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b29a      	uxth	r2, r3
 8003712:	8afb      	ldrh	r3, [r7, #22]
 8003714:	4313      	orrs	r3, r2
 8003716:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	8afa      	ldrh	r2, [r7, #22]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e052      	b.n	80037c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003728:	e04e      	b.n	80037c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800372a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800372e:	2b08      	cmp	r3, #8
 8003730:	d827      	bhi.n	8003782 <UART_SetConfig+0x506>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0x4bc>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fff8 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8003760:	61f8      	str	r0, [r7, #28]
        break;
 8003762:	e014      	b.n	800378e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f80a 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 8003768:	61f8      	str	r0, [r7, #28]
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b1e      	ldr	r3, [pc, #120]	@ (80037e8 <UART_SetConfig+0x56c>)
 800376e:	61fb      	str	r3, [r7, #28]
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe ff55 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8003776:	61f8      	str	r0, [r7, #28]
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800378c:	bf00      	nop
    }

    if (pclk != 0U)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d019      	beq.n	80037c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	085a      	lsrs	r2, r3, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	441a      	add	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	d909      	bls.n	80037c2 <UART_SetConfig+0x546>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b4:	d205      	bcs.n	80037c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e002      	b.n	80037c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e2:	bf00      	nop
 80037e4:	40008000 	.word	0x40008000
 80037e8:	00f42400 	.word	0x00f42400

080037ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01a      	beq.n	8003902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ea:	d10a      	bne.n	8003902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b098      	sub	sp, #96	@ 0x60
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003940:	f7fd fe7a 	bl	8001638 <HAL_GetTick>
 8003944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b08      	cmp	r3, #8
 8003952:	d12e      	bne.n	80039b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f88c 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d021      	beq.n	80039b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003982:	653b      	str	r3, [r7, #80]	@ 0x50
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
 800398e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e062      	b.n	8003a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d149      	bne.n	8003a54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c8:	2200      	movs	r2, #0
 80039ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f856 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d03c      	beq.n	8003a54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	623b      	str	r3, [r7, #32]
   return(result);
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a2c:	61fa      	str	r2, [r7, #28]
 8003a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e011      	b.n	8003a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3758      	adds	r7, #88	@ 0x58
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	e04f      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a98:	d04b      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fd fdcd 	bl	8001638 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e04e      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d037      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b80      	cmp	r3, #128	@ 0x80
 8003ac6:	d034      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d031      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d110      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f838 	bl	8003b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2208      	movs	r2, #8
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e029      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0c:	d111      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f81e 	bl	8003b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e00f      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0a0      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b095      	sub	sp, #84	@ 0x54
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d118      	bne.n	8003c02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0310 	bic.w	r3, r3, #16
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6979      	ldr	r1, [r7, #20]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c16:	bf00      	nop
 8003c18:	3754      	adds	r7, #84	@ 0x54
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <memset>:
 8003c22:	4402      	add	r2, r0
 8003c24:	4603      	mov	r3, r0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d100      	bne.n	8003c2c <memset+0xa>
 8003c2a:	4770      	bx	lr
 8003c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c30:	e7f9      	b.n	8003c26 <memset+0x4>
	...

08003c34 <__errno>:
 8003c34:	4b01      	ldr	r3, [pc, #4]	@ (8003c3c <__errno+0x8>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000018 	.word	0x20000018

08003c40 <__libc_init_array>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	4d0d      	ldr	r5, [pc, #52]	@ (8003c78 <__libc_init_array+0x38>)
 8003c44:	4c0d      	ldr	r4, [pc, #52]	@ (8003c7c <__libc_init_array+0x3c>)
 8003c46:	1b64      	subs	r4, r4, r5
 8003c48:	10a4      	asrs	r4, r4, #2
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	42a6      	cmp	r6, r4
 8003c4e:	d109      	bne.n	8003c64 <__libc_init_array+0x24>
 8003c50:	4d0b      	ldr	r5, [pc, #44]	@ (8003c80 <__libc_init_array+0x40>)
 8003c52:	4c0c      	ldr	r4, [pc, #48]	@ (8003c84 <__libc_init_array+0x44>)
 8003c54:	f001 ff18 	bl	8005a88 <_init>
 8003c58:	1b64      	subs	r4, r4, r5
 8003c5a:	10a4      	asrs	r4, r4, #2
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	42a6      	cmp	r6, r4
 8003c60:	d105      	bne.n	8003c6e <__libc_init_array+0x2e>
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c68:	4798      	blx	r3
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7ee      	b.n	8003c4c <__libc_init_array+0xc>
 8003c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c72:	4798      	blx	r3
 8003c74:	3601      	adds	r6, #1
 8003c76:	e7f2      	b.n	8003c5e <__libc_init_array+0x1e>
 8003c78:	08005d08 	.word	0x08005d08
 8003c7c:	08005d08 	.word	0x08005d08
 8003c80:	08005d08 	.word	0x08005d08
 8003c84:	08005d0c 	.word	0x08005d0c

08003c88 <pow>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	ed2d 8b02 	vpush	{d8}
 8003c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8003c92:	eef0 8a60 	vmov.f32	s17, s1
 8003c96:	ec55 4b11 	vmov	r4, r5, d1
 8003c9a:	f000 fa49 	bl	8004130 <__ieee754_pow>
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	ec57 6b10 	vmov	r6, r7, d0
 8003caa:	f7fc fee3 	bl	8000a74 <__aeabi_dcmpun>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d13b      	bne.n	8003d2a <pow+0xa2>
 8003cb2:	ec51 0b18 	vmov	r0, r1, d8
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f7fc fea9 	bl	8000a10 <__aeabi_dcmpeq>
 8003cbe:	b1b8      	cbz	r0, 8003cf0 <pow+0x68>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc fea2 	bl	8000a10 <__aeabi_dcmpeq>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d146      	bne.n	8003d5e <pow+0xd6>
 8003cd0:	ec45 4b10 	vmov	d0, r4, r5
 8003cd4:	f000 f89c 	bl	8003e10 <finite>
 8003cd8:	b338      	cbz	r0, 8003d2a <pow+0xa2>
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fe9f 	bl	8000a24 <__aeabi_dcmplt>
 8003ce6:	b300      	cbz	r0, 8003d2a <pow+0xa2>
 8003ce8:	f7ff ffa4 	bl	8003c34 <__errno>
 8003cec:	2322      	movs	r3, #34	@ 0x22
 8003cee:	e01b      	b.n	8003d28 <pow+0xa0>
 8003cf0:	ec47 6b10 	vmov	d0, r6, r7
 8003cf4:	f000 f88c 	bl	8003e10 <finite>
 8003cf8:	b9e0      	cbnz	r0, 8003d34 <pow+0xac>
 8003cfa:	eeb0 0a48 	vmov.f32	s0, s16
 8003cfe:	eef0 0a68 	vmov.f32	s1, s17
 8003d02:	f000 f885 	bl	8003e10 <finite>
 8003d06:	b1a8      	cbz	r0, 8003d34 <pow+0xac>
 8003d08:	ec45 4b10 	vmov	d0, r4, r5
 8003d0c:	f000 f880 	bl	8003e10 <finite>
 8003d10:	b180      	cbz	r0, 8003d34 <pow+0xac>
 8003d12:	4632      	mov	r2, r6
 8003d14:	463b      	mov	r3, r7
 8003d16:	4630      	mov	r0, r6
 8003d18:	4639      	mov	r1, r7
 8003d1a:	f7fc feab 	bl	8000a74 <__aeabi_dcmpun>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0e2      	beq.n	8003ce8 <pow+0x60>
 8003d22:	f7ff ff87 	bl	8003c34 <__errno>
 8003d26:	2321      	movs	r3, #33	@ 0x21
 8003d28:	6003      	str	r3, [r0, #0]
 8003d2a:	ecbd 8b02 	vpop	{d8}
 8003d2e:	ec47 6b10 	vmov	d0, r6, r7
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	2200      	movs	r2, #0
 8003d36:	2300      	movs	r3, #0
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fe68 	bl	8000a10 <__aeabi_dcmpeq>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d0f2      	beq.n	8003d2a <pow+0xa2>
 8003d44:	eeb0 0a48 	vmov.f32	s0, s16
 8003d48:	eef0 0a68 	vmov.f32	s1, s17
 8003d4c:	f000 f860 	bl	8003e10 <finite>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d0ea      	beq.n	8003d2a <pow+0xa2>
 8003d54:	ec45 4b10 	vmov	d0, r4, r5
 8003d58:	f000 f85a 	bl	8003e10 <finite>
 8003d5c:	e7c3      	b.n	8003ce6 <pow+0x5e>
 8003d5e:	4f01      	ldr	r7, [pc, #4]	@ (8003d64 <pow+0xdc>)
 8003d60:	2600      	movs	r6, #0
 8003d62:	e7e2      	b.n	8003d2a <pow+0xa2>
 8003d64:	3ff00000 	.word	0x3ff00000

08003d68 <sin>:
 8003d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d6a:	ec53 2b10 	vmov	r2, r3, d0
 8003d6e:	4826      	ldr	r0, [pc, #152]	@ (8003e08 <sin+0xa0>)
 8003d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d74:	4281      	cmp	r1, r0
 8003d76:	d807      	bhi.n	8003d88 <sin+0x20>
 8003d78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003e00 <sin+0x98>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	b005      	add	sp, #20
 8003d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d84:	f000 b918 	b.w	8003fb8 <__kernel_sin>
 8003d88:	4820      	ldr	r0, [pc, #128]	@ (8003e0c <sin+0xa4>)
 8003d8a:	4281      	cmp	r1, r0
 8003d8c:	d908      	bls.n	8003da0 <sin+0x38>
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fc fa1d 	bl	80001d0 <__aeabi_dsub>
 8003d96:	ec41 0b10 	vmov	d0, r0, r1
 8003d9a:	b005      	add	sp, #20
 8003d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003da0:	4668      	mov	r0, sp
 8003da2:	f000 ff11 	bl	8004bc8 <__ieee754_rem_pio2>
 8003da6:	f000 0003 	and.w	r0, r0, #3
 8003daa:	2801      	cmp	r0, #1
 8003dac:	d00c      	beq.n	8003dc8 <sin+0x60>
 8003dae:	2802      	cmp	r0, #2
 8003db0:	d011      	beq.n	8003dd6 <sin+0x6e>
 8003db2:	b9e8      	cbnz	r0, 8003df0 <sin+0x88>
 8003db4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003db8:	ed9d 0b00 	vldr	d0, [sp]
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f000 f8fb 	bl	8003fb8 <__kernel_sin>
 8003dc2:	ec51 0b10 	vmov	r0, r1, d0
 8003dc6:	e7e6      	b.n	8003d96 <sin+0x2e>
 8003dc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dcc:	ed9d 0b00 	vldr	d0, [sp]
 8003dd0:	f000 f82a 	bl	8003e28 <__kernel_cos>
 8003dd4:	e7f5      	b.n	8003dc2 <sin+0x5a>
 8003dd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dda:	ed9d 0b00 	vldr	d0, [sp]
 8003dde:	2001      	movs	r0, #1
 8003de0:	f000 f8ea 	bl	8003fb8 <__kernel_sin>
 8003de4:	ec53 2b10 	vmov	r2, r3, d0
 8003de8:	4610      	mov	r0, r2
 8003dea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003dee:	e7d2      	b.n	8003d96 <sin+0x2e>
 8003df0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003df4:	ed9d 0b00 	vldr	d0, [sp]
 8003df8:	f000 f816 	bl	8003e28 <__kernel_cos>
 8003dfc:	e7f2      	b.n	8003de4 <sin+0x7c>
 8003dfe:	bf00      	nop
	...
 8003e08:	3fe921fb 	.word	0x3fe921fb
 8003e0c:	7fefffff 	.word	0x7fefffff

08003e10 <finite>:
 8003e10:	b082      	sub	sp, #8
 8003e12:	ed8d 0b00 	vstr	d0, [sp]
 8003e16:	9801      	ldr	r0, [sp, #4]
 8003e18:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e1c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003e20:	0fc0      	lsrs	r0, r0, #31
 8003e22:	b002      	add	sp, #8
 8003e24:	4770      	bx	lr
	...

08003e28 <__kernel_cos>:
 8003e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	ec57 6b10 	vmov	r6, r7, d0
 8003e30:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003e34:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003e38:	ed8d 1b00 	vstr	d1, [sp]
 8003e3c:	d206      	bcs.n	8003e4c <__kernel_cos+0x24>
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc fe2d 	bl	8000aa0 <__aeabi_d2iz>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	f000 8088 	beq.w	8003f5c <__kernel_cos+0x134>
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc fb74 	bl	8000540 <__aeabi_dmul>
 8003e58:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <__kernel_cos+0x178>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	460d      	mov	r5, r1
 8003e60:	f7fc fb6e 	bl	8000540 <__aeabi_dmul>
 8003e64:	a340      	add	r3, pc, #256	@ (adr r3, 8003f68 <__kernel_cos+0x140>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	4682      	mov	sl, r0
 8003e6c:	468b      	mov	fp, r1
 8003e6e:	4620      	mov	r0, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7fc fb65 	bl	8000540 <__aeabi_dmul>
 8003e76:	a33e      	add	r3, pc, #248	@ (adr r3, 8003f70 <__kernel_cos+0x148>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc f9aa 	bl	80001d4 <__adddf3>
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	f7fc fb5c 	bl	8000540 <__aeabi_dmul>
 8003e88:	a33b      	add	r3, pc, #236	@ (adr r3, 8003f78 <__kernel_cos+0x150>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc f99f 	bl	80001d0 <__aeabi_dsub>
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f7fc fb53 	bl	8000540 <__aeabi_dmul>
 8003e9a:	a339      	add	r3, pc, #228	@ (adr r3, 8003f80 <__kernel_cos+0x158>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc f998 	bl	80001d4 <__adddf3>
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	f7fc fb4a 	bl	8000540 <__aeabi_dmul>
 8003eac:	a336      	add	r3, pc, #216	@ (adr r3, 8003f88 <__kernel_cos+0x160>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc f98d 	bl	80001d0 <__aeabi_dsub>
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f7fc fb41 	bl	8000540 <__aeabi_dmul>
 8003ebe:	a334      	add	r3, pc, #208	@ (adr r3, 8003f90 <__kernel_cos+0x168>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc f986 	bl	80001d4 <__adddf3>
 8003ec8:	4622      	mov	r2, r4
 8003eca:	462b      	mov	r3, r5
 8003ecc:	f7fc fb38 	bl	8000540 <__aeabi_dmul>
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	f7fc fb34 	bl	8000540 <__aeabi_dmul>
 8003ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003edc:	4604      	mov	r4, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	f7fc fb2c 	bl	8000540 <__aeabi_dmul>
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4602      	mov	r2, r0
 8003eec:	4629      	mov	r1, r5
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f7fc f96e 	bl	80001d0 <__aeabi_dsub>
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa4 <__kernel_cos+0x17c>)
 8003ef6:	4598      	cmp	r8, r3
 8003ef8:	4606      	mov	r6, r0
 8003efa:	460f      	mov	r7, r1
 8003efc:	d810      	bhi.n	8003f20 <__kernel_cos+0xf8>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4650      	mov	r0, sl
 8003f04:	4659      	mov	r1, fp
 8003f06:	f7fc f963 	bl	80001d0 <__aeabi_dsub>
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4926      	ldr	r1, [pc, #152]	@ (8003fa8 <__kernel_cos+0x180>)
 8003f0e:	4602      	mov	r2, r0
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc f95d 	bl	80001d0 <__aeabi_dsub>
 8003f16:	ec41 0b10 	vmov	d0, r0, r1
 8003f1a:	b003      	add	sp, #12
 8003f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f20:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <__kernel_cos+0x184>)
 8003f22:	4921      	ldr	r1, [pc, #132]	@ (8003fa8 <__kernel_cos+0x180>)
 8003f24:	4598      	cmp	r8, r3
 8003f26:	bf8c      	ite	hi
 8003f28:	4d21      	ldrhi	r5, [pc, #132]	@ (8003fb0 <__kernel_cos+0x188>)
 8003f2a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003f2e:	2400      	movs	r4, #0
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fc f94b 	bl	80001d0 <__aeabi_dsub>
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	4689      	mov	r9, r1
 8003f40:	462b      	mov	r3, r5
 8003f42:	4650      	mov	r0, sl
 8003f44:	4659      	mov	r1, fp
 8003f46:	f7fc f943 	bl	80001d0 <__aeabi_dsub>
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	f7fc f93f 	bl	80001d0 <__aeabi_dsub>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	e7da      	b.n	8003f12 <__kernel_cos+0xea>
 8003f5c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003f98 <__kernel_cos+0x170>
 8003f60:	e7db      	b.n	8003f1a <__kernel_cos+0xf2>
 8003f62:	bf00      	nop
 8003f64:	f3af 8000 	nop.w
 8003f68:	be8838d4 	.word	0xbe8838d4
 8003f6c:	bda8fae9 	.word	0xbda8fae9
 8003f70:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f74:	3e21ee9e 	.word	0x3e21ee9e
 8003f78:	809c52ad 	.word	0x809c52ad
 8003f7c:	3e927e4f 	.word	0x3e927e4f
 8003f80:	19cb1590 	.word	0x19cb1590
 8003f84:	3efa01a0 	.word	0x3efa01a0
 8003f88:	16c15177 	.word	0x16c15177
 8003f8c:	3f56c16c 	.word	0x3f56c16c
 8003f90:	5555554c 	.word	0x5555554c
 8003f94:	3fa55555 	.word	0x3fa55555
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	3ff00000 	.word	0x3ff00000
 8003fa0:	3fe00000 	.word	0x3fe00000
 8003fa4:	3fd33332 	.word	0x3fd33332
 8003fa8:	3ff00000 	.word	0x3ff00000
 8003fac:	3fe90000 	.word	0x3fe90000
 8003fb0:	3fd20000 	.word	0x3fd20000
 8003fb4:	00000000 	.word	0x00000000

08003fb8 <__kernel_sin>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	ec55 4b10 	vmov	r4, r5, d0
 8003fc0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003fca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003fce:	4680      	mov	r8, r0
 8003fd0:	d205      	bcs.n	8003fde <__kernel_sin+0x26>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f7fc fd63 	bl	8000aa0 <__aeabi_d2iz>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d052      	beq.n	8004084 <__kernel_sin+0xcc>
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc faab 	bl	8000540 <__aeabi_dmul>
 8003fea:	4682      	mov	sl, r0
 8003fec:	468b      	mov	fp, r1
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc faa3 	bl	8000540 <__aeabi_dmul>
 8003ffa:	a342      	add	r3, pc, #264	@ (adr r3, 8004104 <__kernel_sin+0x14c>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	e9cd 0100 	strd	r0, r1, [sp]
 8004004:	4650      	mov	r0, sl
 8004006:	4659      	mov	r1, fp
 8004008:	f7fc fa9a 	bl	8000540 <__aeabi_dmul>
 800400c:	a33f      	add	r3, pc, #252	@ (adr r3, 800410c <__kernel_sin+0x154>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8dd 	bl	80001d0 <__aeabi_dsub>
 8004016:	4652      	mov	r2, sl
 8004018:	465b      	mov	r3, fp
 800401a:	f7fc fa91 	bl	8000540 <__aeabi_dmul>
 800401e:	a33d      	add	r3, pc, #244	@ (adr r3, 8004114 <__kernel_sin+0x15c>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f8d6 	bl	80001d4 <__adddf3>
 8004028:	4652      	mov	r2, sl
 800402a:	465b      	mov	r3, fp
 800402c:	f7fc fa88 	bl	8000540 <__aeabi_dmul>
 8004030:	a33a      	add	r3, pc, #232	@ (adr r3, 800411c <__kernel_sin+0x164>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc f8cb 	bl	80001d0 <__aeabi_dsub>
 800403a:	4652      	mov	r2, sl
 800403c:	465b      	mov	r3, fp
 800403e:	f7fc fa7f 	bl	8000540 <__aeabi_dmul>
 8004042:	a338      	add	r3, pc, #224	@ (adr r3, 8004124 <__kernel_sin+0x16c>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc f8c4 	bl	80001d4 <__adddf3>
 800404c:	4606      	mov	r6, r0
 800404e:	460f      	mov	r7, r1
 8004050:	f1b8 0f00 	cmp.w	r8, #0
 8004054:	d11b      	bne.n	800408e <__kernel_sin+0xd6>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4650      	mov	r0, sl
 800405c:	4659      	mov	r1, fp
 800405e:	f7fc fa6f 	bl	8000540 <__aeabi_dmul>
 8004062:	a325      	add	r3, pc, #148	@ (adr r3, 80040f8 <__kernel_sin+0x140>)
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f7fc f8b2 	bl	80001d0 <__aeabi_dsub>
 800406c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004070:	f7fc fa66 	bl	8000540 <__aeabi_dmul>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc f8aa 	bl	80001d4 <__adddf3>
 8004080:	4604      	mov	r4, r0
 8004082:	460d      	mov	r5, r1
 8004084:	ec45 4b10 	vmov	d0, r4, r5
 8004088:	b005      	add	sp, #20
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <__kernel_sin+0x148>)
 8004094:	2200      	movs	r2, #0
 8004096:	f7fc fa53 	bl	8000540 <__aeabi_dmul>
 800409a:	4632      	mov	r2, r6
 800409c:	4680      	mov	r8, r0
 800409e:	4689      	mov	r9, r1
 80040a0:	463b      	mov	r3, r7
 80040a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040a6:	f7fc fa4b 	bl	8000540 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4640      	mov	r0, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	f7fc f88d 	bl	80001d0 <__aeabi_dsub>
 80040b6:	4652      	mov	r2, sl
 80040b8:	465b      	mov	r3, fp
 80040ba:	f7fc fa41 	bl	8000540 <__aeabi_dmul>
 80040be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c2:	f7fc f885 	bl	80001d0 <__aeabi_dsub>
 80040c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80040f8 <__kernel_sin+0x140>)
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040d4:	f7fc fa34 	bl	8000540 <__aeabi_dmul>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4630      	mov	r0, r6
 80040de:	4639      	mov	r1, r7
 80040e0:	f7fc f878 	bl	80001d4 <__adddf3>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc f870 	bl	80001d0 <__aeabi_dsub>
 80040f0:	e7c6      	b.n	8004080 <__kernel_sin+0xc8>
 80040f2:	bf00      	nop
 80040f4:	f3af 8000 	nop.w
 80040f8:	55555549 	.word	0x55555549
 80040fc:	3fc55555 	.word	0x3fc55555
 8004100:	3fe00000 	.word	0x3fe00000
 8004104:	5acfd57c 	.word	0x5acfd57c
 8004108:	3de5d93a 	.word	0x3de5d93a
 800410c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004110:	3e5ae5e6 	.word	0x3e5ae5e6
 8004114:	57b1fe7d 	.word	0x57b1fe7d
 8004118:	3ec71de3 	.word	0x3ec71de3
 800411c:	19c161d5 	.word	0x19c161d5
 8004120:	3f2a01a0 	.word	0x3f2a01a0
 8004124:	1110f8a6 	.word	0x1110f8a6
 8004128:	3f811111 	.word	0x3f811111
 800412c:	00000000 	.word	0x00000000

08004130 <__ieee754_pow>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	b091      	sub	sp, #68	@ 0x44
 8004136:	ed8d 1b00 	vstr	d1, [sp]
 800413a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800413e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8004142:	ea5a 0001 	orrs.w	r0, sl, r1
 8004146:	ec57 6b10 	vmov	r6, r7, d0
 800414a:	d113      	bne.n	8004174 <__ieee754_pow+0x44>
 800414c:	19b3      	adds	r3, r6, r6
 800414e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8004152:	4152      	adcs	r2, r2
 8004154:	4298      	cmp	r0, r3
 8004156:	4b9a      	ldr	r3, [pc, #616]	@ (80043c0 <__ieee754_pow+0x290>)
 8004158:	4193      	sbcs	r3, r2
 800415a:	f080 84ee 	bcs.w	8004b3a <__ieee754_pow+0xa0a>
 800415e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f7fc f835 	bl	80001d4 <__adddf3>
 800416a:	ec41 0b10 	vmov	d0, r0, r1
 800416e:	b011      	add	sp, #68	@ 0x44
 8004170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004174:	4a93      	ldr	r2, [pc, #588]	@ (80043c4 <__ieee754_pow+0x294>)
 8004176:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800417a:	4295      	cmp	r5, r2
 800417c:	46b8      	mov	r8, r7
 800417e:	4633      	mov	r3, r6
 8004180:	d80a      	bhi.n	8004198 <__ieee754_pow+0x68>
 8004182:	d104      	bne.n	800418e <__ieee754_pow+0x5e>
 8004184:	2e00      	cmp	r6, #0
 8004186:	d1ea      	bne.n	800415e <__ieee754_pow+0x2e>
 8004188:	45aa      	cmp	sl, r5
 800418a:	d8e8      	bhi.n	800415e <__ieee754_pow+0x2e>
 800418c:	e001      	b.n	8004192 <__ieee754_pow+0x62>
 800418e:	4592      	cmp	sl, r2
 8004190:	d802      	bhi.n	8004198 <__ieee754_pow+0x68>
 8004192:	4592      	cmp	sl, r2
 8004194:	d10f      	bne.n	80041b6 <__ieee754_pow+0x86>
 8004196:	b171      	cbz	r1, 80041b6 <__ieee754_pow+0x86>
 8004198:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800419c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80041a0:	ea58 0803 	orrs.w	r8, r8, r3
 80041a4:	d1db      	bne.n	800415e <__ieee754_pow+0x2e>
 80041a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80041aa:	18db      	adds	r3, r3, r3
 80041ac:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80041b0:	4152      	adcs	r2, r2
 80041b2:	4598      	cmp	r8, r3
 80041b4:	e7cf      	b.n	8004156 <__ieee754_pow+0x26>
 80041b6:	f1b8 0f00 	cmp.w	r8, #0
 80041ba:	46ab      	mov	fp, r5
 80041bc:	da43      	bge.n	8004246 <__ieee754_pow+0x116>
 80041be:	4a82      	ldr	r2, [pc, #520]	@ (80043c8 <__ieee754_pow+0x298>)
 80041c0:	4592      	cmp	sl, r2
 80041c2:	d856      	bhi.n	8004272 <__ieee754_pow+0x142>
 80041c4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80041c8:	4592      	cmp	sl, r2
 80041ca:	f240 84c5 	bls.w	8004b58 <__ieee754_pow+0xa28>
 80041ce:	ea4f 522a 	mov.w	r2, sl, asr #20
 80041d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80041d6:	2a14      	cmp	r2, #20
 80041d8:	dd18      	ble.n	800420c <__ieee754_pow+0xdc>
 80041da:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80041de:	fa21 f402 	lsr.w	r4, r1, r2
 80041e2:	fa04 f202 	lsl.w	r2, r4, r2
 80041e6:	428a      	cmp	r2, r1
 80041e8:	f040 84b6 	bne.w	8004b58 <__ieee754_pow+0xa28>
 80041ec:	f004 0401 	and.w	r4, r4, #1
 80041f0:	f1c4 0402 	rsb	r4, r4, #2
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d159      	bne.n	80042ac <__ieee754_pow+0x17c>
 80041f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80041fc:	d148      	bne.n	8004290 <__ieee754_pow+0x160>
 80041fe:	4632      	mov	r2, r6
 8004200:	463b      	mov	r3, r7
 8004202:	4630      	mov	r0, r6
 8004204:	4639      	mov	r1, r7
 8004206:	f7fc f99b 	bl	8000540 <__aeabi_dmul>
 800420a:	e7ae      	b.n	800416a <__ieee754_pow+0x3a>
 800420c:	2900      	cmp	r1, #0
 800420e:	d14c      	bne.n	80042aa <__ieee754_pow+0x17a>
 8004210:	f1c2 0214 	rsb	r2, r2, #20
 8004214:	fa4a f402 	asr.w	r4, sl, r2
 8004218:	fa04 f202 	lsl.w	r2, r4, r2
 800421c:	4552      	cmp	r2, sl
 800421e:	f040 8498 	bne.w	8004b52 <__ieee754_pow+0xa22>
 8004222:	f004 0401 	and.w	r4, r4, #1
 8004226:	f1c4 0402 	rsb	r4, r4, #2
 800422a:	4a68      	ldr	r2, [pc, #416]	@ (80043cc <__ieee754_pow+0x29c>)
 800422c:	4592      	cmp	sl, r2
 800422e:	d1e3      	bne.n	80041f8 <__ieee754_pow+0xc8>
 8004230:	f1b9 0f00 	cmp.w	r9, #0
 8004234:	f280 8489 	bge.w	8004b4a <__ieee754_pow+0xa1a>
 8004238:	4964      	ldr	r1, [pc, #400]	@ (80043cc <__ieee754_pow+0x29c>)
 800423a:	4632      	mov	r2, r6
 800423c:	463b      	mov	r3, r7
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc faa8 	bl	8000794 <__aeabi_ddiv>
 8004244:	e791      	b.n	800416a <__ieee754_pow+0x3a>
 8004246:	2400      	movs	r4, #0
 8004248:	bb81      	cbnz	r1, 80042ac <__ieee754_pow+0x17c>
 800424a:	4a5e      	ldr	r2, [pc, #376]	@ (80043c4 <__ieee754_pow+0x294>)
 800424c:	4592      	cmp	sl, r2
 800424e:	d1ec      	bne.n	800422a <__ieee754_pow+0xfa>
 8004250:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8004254:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8004258:	431a      	orrs	r2, r3
 800425a:	f000 846e 	beq.w	8004b3a <__ieee754_pow+0xa0a>
 800425e:	4b5c      	ldr	r3, [pc, #368]	@ (80043d0 <__ieee754_pow+0x2a0>)
 8004260:	429d      	cmp	r5, r3
 8004262:	d908      	bls.n	8004276 <__ieee754_pow+0x146>
 8004264:	f1b9 0f00 	cmp.w	r9, #0
 8004268:	f280 846b 	bge.w	8004b42 <__ieee754_pow+0xa12>
 800426c:	2000      	movs	r0, #0
 800426e:	2100      	movs	r1, #0
 8004270:	e77b      	b.n	800416a <__ieee754_pow+0x3a>
 8004272:	2402      	movs	r4, #2
 8004274:	e7e8      	b.n	8004248 <__ieee754_pow+0x118>
 8004276:	f1b9 0f00 	cmp.w	r9, #0
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f6bf af72 	bge.w	800416a <__ieee754_pow+0x3a>
 8004286:	e9dd 0300 	ldrd	r0, r3, [sp]
 800428a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800428e:	e76c      	b.n	800416a <__ieee754_pow+0x3a>
 8004290:	4a50      	ldr	r2, [pc, #320]	@ (80043d4 <__ieee754_pow+0x2a4>)
 8004292:	4591      	cmp	r9, r2
 8004294:	d10a      	bne.n	80042ac <__ieee754_pow+0x17c>
 8004296:	f1b8 0f00 	cmp.w	r8, #0
 800429a:	db07      	blt.n	80042ac <__ieee754_pow+0x17c>
 800429c:	ec47 6b10 	vmov	d0, r6, r7
 80042a0:	b011      	add	sp, #68	@ 0x44
 80042a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a6:	f000 bf4b 	b.w	8005140 <__ieee754_sqrt>
 80042aa:	2400      	movs	r4, #0
 80042ac:	ec47 6b10 	vmov	d0, r6, r7
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	f000 fe85 	bl	8004fc0 <fabs>
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	ec51 0b10 	vmov	r0, r1, d0
 80042bc:	bb43      	cbnz	r3, 8004310 <__ieee754_pow+0x1e0>
 80042be:	4b43      	ldr	r3, [pc, #268]	@ (80043cc <__ieee754_pow+0x29c>)
 80042c0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d000      	beq.n	80042ca <__ieee754_pow+0x19a>
 80042c8:	bb15      	cbnz	r5, 8004310 <__ieee754_pow+0x1e0>
 80042ca:	f1b9 0f00 	cmp.w	r9, #0
 80042ce:	da05      	bge.n	80042dc <__ieee754_pow+0x1ac>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	2000      	movs	r0, #0
 80042d6:	493d      	ldr	r1, [pc, #244]	@ (80043cc <__ieee754_pow+0x29c>)
 80042d8:	f7fc fa5c 	bl	8000794 <__aeabi_ddiv>
 80042dc:	f1b8 0f00 	cmp.w	r8, #0
 80042e0:	f6bf af43 	bge.w	800416a <__ieee754_pow+0x3a>
 80042e4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80042e8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80042ec:	4325      	orrs	r5, r4
 80042ee:	d108      	bne.n	8004302 <__ieee754_pow+0x1d2>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	f7fb ff6a 	bl	80001d0 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e79e      	b.n	8004240 <__ieee754_pow+0x110>
 8004302:	2c01      	cmp	r4, #1
 8004304:	f47f af31 	bne.w	800416a <__ieee754_pow+0x3a>
 8004308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800430c:	4619      	mov	r1, r3
 800430e:	e72c      	b.n	800416a <__ieee754_pow+0x3a>
 8004310:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8004314:	3b01      	subs	r3, #1
 8004316:	ea53 0204 	orrs.w	r2, r3, r4
 800431a:	d102      	bne.n	8004322 <__ieee754_pow+0x1f2>
 800431c:	4632      	mov	r2, r6
 800431e:	463b      	mov	r3, r7
 8004320:	e7e8      	b.n	80042f4 <__ieee754_pow+0x1c4>
 8004322:	3c01      	subs	r4, #1
 8004324:	431c      	orrs	r4, r3
 8004326:	d016      	beq.n	8004356 <__ieee754_pow+0x226>
 8004328:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80043b0 <__ieee754_pow+0x280>
 800432c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004334:	f240 8110 	bls.w	8004558 <__ieee754_pow+0x428>
 8004338:	4b27      	ldr	r3, [pc, #156]	@ (80043d8 <__ieee754_pow+0x2a8>)
 800433a:	459a      	cmp	sl, r3
 800433c:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <__ieee754_pow+0x2a0>)
 800433e:	d916      	bls.n	800436e <__ieee754_pow+0x23e>
 8004340:	429d      	cmp	r5, r3
 8004342:	d80b      	bhi.n	800435c <__ieee754_pow+0x22c>
 8004344:	f1b9 0f00 	cmp.w	r9, #0
 8004348:	da0b      	bge.n	8004362 <__ieee754_pow+0x232>
 800434a:	2000      	movs	r0, #0
 800434c:	b011      	add	sp, #68	@ 0x44
 800434e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004352:	f000 beed 	b.w	8005130 <__math_oflow>
 8004356:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80043b8 <__ieee754_pow+0x288>
 800435a:	e7e7      	b.n	800432c <__ieee754_pow+0x1fc>
 800435c:	f1b9 0f00 	cmp.w	r9, #0
 8004360:	dcf3      	bgt.n	800434a <__ieee754_pow+0x21a>
 8004362:	2000      	movs	r0, #0
 8004364:	b011      	add	sp, #68	@ 0x44
 8004366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	f000 bed9 	b.w	8005120 <__math_uflow>
 800436e:	429d      	cmp	r5, r3
 8004370:	d20c      	bcs.n	800438c <__ieee754_pow+0x25c>
 8004372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004376:	2200      	movs	r2, #0
 8004378:	2300      	movs	r3, #0
 800437a:	f7fc fb53 	bl	8000a24 <__aeabi_dcmplt>
 800437e:	3800      	subs	r0, #0
 8004380:	bf18      	it	ne
 8004382:	2001      	movne	r0, #1
 8004384:	f1b9 0f00 	cmp.w	r9, #0
 8004388:	daec      	bge.n	8004364 <__ieee754_pow+0x234>
 800438a:	e7df      	b.n	800434c <__ieee754_pow+0x21c>
 800438c:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <__ieee754_pow+0x29c>)
 800438e:	429d      	cmp	r5, r3
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	d922      	bls.n	80043dc <__ieee754_pow+0x2ac>
 8004396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800439a:	2300      	movs	r3, #0
 800439c:	f7fc fb42 	bl	8000a24 <__aeabi_dcmplt>
 80043a0:	3800      	subs	r0, #0
 80043a2:	bf18      	it	ne
 80043a4:	2001      	movne	r0, #1
 80043a6:	f1b9 0f00 	cmp.w	r9, #0
 80043aa:	dccf      	bgt.n	800434c <__ieee754_pow+0x21c>
 80043ac:	e7da      	b.n	8004364 <__ieee754_pow+0x234>
 80043ae:	bf00      	nop
 80043b0:	00000000 	.word	0x00000000
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	00000000 	.word	0x00000000
 80043bc:	bff00000 	.word	0xbff00000
 80043c0:	fff00000 	.word	0xfff00000
 80043c4:	7ff00000 	.word	0x7ff00000
 80043c8:	433fffff 	.word	0x433fffff
 80043cc:	3ff00000 	.word	0x3ff00000
 80043d0:	3fefffff 	.word	0x3fefffff
 80043d4:	3fe00000 	.word	0x3fe00000
 80043d8:	43f00000 	.word	0x43f00000
 80043dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004548 <__ieee754_pow+0x418>)
 80043de:	f7fb fef7 	bl	80001d0 <__aeabi_dsub>
 80043e2:	a351      	add	r3, pc, #324	@ (adr r3, 8004528 <__ieee754_pow+0x3f8>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
 80043ec:	f7fc f8a8 	bl	8000540 <__aeabi_dmul>
 80043f0:	a34f      	add	r3, pc, #316	@ (adr r3, 8004530 <__ieee754_pow+0x400>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	4606      	mov	r6, r0
 80043f8:	460f      	mov	r7, r1
 80043fa:	4620      	mov	r0, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	f7fc f89f 	bl	8000540 <__aeabi_dmul>
 8004402:	4b52      	ldr	r3, [pc, #328]	@ (800454c <__ieee754_pow+0x41c>)
 8004404:	4682      	mov	sl, r0
 8004406:	468b      	mov	fp, r1
 8004408:	2200      	movs	r2, #0
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f7fc f897 	bl	8000540 <__aeabi_dmul>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	a148      	add	r1, pc, #288	@ (adr r1, 8004538 <__ieee754_pow+0x408>)
 8004418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800441c:	f7fb fed8 	bl	80001d0 <__aeabi_dsub>
 8004420:	4622      	mov	r2, r4
 8004422:	462b      	mov	r3, r5
 8004424:	f7fc f88c 	bl	8000540 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	2000      	movs	r0, #0
 800442e:	4948      	ldr	r1, [pc, #288]	@ (8004550 <__ieee754_pow+0x420>)
 8004430:	f7fb fece 	bl	80001d0 <__aeabi_dsub>
 8004434:	4622      	mov	r2, r4
 8004436:	4680      	mov	r8, r0
 8004438:	4689      	mov	r9, r1
 800443a:	462b      	mov	r3, r5
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fc f87e 	bl	8000540 <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4640      	mov	r0, r8
 800444a:	4649      	mov	r1, r9
 800444c:	f7fc f878 	bl	8000540 <__aeabi_dmul>
 8004450:	a33b      	add	r3, pc, #236	@ (adr r3, 8004540 <__ieee754_pow+0x410>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fc f873 	bl	8000540 <__aeabi_dmul>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4650      	mov	r0, sl
 8004460:	4659      	mov	r1, fp
 8004462:	f7fb feb5 	bl	80001d0 <__aeabi_dsub>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4680      	mov	r8, r0
 800446c:	4689      	mov	r9, r1
 800446e:	4630      	mov	r0, r6
 8004470:	4639      	mov	r1, r7
 8004472:	f7fb feaf 	bl	80001d4 <__adddf3>
 8004476:	2400      	movs	r4, #0
 8004478:	4632      	mov	r2, r6
 800447a:	463b      	mov	r3, r7
 800447c:	4620      	mov	r0, r4
 800447e:	460d      	mov	r5, r1
 8004480:	f7fb fea6 	bl	80001d0 <__aeabi_dsub>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4640      	mov	r0, r8
 800448a:	4649      	mov	r1, r9
 800448c:	f7fb fea0 	bl	80001d0 <__aeabi_dsub>
 8004490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004494:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004498:	2300      	movs	r3, #0
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80044a0:	4606      	mov	r6, r0
 80044a2:	460f      	mov	r7, r1
 80044a4:	465b      	mov	r3, fp
 80044a6:	4652      	mov	r2, sl
 80044a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044ac:	f7fb fe90 	bl	80001d0 <__aeabi_dsub>
 80044b0:	4622      	mov	r2, r4
 80044b2:	462b      	mov	r3, r5
 80044b4:	f7fc f844 	bl	8000540 <__aeabi_dmul>
 80044b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044bc:	4680      	mov	r8, r0
 80044be:	4689      	mov	r9, r1
 80044c0:	4630      	mov	r0, r6
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fc f83c 	bl	8000540 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4640      	mov	r0, r8
 80044ce:	4649      	mov	r1, r9
 80044d0:	f7fb fe80 	bl	80001d4 <__adddf3>
 80044d4:	465b      	mov	r3, fp
 80044d6:	4606      	mov	r6, r0
 80044d8:	460f      	mov	r7, r1
 80044da:	4652      	mov	r2, sl
 80044dc:	4620      	mov	r0, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fc f82e 	bl	8000540 <__aeabi_dmul>
 80044e4:	460b      	mov	r3, r1
 80044e6:	4602      	mov	r2, r0
 80044e8:	4680      	mov	r8, r0
 80044ea:	4689      	mov	r9, r1
 80044ec:	4630      	mov	r0, r6
 80044ee:	4639      	mov	r1, r7
 80044f0:	f7fb fe70 	bl	80001d4 <__adddf3>
 80044f4:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <__ieee754_pow+0x424>)
 80044f6:	4299      	cmp	r1, r3
 80044f8:	4604      	mov	r4, r0
 80044fa:	460d      	mov	r5, r1
 80044fc:	468b      	mov	fp, r1
 80044fe:	f340 820b 	ble.w	8004918 <__ieee754_pow+0x7e8>
 8004502:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004506:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800450a:	4303      	orrs	r3, r0
 800450c:	f000 81ea 	beq.w	80048e4 <__ieee754_pow+0x7b4>
 8004510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	2300      	movs	r3, #0
 8004518:	f7fc fa84 	bl	8000a24 <__aeabi_dcmplt>
 800451c:	3800      	subs	r0, #0
 800451e:	bf18      	it	ne
 8004520:	2001      	movne	r0, #1
 8004522:	e713      	b.n	800434c <__ieee754_pow+0x21c>
 8004524:	f3af 8000 	nop.w
 8004528:	60000000 	.word	0x60000000
 800452c:	3ff71547 	.word	0x3ff71547
 8004530:	f85ddf44 	.word	0xf85ddf44
 8004534:	3e54ae0b 	.word	0x3e54ae0b
 8004538:	55555555 	.word	0x55555555
 800453c:	3fd55555 	.word	0x3fd55555
 8004540:	652b82fe 	.word	0x652b82fe
 8004544:	3ff71547 	.word	0x3ff71547
 8004548:	3ff00000 	.word	0x3ff00000
 800454c:	3fd00000 	.word	0x3fd00000
 8004550:	3fe00000 	.word	0x3fe00000
 8004554:	408fffff 	.word	0x408fffff
 8004558:	4bd5      	ldr	r3, [pc, #852]	@ (80048b0 <__ieee754_pow+0x780>)
 800455a:	ea08 0303 	and.w	r3, r8, r3
 800455e:	2200      	movs	r2, #0
 8004560:	b92b      	cbnz	r3, 800456e <__ieee754_pow+0x43e>
 8004562:	4bd4      	ldr	r3, [pc, #848]	@ (80048b4 <__ieee754_pow+0x784>)
 8004564:	f7fb ffec 	bl	8000540 <__aeabi_dmul>
 8004568:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800456c:	468b      	mov	fp, r1
 800456e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004572:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004576:	4413      	add	r3, r2
 8004578:	930a      	str	r3, [sp, #40]	@ 0x28
 800457a:	4bcf      	ldr	r3, [pc, #828]	@ (80048b8 <__ieee754_pow+0x788>)
 800457c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8004580:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8004584:	459b      	cmp	fp, r3
 8004586:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800458a:	dd08      	ble.n	800459e <__ieee754_pow+0x46e>
 800458c:	4bcb      	ldr	r3, [pc, #812]	@ (80048bc <__ieee754_pow+0x78c>)
 800458e:	459b      	cmp	fp, r3
 8004590:	f340 81a5 	ble.w	80048de <__ieee754_pow+0x7ae>
 8004594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004596:	3301      	adds	r3, #1
 8004598:	930a      	str	r3, [sp, #40]	@ 0x28
 800459a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800459e:	f04f 0a00 	mov.w	sl, #0
 80045a2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80045a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045a8:	4bc5      	ldr	r3, [pc, #788]	@ (80048c0 <__ieee754_pow+0x790>)
 80045aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045ae:	ed93 7b00 	vldr	d7, [r3]
 80045b2:	4629      	mov	r1, r5
 80045b4:	ec53 2b17 	vmov	r2, r3, d7
 80045b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80045bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045c0:	f7fb fe06 	bl	80001d0 <__aeabi_dsub>
 80045c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045c8:	4606      	mov	r6, r0
 80045ca:	460f      	mov	r7, r1
 80045cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d0:	f7fb fe00 	bl	80001d4 <__adddf3>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	2000      	movs	r0, #0
 80045da:	49ba      	ldr	r1, [pc, #744]	@ (80048c4 <__ieee754_pow+0x794>)
 80045dc:	f7fc f8da 	bl	8000794 <__aeabi_ddiv>
 80045e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fb ffa8 	bl	8000540 <__aeabi_dmul>
 80045f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045f4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80045f8:	106d      	asrs	r5, r5, #1
 80045fa:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80045fe:	f04f 0b00 	mov.w	fp, #0
 8004602:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004606:	4661      	mov	r1, ip
 8004608:	2200      	movs	r2, #0
 800460a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800460e:	4658      	mov	r0, fp
 8004610:	46e1      	mov	r9, ip
 8004612:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8004616:	4614      	mov	r4, r2
 8004618:	461d      	mov	r5, r3
 800461a:	f7fb ff91 	bl	8000540 <__aeabi_dmul>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4630      	mov	r0, r6
 8004624:	4639      	mov	r1, r7
 8004626:	f7fb fdd3 	bl	80001d0 <__aeabi_dsub>
 800462a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800462e:	4606      	mov	r6, r0
 8004630:	460f      	mov	r7, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fb fdcb 	bl	80001d0 <__aeabi_dsub>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004642:	f7fb fdc5 	bl	80001d0 <__aeabi_dsub>
 8004646:	465a      	mov	r2, fp
 8004648:	464b      	mov	r3, r9
 800464a:	f7fb ff79 	bl	8000540 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fb fdbb 	bl	80001d0 <__aeabi_dsub>
 800465a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800465e:	f7fb ff6f 	bl	8000540 <__aeabi_dmul>
 8004662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004666:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f7fb ff67 	bl	8000540 <__aeabi_dmul>
 8004672:	a37d      	add	r3, pc, #500	@ (adr r3, 8004868 <__ieee754_pow+0x738>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	4604      	mov	r4, r0
 800467a:	460d      	mov	r5, r1
 800467c:	f7fb ff60 	bl	8000540 <__aeabi_dmul>
 8004680:	a37b      	add	r3, pc, #492	@ (adr r3, 8004870 <__ieee754_pow+0x740>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fb fda5 	bl	80001d4 <__adddf3>
 800468a:	4622      	mov	r2, r4
 800468c:	462b      	mov	r3, r5
 800468e:	f7fb ff57 	bl	8000540 <__aeabi_dmul>
 8004692:	a379      	add	r3, pc, #484	@ (adr r3, 8004878 <__ieee754_pow+0x748>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb fd9c 	bl	80001d4 <__adddf3>
 800469c:	4622      	mov	r2, r4
 800469e:	462b      	mov	r3, r5
 80046a0:	f7fb ff4e 	bl	8000540 <__aeabi_dmul>
 80046a4:	a376      	add	r3, pc, #472	@ (adr r3, 8004880 <__ieee754_pow+0x750>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f7fb fd93 	bl	80001d4 <__adddf3>
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	f7fb ff45 	bl	8000540 <__aeabi_dmul>
 80046b6:	a374      	add	r3, pc, #464	@ (adr r3, 8004888 <__ieee754_pow+0x758>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb fd8a 	bl	80001d4 <__adddf3>
 80046c0:	4622      	mov	r2, r4
 80046c2:	462b      	mov	r3, r5
 80046c4:	f7fb ff3c 	bl	8000540 <__aeabi_dmul>
 80046c8:	a371      	add	r3, pc, #452	@ (adr r3, 8004890 <__ieee754_pow+0x760>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fb fd81 	bl	80001d4 <__adddf3>
 80046d2:	4622      	mov	r2, r4
 80046d4:	4606      	mov	r6, r0
 80046d6:	460f      	mov	r7, r1
 80046d8:	462b      	mov	r3, r5
 80046da:	4620      	mov	r0, r4
 80046dc:	4629      	mov	r1, r5
 80046de:	f7fb ff2f 	bl	8000540 <__aeabi_dmul>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4630      	mov	r0, r6
 80046e8:	4639      	mov	r1, r7
 80046ea:	f7fb ff29 	bl	8000540 <__aeabi_dmul>
 80046ee:	465a      	mov	r2, fp
 80046f0:	4604      	mov	r4, r0
 80046f2:	460d      	mov	r5, r1
 80046f4:	464b      	mov	r3, r9
 80046f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046fa:	f7fb fd6b 	bl	80001d4 <__adddf3>
 80046fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004702:	f7fb ff1d 	bl	8000540 <__aeabi_dmul>
 8004706:	4622      	mov	r2, r4
 8004708:	462b      	mov	r3, r5
 800470a:	f7fb fd63 	bl	80001d4 <__adddf3>
 800470e:	465a      	mov	r2, fp
 8004710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004714:	464b      	mov	r3, r9
 8004716:	4658      	mov	r0, fp
 8004718:	4649      	mov	r1, r9
 800471a:	f7fb ff11 	bl	8000540 <__aeabi_dmul>
 800471e:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <__ieee754_pow+0x798>)
 8004720:	2200      	movs	r2, #0
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	f7fb fd55 	bl	80001d4 <__adddf3>
 800472a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800472e:	f7fb fd51 	bl	80001d4 <__adddf3>
 8004732:	46d8      	mov	r8, fp
 8004734:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8004738:	460d      	mov	r5, r1
 800473a:	465a      	mov	r2, fp
 800473c:	460b      	mov	r3, r1
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8004746:	f7fb fefb 	bl	8000540 <__aeabi_dmul>
 800474a:	465c      	mov	r4, fp
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <__ieee754_pow+0x798>)
 8004752:	2200      	movs	r2, #0
 8004754:	4620      	mov	r0, r4
 8004756:	4629      	mov	r1, r5
 8004758:	f7fb fd3a 	bl	80001d0 <__aeabi_dsub>
 800475c:	4632      	mov	r2, r6
 800475e:	463b      	mov	r3, r7
 8004760:	f7fb fd36 	bl	80001d0 <__aeabi_dsub>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800476c:	f7fb fd30 	bl	80001d0 <__aeabi_dsub>
 8004770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004774:	f7fb fee4 	bl	8000540 <__aeabi_dmul>
 8004778:	4622      	mov	r2, r4
 800477a:	4606      	mov	r6, r0
 800477c:	460f      	mov	r7, r1
 800477e:	462b      	mov	r3, r5
 8004780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004784:	f7fb fedc 	bl	8000540 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f7fb fd20 	bl	80001d4 <__adddf3>
 8004794:	4606      	mov	r6, r0
 8004796:	460f      	mov	r7, r1
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4640      	mov	r0, r8
 800479e:	4649      	mov	r1, r9
 80047a0:	f7fb fd18 	bl	80001d4 <__adddf3>
 80047a4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80047a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8004898 <__ieee754_pow+0x768>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	4658      	mov	r0, fp
 80047b0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80047b4:	460d      	mov	r5, r1
 80047b6:	f7fb fec3 	bl	8000540 <__aeabi_dmul>
 80047ba:	465c      	mov	r4, fp
 80047bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	4620      	mov	r0, r4
 80047c6:	4629      	mov	r1, r5
 80047c8:	f7fb fd02 	bl	80001d0 <__aeabi_dsub>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4630      	mov	r0, r6
 80047d2:	4639      	mov	r1, r7
 80047d4:	f7fb fcfc 	bl	80001d0 <__aeabi_dsub>
 80047d8:	a331      	add	r3, pc, #196	@ (adr r3, 80048a0 <__ieee754_pow+0x770>)
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f7fb feaf 	bl	8000540 <__aeabi_dmul>
 80047e2:	a331      	add	r3, pc, #196	@ (adr r3, 80048a8 <__ieee754_pow+0x778>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	4606      	mov	r6, r0
 80047ea:	460f      	mov	r7, r1
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fb fea6 	bl	8000540 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fb fcea 	bl	80001d4 <__adddf3>
 8004800:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004802:	4b32      	ldr	r3, [pc, #200]	@ (80048cc <__ieee754_pow+0x79c>)
 8004804:	4413      	add	r3, r2
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fce3 	bl	80001d4 <__adddf3>
 800480e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004812:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004814:	f7fb fe2a 	bl	800046c <__aeabi_i2d>
 8004818:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800481a:	4b2d      	ldr	r3, [pc, #180]	@ (80048d0 <__ieee754_pow+0x7a0>)
 800481c:	4413      	add	r3, r2
 800481e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004822:	4606      	mov	r6, r0
 8004824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004828:	460f      	mov	r7, r1
 800482a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	f7fb fccd 	bl	80001d4 <__adddf3>
 800483a:	4632      	mov	r2, r6
 800483c:	463b      	mov	r3, r7
 800483e:	f7fb fcc9 	bl	80001d4 <__adddf3>
 8004842:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004846:	4632      	mov	r2, r6
 8004848:	463b      	mov	r3, r7
 800484a:	4658      	mov	r0, fp
 800484c:	460d      	mov	r5, r1
 800484e:	f7fb fcbf 	bl	80001d0 <__aeabi_dsub>
 8004852:	4642      	mov	r2, r8
 8004854:	464b      	mov	r3, r9
 8004856:	f7fb fcbb 	bl	80001d0 <__aeabi_dsub>
 800485a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800485e:	f7fb fcb7 	bl	80001d0 <__aeabi_dsub>
 8004862:	465c      	mov	r4, fp
 8004864:	e036      	b.n	80048d4 <__ieee754_pow+0x7a4>
 8004866:	bf00      	nop
 8004868:	4a454eef 	.word	0x4a454eef
 800486c:	3fca7e28 	.word	0x3fca7e28
 8004870:	93c9db65 	.word	0x93c9db65
 8004874:	3fcd864a 	.word	0x3fcd864a
 8004878:	a91d4101 	.word	0xa91d4101
 800487c:	3fd17460 	.word	0x3fd17460
 8004880:	518f264d 	.word	0x518f264d
 8004884:	3fd55555 	.word	0x3fd55555
 8004888:	db6fabff 	.word	0xdb6fabff
 800488c:	3fdb6db6 	.word	0x3fdb6db6
 8004890:	33333303 	.word	0x33333303
 8004894:	3fe33333 	.word	0x3fe33333
 8004898:	e0000000 	.word	0xe0000000
 800489c:	3feec709 	.word	0x3feec709
 80048a0:	dc3a03fd 	.word	0xdc3a03fd
 80048a4:	3feec709 	.word	0x3feec709
 80048a8:	145b01f5 	.word	0x145b01f5
 80048ac:	be3e2fe0 	.word	0xbe3e2fe0
 80048b0:	7ff00000 	.word	0x7ff00000
 80048b4:	43400000 	.word	0x43400000
 80048b8:	0003988e 	.word	0x0003988e
 80048bc:	000bb679 	.word	0x000bb679
 80048c0:	08005b08 	.word	0x08005b08
 80048c4:	3ff00000 	.word	0x3ff00000
 80048c8:	40080000 	.word	0x40080000
 80048cc:	08005ae8 	.word	0x08005ae8
 80048d0:	08005af8 	.word	0x08005af8
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048dc:	e5d6      	b.n	800448c <__ieee754_pow+0x35c>
 80048de:	f04f 0a01 	mov.w	sl, #1
 80048e2:	e65e      	b.n	80045a2 <__ieee754_pow+0x472>
 80048e4:	a3b5      	add	r3, pc, #724	@ (adr r3, 8004bbc <__ieee754_pow+0xa8c>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	4630      	mov	r0, r6
 80048ec:	4639      	mov	r1, r7
 80048ee:	f7fb fc71 	bl	80001d4 <__adddf3>
 80048f2:	4642      	mov	r2, r8
 80048f4:	e9cd 0100 	strd	r0, r1, [sp]
 80048f8:	464b      	mov	r3, r9
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fc67 	bl	80001d0 <__aeabi_dsub>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800490a:	f7fc f8a9 	bl	8000a60 <__aeabi_dcmpgt>
 800490e:	2800      	cmp	r0, #0
 8004910:	f47f adfe 	bne.w	8004510 <__ieee754_pow+0x3e0>
 8004914:	4ba2      	ldr	r3, [pc, #648]	@ (8004ba0 <__ieee754_pow+0xa70>)
 8004916:	e022      	b.n	800495e <__ieee754_pow+0x82e>
 8004918:	4ca2      	ldr	r4, [pc, #648]	@ (8004ba4 <__ieee754_pow+0xa74>)
 800491a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800491e:	42a3      	cmp	r3, r4
 8004920:	d919      	bls.n	8004956 <__ieee754_pow+0x826>
 8004922:	4ba1      	ldr	r3, [pc, #644]	@ (8004ba8 <__ieee754_pow+0xa78>)
 8004924:	440b      	add	r3, r1
 8004926:	4303      	orrs	r3, r0
 8004928:	d009      	beq.n	800493e <__ieee754_pow+0x80e>
 800492a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	2300      	movs	r3, #0
 8004932:	f7fc f877 	bl	8000a24 <__aeabi_dcmplt>
 8004936:	3800      	subs	r0, #0
 8004938:	bf18      	it	ne
 800493a:	2001      	movne	r0, #1
 800493c:	e512      	b.n	8004364 <__ieee754_pow+0x234>
 800493e:	4642      	mov	r2, r8
 8004940:	464b      	mov	r3, r9
 8004942:	f7fb fc45 	bl	80001d0 <__aeabi_dsub>
 8004946:	4632      	mov	r2, r6
 8004948:	463b      	mov	r3, r7
 800494a:	f7fc f87f 	bl	8000a4c <__aeabi_dcmpge>
 800494e:	2800      	cmp	r0, #0
 8004950:	d1eb      	bne.n	800492a <__ieee754_pow+0x7fa>
 8004952:	4b96      	ldr	r3, [pc, #600]	@ (8004bac <__ieee754_pow+0xa7c>)
 8004954:	e003      	b.n	800495e <__ieee754_pow+0x82e>
 8004956:	4a96      	ldr	r2, [pc, #600]	@ (8004bb0 <__ieee754_pow+0xa80>)
 8004958:	4293      	cmp	r3, r2
 800495a:	f240 80e7 	bls.w	8004b2c <__ieee754_pow+0x9fc>
 800495e:	151b      	asrs	r3, r3, #20
 8004960:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8004964:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8004968:	fa4a fa03 	asr.w	sl, sl, r3
 800496c:	44da      	add	sl, fp
 800496e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004972:	4890      	ldr	r0, [pc, #576]	@ (8004bb4 <__ieee754_pow+0xa84>)
 8004974:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004978:	4108      	asrs	r0, r1
 800497a:	ea00 030a 	and.w	r3, r0, sl
 800497e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004982:	f1c1 0114 	rsb	r1, r1, #20
 8004986:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800498a:	fa4a fa01 	asr.w	sl, sl, r1
 800498e:	f1bb 0f00 	cmp.w	fp, #0
 8004992:	4640      	mov	r0, r8
 8004994:	4649      	mov	r1, r9
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	bfb8      	it	lt
 800499c:	f1ca 0a00 	rsblt	sl, sl, #0
 80049a0:	f7fb fc16 	bl	80001d0 <__aeabi_dsub>
 80049a4:	4680      	mov	r8, r0
 80049a6:	4689      	mov	r9, r1
 80049a8:	4632      	mov	r2, r6
 80049aa:	463b      	mov	r3, r7
 80049ac:	4640      	mov	r0, r8
 80049ae:	4649      	mov	r1, r9
 80049b0:	f7fb fc10 	bl	80001d4 <__adddf3>
 80049b4:	2400      	movs	r4, #0
 80049b6:	a36a      	add	r3, pc, #424	@ (adr r3, 8004b60 <__ieee754_pow+0xa30>)
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	4620      	mov	r0, r4
 80049be:	460d      	mov	r5, r1
 80049c0:	f7fb fdbe 	bl	8000540 <__aeabi_dmul>
 80049c4:	4642      	mov	r2, r8
 80049c6:	e9cd 0100 	strd	r0, r1, [sp]
 80049ca:	464b      	mov	r3, r9
 80049cc:	4620      	mov	r0, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	f7fb fbfe 	bl	80001d0 <__aeabi_dsub>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4630      	mov	r0, r6
 80049da:	4639      	mov	r1, r7
 80049dc:	f7fb fbf8 	bl	80001d0 <__aeabi_dsub>
 80049e0:	a361      	add	r3, pc, #388	@ (adr r3, 8004b68 <__ieee754_pow+0xa38>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fdab 	bl	8000540 <__aeabi_dmul>
 80049ea:	a361      	add	r3, pc, #388	@ (adr r3, 8004b70 <__ieee754_pow+0xa40>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	4680      	mov	r8, r0
 80049f2:	4689      	mov	r9, r1
 80049f4:	4620      	mov	r0, r4
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7fb fda2 	bl	8000540 <__aeabi_dmul>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fb fbe6 	bl	80001d4 <__adddf3>
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a14:	f7fb fbde 	bl	80001d4 <__adddf3>
 8004a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4689      	mov	r9, r1
 8004a20:	f7fb fbd6 	bl	80001d0 <__aeabi_dsub>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fbd0 	bl	80001d0 <__aeabi_dsub>
 8004a30:	4642      	mov	r2, r8
 8004a32:	4606      	mov	r6, r0
 8004a34:	460f      	mov	r7, r1
 8004a36:	464b      	mov	r3, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	f7fb fd80 	bl	8000540 <__aeabi_dmul>
 8004a40:	a34d      	add	r3, pc, #308	@ (adr r3, 8004b78 <__ieee754_pow+0xa48>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	4604      	mov	r4, r0
 8004a48:	460d      	mov	r5, r1
 8004a4a:	f7fb fd79 	bl	8000540 <__aeabi_dmul>
 8004a4e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004b80 <__ieee754_pow+0xa50>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fb fbbc 	bl	80001d0 <__aeabi_dsub>
 8004a58:	4622      	mov	r2, r4
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	f7fb fd70 	bl	8000540 <__aeabi_dmul>
 8004a60:	a349      	add	r3, pc, #292	@ (adr r3, 8004b88 <__ieee754_pow+0xa58>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fbb5 	bl	80001d4 <__adddf3>
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f7fb fd67 	bl	8000540 <__aeabi_dmul>
 8004a72:	a347      	add	r3, pc, #284	@ (adr r3, 8004b90 <__ieee754_pow+0xa60>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fbaa 	bl	80001d0 <__aeabi_dsub>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	f7fb fd5e 	bl	8000540 <__aeabi_dmul>
 8004a84:	a344      	add	r3, pc, #272	@ (adr r3, 8004b98 <__ieee754_pow+0xa68>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb fba3 	bl	80001d4 <__adddf3>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f7fb fd55 	bl	8000540 <__aeabi_dmul>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	f7fb fb97 	bl	80001d0 <__aeabi_dsub>
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4649      	mov	r1, r9
 8004aae:	f7fb fd47 	bl	8000540 <__aeabi_dmul>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ab8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004abc:	4620      	mov	r0, r4
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f7fb fb86 	bl	80001d0 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004acc:	f7fb fe62 	bl	8000794 <__aeabi_ddiv>
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	460d      	mov	r5, r1
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb fd30 	bl	8000540 <__aeabi_dmul>
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	f7fb fb76 	bl	80001d4 <__adddf3>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4620      	mov	r0, r4
 8004aee:	4629      	mov	r1, r5
 8004af0:	f7fb fb6e 	bl	80001d0 <__aeabi_dsub>
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	f7fb fb6a 	bl	80001d0 <__aeabi_dsub>
 8004afc:	460b      	mov	r3, r1
 8004afe:	4602      	mov	r2, r0
 8004b00:	492d      	ldr	r1, [pc, #180]	@ (8004bb8 <__ieee754_pow+0xa88>)
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7fb fb64 	bl	80001d0 <__aeabi_dsub>
 8004b08:	ec41 0b10 	vmov	d0, r0, r1
 8004b0c:	ee10 3a90 	vmov	r3, s1
 8004b10:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b18:	da0b      	bge.n	8004b32 <__ieee754_pow+0xa02>
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	f000 fa58 	bl	8004fd0 <scalbn>
 8004b20:	ec51 0b10 	vmov	r0, r1, d0
 8004b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b28:	f7ff bb6d 	b.w	8004206 <__ieee754_pow+0xd6>
 8004b2c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004b30:	e73a      	b.n	80049a8 <__ieee754_pow+0x878>
 8004b32:	ec51 0b10 	vmov	r0, r1, d0
 8004b36:	4619      	mov	r1, r3
 8004b38:	e7f4      	b.n	8004b24 <__ieee754_pow+0x9f4>
 8004b3a:	491f      	ldr	r1, [pc, #124]	@ (8004bb8 <__ieee754_pow+0xa88>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f7ff bb14 	b.w	800416a <__ieee754_pow+0x3a>
 8004b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b46:	f7ff bb10 	b.w	800416a <__ieee754_pow+0x3a>
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	f7ff bb0c 	b.w	800416a <__ieee754_pow+0x3a>
 8004b52:	460c      	mov	r4, r1
 8004b54:	f7ff bb69 	b.w	800422a <__ieee754_pow+0xfa>
 8004b58:	2400      	movs	r4, #0
 8004b5a:	f7ff bb4b 	b.w	80041f4 <__ieee754_pow+0xc4>
 8004b5e:	bf00      	nop
 8004b60:	00000000 	.word	0x00000000
 8004b64:	3fe62e43 	.word	0x3fe62e43
 8004b68:	fefa39ef 	.word	0xfefa39ef
 8004b6c:	3fe62e42 	.word	0x3fe62e42
 8004b70:	0ca86c39 	.word	0x0ca86c39
 8004b74:	be205c61 	.word	0xbe205c61
 8004b78:	72bea4d0 	.word	0x72bea4d0
 8004b7c:	3e663769 	.word	0x3e663769
 8004b80:	c5d26bf1 	.word	0xc5d26bf1
 8004b84:	3ebbbd41 	.word	0x3ebbbd41
 8004b88:	af25de2c 	.word	0xaf25de2c
 8004b8c:	3f11566a 	.word	0x3f11566a
 8004b90:	16bebd93 	.word	0x16bebd93
 8004b94:	3f66c16c 	.word	0x3f66c16c
 8004b98:	5555553e 	.word	0x5555553e
 8004b9c:	3fc55555 	.word	0x3fc55555
 8004ba0:	40900000 	.word	0x40900000
 8004ba4:	4090cbff 	.word	0x4090cbff
 8004ba8:	3f6f3400 	.word	0x3f6f3400
 8004bac:	4090cc00 	.word	0x4090cc00
 8004bb0:	3fe00000 	.word	0x3fe00000
 8004bb4:	fff00000 	.word	0xfff00000
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	652b82fe 	.word	0x652b82fe
 8004bc0:	3c971547 	.word	0x3c971547
 8004bc4:	00000000 	.word	0x00000000

08004bc8 <__ieee754_rem_pio2>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	ec57 6b10 	vmov	r6, r7, d0
 8004bd0:	4bc5      	ldr	r3, [pc, #788]	@ (8004ee8 <__ieee754_rem_pio2+0x320>)
 8004bd2:	b08d      	sub	sp, #52	@ 0x34
 8004bd4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004bd8:	4598      	cmp	r8, r3
 8004bda:	4604      	mov	r4, r0
 8004bdc:	9704      	str	r7, [sp, #16]
 8004bde:	d807      	bhi.n	8004bf0 <__ieee754_rem_pio2+0x28>
 8004be0:	2200      	movs	r2, #0
 8004be2:	2300      	movs	r3, #0
 8004be4:	ed80 0b00 	vstr	d0, [r0]
 8004be8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004bec:	2500      	movs	r5, #0
 8004bee:	e028      	b.n	8004c42 <__ieee754_rem_pio2+0x7a>
 8004bf0:	4bbe      	ldr	r3, [pc, #760]	@ (8004eec <__ieee754_rem_pio2+0x324>)
 8004bf2:	4598      	cmp	r8, r3
 8004bf4:	d878      	bhi.n	8004ce8 <__ieee754_rem_pio2+0x120>
 8004bf6:	9b04      	ldr	r3, [sp, #16]
 8004bf8:	4dbd      	ldr	r5, [pc, #756]	@ (8004ef0 <__ieee754_rem_pio2+0x328>)
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004eb0 <__ieee754_rem_pio2+0x2e8>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	4639      	mov	r1, r7
 8004c06:	dd38      	ble.n	8004c7a <__ieee754_rem_pio2+0xb2>
 8004c08:	f7fb fae2 	bl	80001d0 <__aeabi_dsub>
 8004c0c:	45a8      	cmp	r8, r5
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	d01a      	beq.n	8004c4a <__ieee754_rem_pio2+0x82>
 8004c14:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004eb8 <__ieee754_rem_pio2+0x2f0>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fad9 	bl	80001d0 <__aeabi_dsub>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4680      	mov	r8, r0
 8004c24:	4689      	mov	r9, r1
 8004c26:	4630      	mov	r0, r6
 8004c28:	4639      	mov	r1, r7
 8004c2a:	f7fb fad1 	bl	80001d0 <__aeabi_dsub>
 8004c2e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004eb8 <__ieee754_rem_pio2+0x2f0>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb facc 	bl	80001d0 <__aeabi_dsub>
 8004c38:	e9c4 8900 	strd	r8, r9, [r4]
 8004c3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c40:	2501      	movs	r5, #1
 8004c42:	4628      	mov	r0, r5
 8004c44:	b00d      	add	sp, #52	@ 0x34
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4a:	a39d      	add	r3, pc, #628	@ (adr r3, 8004ec0 <__ieee754_rem_pio2+0x2f8>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f7fb fabe 	bl	80001d0 <__aeabi_dsub>
 8004c54:	a39c      	add	r3, pc, #624	@ (adr r3, 8004ec8 <__ieee754_rem_pio2+0x300>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	f7fb fab7 	bl	80001d0 <__aeabi_dsub>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4680      	mov	r8, r0
 8004c68:	4689      	mov	r9, r1
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	f7fb faaf 	bl	80001d0 <__aeabi_dsub>
 8004c72:	a395      	add	r3, pc, #596	@ (adr r3, 8004ec8 <__ieee754_rem_pio2+0x300>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	e7dc      	b.n	8004c34 <__ieee754_rem_pio2+0x6c>
 8004c7a:	f7fb faab 	bl	80001d4 <__adddf3>
 8004c7e:	45a8      	cmp	r8, r5
 8004c80:	4606      	mov	r6, r0
 8004c82:	460f      	mov	r7, r1
 8004c84:	d018      	beq.n	8004cb8 <__ieee754_rem_pio2+0xf0>
 8004c86:	a38c      	add	r3, pc, #560	@ (adr r3, 8004eb8 <__ieee754_rem_pio2+0x2f0>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb faa2 	bl	80001d4 <__adddf3>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4680      	mov	r8, r0
 8004c96:	4689      	mov	r9, r1
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb fa98 	bl	80001d0 <__aeabi_dsub>
 8004ca0:	a385      	add	r3, pc, #532	@ (adr r3, 8004eb8 <__ieee754_rem_pio2+0x2f0>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fa95 	bl	80001d4 <__adddf3>
 8004caa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004cae:	e9c4 8900 	strd	r8, r9, [r4]
 8004cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cb6:	e7c4      	b.n	8004c42 <__ieee754_rem_pio2+0x7a>
 8004cb8:	a381      	add	r3, pc, #516	@ (adr r3, 8004ec0 <__ieee754_rem_pio2+0x2f8>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fa89 	bl	80001d4 <__adddf3>
 8004cc2:	a381      	add	r3, pc, #516	@ (adr r3, 8004ec8 <__ieee754_rem_pio2+0x300>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	4606      	mov	r6, r0
 8004cca:	460f      	mov	r7, r1
 8004ccc:	f7fb fa82 	bl	80001d4 <__adddf3>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	4630      	mov	r0, r6
 8004cda:	4639      	mov	r1, r7
 8004cdc:	f7fb fa78 	bl	80001d0 <__aeabi_dsub>
 8004ce0:	a379      	add	r3, pc, #484	@ (adr r3, 8004ec8 <__ieee754_rem_pio2+0x300>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	e7de      	b.n	8004ca6 <__ieee754_rem_pio2+0xde>
 8004ce8:	4b82      	ldr	r3, [pc, #520]	@ (8004ef4 <__ieee754_rem_pio2+0x32c>)
 8004cea:	4598      	cmp	r8, r3
 8004cec:	f200 80d1 	bhi.w	8004e92 <__ieee754_rem_pio2+0x2ca>
 8004cf0:	f000 f966 	bl	8004fc0 <fabs>
 8004cf4:	ec57 6b10 	vmov	r6, r7, d0
 8004cf8:	a375      	add	r3, pc, #468	@ (adr r3, 8004ed0 <__ieee754_rem_pio2+0x308>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	4630      	mov	r0, r6
 8004d00:	4639      	mov	r1, r7
 8004d02:	f7fb fc1d 	bl	8000540 <__aeabi_dmul>
 8004d06:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef8 <__ieee754_rem_pio2+0x330>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f7fb fa63 	bl	80001d4 <__adddf3>
 8004d0e:	f7fb fec7 	bl	8000aa0 <__aeabi_d2iz>
 8004d12:	4605      	mov	r5, r0
 8004d14:	f7fb fbaa 	bl	800046c <__aeabi_i2d>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d20:	a363      	add	r3, pc, #396	@ (adr r3, 8004eb0 <__ieee754_rem_pio2+0x2e8>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f7fb fc0b 	bl	8000540 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fa4d 	bl	80001d0 <__aeabi_dsub>
 8004d36:	a360      	add	r3, pc, #384	@ (adr r3, 8004eb8 <__ieee754_rem_pio2+0x2f0>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	4682      	mov	sl, r0
 8004d3e:	468b      	mov	fp, r1
 8004d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d44:	f7fb fbfc 	bl	8000540 <__aeabi_dmul>
 8004d48:	2d1f      	cmp	r5, #31
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460f      	mov	r7, r1
 8004d4e:	dc0c      	bgt.n	8004d6a <__ieee754_rem_pio2+0x1a2>
 8004d50:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <__ieee754_rem_pio2+0x334>)
 8004d52:	1e6a      	subs	r2, r5, #1
 8004d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d58:	4543      	cmp	r3, r8
 8004d5a:	d006      	beq.n	8004d6a <__ieee754_rem_pio2+0x1a2>
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	463b      	mov	r3, r7
 8004d60:	4650      	mov	r0, sl
 8004d62:	4659      	mov	r1, fp
 8004d64:	f7fb fa34 	bl	80001d0 <__aeabi_dsub>
 8004d68:	e00e      	b.n	8004d88 <__ieee754_rem_pio2+0x1c0>
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4650      	mov	r0, sl
 8004d70:	4659      	mov	r1, fp
 8004d72:	f7fb fa2d 	bl	80001d0 <__aeabi_dsub>
 8004d76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004d7a:	9305      	str	r3, [sp, #20]
 8004d7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d80:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	dc02      	bgt.n	8004d8e <__ieee754_rem_pio2+0x1c6>
 8004d88:	e9c4 0100 	strd	r0, r1, [r4]
 8004d8c:	e039      	b.n	8004e02 <__ieee754_rem_pio2+0x23a>
 8004d8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004ec0 <__ieee754_rem_pio2+0x2f8>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d98:	f7fb fbd2 	bl	8000540 <__aeabi_dmul>
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4650      	mov	r0, sl
 8004da6:	4659      	mov	r1, fp
 8004da8:	f7fb fa12 	bl	80001d0 <__aeabi_dsub>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4680      	mov	r8, r0
 8004db2:	4689      	mov	r9, r1
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	f7fb fa0a 	bl	80001d0 <__aeabi_dsub>
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	f7fb fa06 	bl	80001d0 <__aeabi_dsub>
 8004dc4:	a340      	add	r3, pc, #256	@ (adr r3, 8004ec8 <__ieee754_rem_pio2+0x300>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460f      	mov	r7, r1
 8004dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dd2:	f7fb fbb5 	bl	8000540 <__aeabi_dmul>
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	463b      	mov	r3, r7
 8004dda:	f7fb f9f9 	bl	80001d0 <__aeabi_dsub>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4606      	mov	r6, r0
 8004de4:	460f      	mov	r7, r1
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb f9f1 	bl	80001d0 <__aeabi_dsub>
 8004dee:	9a05      	ldr	r2, [sp, #20]
 8004df0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b31      	cmp	r3, #49	@ 0x31
 8004df8:	dc20      	bgt.n	8004e3c <__ieee754_rem_pio2+0x274>
 8004dfa:	e9c4 0100 	strd	r0, r1, [r4]
 8004dfe:	46c2      	mov	sl, r8
 8004e00:	46cb      	mov	fp, r9
 8004e02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e06:	4650      	mov	r0, sl
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	f7fb f9df 	bl	80001d0 <__aeabi_dsub>
 8004e12:	463b      	mov	r3, r7
 8004e14:	4632      	mov	r2, r6
 8004e16:	f7fb f9db 	bl	80001d0 <__aeabi_dsub>
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e22:	f6bf af0e 	bge.w	8004c42 <__ieee754_rem_pio2+0x7a>
 8004e26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e30:	f8c4 8000 	str.w	r8, [r4]
 8004e34:	60a0      	str	r0, [r4, #8]
 8004e36:	60e3      	str	r3, [r4, #12]
 8004e38:	426d      	negs	r5, r5
 8004e3a:	e702      	b.n	8004c42 <__ieee754_rem_pio2+0x7a>
 8004e3c:	a326      	add	r3, pc, #152	@ (adr r3, 8004ed8 <__ieee754_rem_pio2+0x310>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e46:	f7fb fb7b 	bl	8000540 <__aeabi_dmul>
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460f      	mov	r7, r1
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4640      	mov	r0, r8
 8004e54:	4649      	mov	r1, r9
 8004e56:	f7fb f9bb 	bl	80001d0 <__aeabi_dsub>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4682      	mov	sl, r0
 8004e60:	468b      	mov	fp, r1
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb f9b3 	bl	80001d0 <__aeabi_dsub>
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	f7fb f9af 	bl	80001d0 <__aeabi_dsub>
 8004e72:	a31b      	add	r3, pc, #108	@ (adr r3, 8004ee0 <__ieee754_rem_pio2+0x318>)
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e80:	f7fb fb5e 	bl	8000540 <__aeabi_dmul>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb f9a2 	bl	80001d0 <__aeabi_dsub>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	460f      	mov	r7, r1
 8004e90:	e764      	b.n	8004d5c <__ieee754_rem_pio2+0x194>
 8004e92:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <__ieee754_rem_pio2+0x338>)
 8004e94:	4598      	cmp	r8, r3
 8004e96:	d935      	bls.n	8004f04 <__ieee754_rem_pio2+0x33c>
 8004e98:	4632      	mov	r2, r6
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	f7fb f996 	bl	80001d0 <__aeabi_dsub>
 8004ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ea8:	e9c4 0100 	strd	r0, r1, [r4]
 8004eac:	e69e      	b.n	8004bec <__ieee754_rem_pio2+0x24>
 8004eae:	bf00      	nop
 8004eb0:	54400000 	.word	0x54400000
 8004eb4:	3ff921fb 	.word	0x3ff921fb
 8004eb8:	1a626331 	.word	0x1a626331
 8004ebc:	3dd0b461 	.word	0x3dd0b461
 8004ec0:	1a600000 	.word	0x1a600000
 8004ec4:	3dd0b461 	.word	0x3dd0b461
 8004ec8:	2e037073 	.word	0x2e037073
 8004ecc:	3ba3198a 	.word	0x3ba3198a
 8004ed0:	6dc9c883 	.word	0x6dc9c883
 8004ed4:	3fe45f30 	.word	0x3fe45f30
 8004ed8:	2e000000 	.word	0x2e000000
 8004edc:	3ba3198a 	.word	0x3ba3198a
 8004ee0:	252049c1 	.word	0x252049c1
 8004ee4:	397b839a 	.word	0x397b839a
 8004ee8:	3fe921fb 	.word	0x3fe921fb
 8004eec:	4002d97b 	.word	0x4002d97b
 8004ef0:	3ff921fb 	.word	0x3ff921fb
 8004ef4:	413921fb 	.word	0x413921fb
 8004ef8:	3fe00000 	.word	0x3fe00000
 8004efc:	08005b18 	.word	0x08005b18
 8004f00:	7fefffff 	.word	0x7fefffff
 8004f04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004f08:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004f0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004f10:	4630      	mov	r0, r6
 8004f12:	460f      	mov	r7, r1
 8004f14:	f7fb fdc4 	bl	8000aa0 <__aeabi_d2iz>
 8004f18:	f7fb faa8 	bl	800046c <__aeabi_i2d>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f28:	f7fb f952 	bl	80001d0 <__aeabi_dsub>
 8004f2c:	4b22      	ldr	r3, [pc, #136]	@ (8004fb8 <__ieee754_rem_pio2+0x3f0>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f7fb fb06 	bl	8000540 <__aeabi_dmul>
 8004f34:	460f      	mov	r7, r1
 8004f36:	4606      	mov	r6, r0
 8004f38:	f7fb fdb2 	bl	8000aa0 <__aeabi_d2iz>
 8004f3c:	f7fb fa96 	bl	800046c <__aeabi_i2d>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4630      	mov	r0, r6
 8004f46:	4639      	mov	r1, r7
 8004f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f4c:	f7fb f940 	bl	80001d0 <__aeabi_dsub>
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <__ieee754_rem_pio2+0x3f0>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	f7fb faf4 	bl	8000540 <__aeabi_dmul>
 8004f58:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004f5c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004f60:	f04f 0803 	mov.w	r8, #3
 8004f64:	2600      	movs	r6, #0
 8004f66:	2700      	movs	r7, #0
 8004f68:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	463b      	mov	r3, r7
 8004f70:	46c2      	mov	sl, r8
 8004f72:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004f76:	f7fb fd4b 	bl	8000a10 <__aeabi_dcmpeq>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1f4      	bne.n	8004f68 <__ieee754_rem_pio2+0x3a0>
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <__ieee754_rem_pio2+0x3f4>)
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2302      	movs	r3, #2
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	462a      	mov	r2, r5
 8004f88:	4653      	mov	r3, sl
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	a806      	add	r0, sp, #24
 8004f8e:	f000 f9af 	bl	80052f0 <__kernel_rem_pio2>
 8004f92:	9b04      	ldr	r3, [sp, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	4605      	mov	r5, r0
 8004f98:	f6bf ae53 	bge.w	8004c42 <__ieee754_rem_pio2+0x7a>
 8004f9c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004fa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fa4:	e9c4 2300 	strd	r2, r3, [r4]
 8004fa8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004fac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004fb4:	e740      	b.n	8004e38 <__ieee754_rem_pio2+0x270>
 8004fb6:	bf00      	nop
 8004fb8:	41700000 	.word	0x41700000
 8004fbc:	08005b98 	.word	0x08005b98

08004fc0 <fabs>:
 8004fc0:	ec51 0b10 	vmov	r0, r1, d0
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004fca:	ec43 2b10 	vmov	d0, r2, r3
 8004fce:	4770      	bx	lr

08004fd0 <scalbn>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	ec55 4b10 	vmov	r4, r5, d0
 8004fd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004fda:	4606      	mov	r6, r0
 8004fdc:	462b      	mov	r3, r5
 8004fde:	b991      	cbnz	r1, 8005006 <scalbn+0x36>
 8004fe0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004fe4:	4323      	orrs	r3, r4
 8004fe6:	d03b      	beq.n	8005060 <scalbn+0x90>
 8004fe8:	4b33      	ldr	r3, [pc, #204]	@ (80050b8 <scalbn+0xe8>)
 8004fea:	4620      	mov	r0, r4
 8004fec:	4629      	mov	r1, r5
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f7fb faa6 	bl	8000540 <__aeabi_dmul>
 8004ff4:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <scalbn+0xec>)
 8004ff6:	429e      	cmp	r6, r3
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	da0f      	bge.n	800501e <scalbn+0x4e>
 8004ffe:	a326      	add	r3, pc, #152	@ (adr r3, 8005098 <scalbn+0xc8>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	e01e      	b.n	8005044 <scalbn+0x74>
 8005006:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800500a:	4291      	cmp	r1, r2
 800500c:	d10b      	bne.n	8005026 <scalbn+0x56>
 800500e:	4622      	mov	r2, r4
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb f8de 	bl	80001d4 <__adddf3>
 8005018:	4604      	mov	r4, r0
 800501a:	460d      	mov	r5, r1
 800501c:	e020      	b.n	8005060 <scalbn+0x90>
 800501e:	460b      	mov	r3, r1
 8005020:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005024:	3936      	subs	r1, #54	@ 0x36
 8005026:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800502a:	4296      	cmp	r6, r2
 800502c:	dd0d      	ble.n	800504a <scalbn+0x7a>
 800502e:	2d00      	cmp	r5, #0
 8005030:	a11b      	add	r1, pc, #108	@ (adr r1, 80050a0 <scalbn+0xd0>)
 8005032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005036:	da02      	bge.n	800503e <scalbn+0x6e>
 8005038:	a11b      	add	r1, pc, #108	@ (adr r1, 80050a8 <scalbn+0xd8>)
 800503a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503e:	a318      	add	r3, pc, #96	@ (adr r3, 80050a0 <scalbn+0xd0>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fa7c 	bl	8000540 <__aeabi_dmul>
 8005048:	e7e6      	b.n	8005018 <scalbn+0x48>
 800504a:	1872      	adds	r2, r6, r1
 800504c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005050:	428a      	cmp	r2, r1
 8005052:	dcec      	bgt.n	800502e <scalbn+0x5e>
 8005054:	2a00      	cmp	r2, #0
 8005056:	dd06      	ble.n	8005066 <scalbn+0x96>
 8005058:	f36f 531e 	bfc	r3, #20, #11
 800505c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005060:	ec45 4b10 	vmov	d0, r4, r5
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800506a:	da08      	bge.n	800507e <scalbn+0xae>
 800506c:	2d00      	cmp	r5, #0
 800506e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005098 <scalbn+0xc8>)
 8005070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005074:	dac3      	bge.n	8004ffe <scalbn+0x2e>
 8005076:	a10e      	add	r1, pc, #56	@ (adr r1, 80050b0 <scalbn+0xe0>)
 8005078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800507c:	e7bf      	b.n	8004ffe <scalbn+0x2e>
 800507e:	3236      	adds	r2, #54	@ 0x36
 8005080:	f36f 531e 	bfc	r3, #20, #11
 8005084:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005088:	4620      	mov	r0, r4
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <scalbn+0xf0>)
 800508c:	4629      	mov	r1, r5
 800508e:	2200      	movs	r2, #0
 8005090:	e7d8      	b.n	8005044 <scalbn+0x74>
 8005092:	bf00      	nop
 8005094:	f3af 8000 	nop.w
 8005098:	c2f8f359 	.word	0xc2f8f359
 800509c:	01a56e1f 	.word	0x01a56e1f
 80050a0:	8800759c 	.word	0x8800759c
 80050a4:	7e37e43c 	.word	0x7e37e43c
 80050a8:	8800759c 	.word	0x8800759c
 80050ac:	fe37e43c 	.word	0xfe37e43c
 80050b0:	c2f8f359 	.word	0xc2f8f359
 80050b4:	81a56e1f 	.word	0x81a56e1f
 80050b8:	43500000 	.word	0x43500000
 80050bc:	ffff3cb0 	.word	0xffff3cb0
 80050c0:	3c900000 	.word	0x3c900000

080050c4 <with_errno>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	ed2d 8b02 	vpush	{d8}
 80050ca:	eeb0 8a40 	vmov.f32	s16, s0
 80050ce:	eef0 8a60 	vmov.f32	s17, s1
 80050d2:	4604      	mov	r4, r0
 80050d4:	f7fe fdae 	bl	8003c34 <__errno>
 80050d8:	eeb0 0a48 	vmov.f32	s0, s16
 80050dc:	eef0 0a68 	vmov.f32	s1, s17
 80050e0:	ecbd 8b02 	vpop	{d8}
 80050e4:	6004      	str	r4, [r0, #0]
 80050e6:	bd10      	pop	{r4, pc}

080050e8 <xflow>:
 80050e8:	4603      	mov	r3, r0
 80050ea:	b507      	push	{r0, r1, r2, lr}
 80050ec:	ec51 0b10 	vmov	r0, r1, d0
 80050f0:	b183      	cbz	r3, 8005114 <xflow+0x2c>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f8:	e9cd 2300 	strd	r2, r3, [sp]
 80050fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005100:	f7fb fa1e 	bl	8000540 <__aeabi_dmul>
 8005104:	ec41 0b10 	vmov	d0, r0, r1
 8005108:	2022      	movs	r0, #34	@ 0x22
 800510a:	b003      	add	sp, #12
 800510c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005110:	f7ff bfd8 	b.w	80050c4 <with_errno>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	e7ee      	b.n	80050f8 <xflow+0x10>
 800511a:	0000      	movs	r0, r0
 800511c:	0000      	movs	r0, r0
	...

08005120 <__math_uflow>:
 8005120:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005128 <__math_uflow+0x8>
 8005124:	f7ff bfe0 	b.w	80050e8 <xflow>
 8005128:	00000000 	.word	0x00000000
 800512c:	10000000 	.word	0x10000000

08005130 <__math_oflow>:
 8005130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005138 <__math_oflow+0x8>
 8005134:	f7ff bfd8 	b.w	80050e8 <xflow>
 8005138:	00000000 	.word	0x00000000
 800513c:	70000000 	.word	0x70000000

08005140 <__ieee754_sqrt>:
 8005140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <__ieee754_sqrt+0x1a0>)
 8005146:	ec55 4b10 	vmov	r4, r5, d0
 800514a:	43aa      	bics	r2, r5
 800514c:	462b      	mov	r3, r5
 800514e:	4621      	mov	r1, r4
 8005150:	d110      	bne.n	8005174 <__ieee754_sqrt+0x34>
 8005152:	4622      	mov	r2, r4
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f9f2 	bl	8000540 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4620      	mov	r0, r4
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f836 	bl	80001d4 <__adddf3>
 8005168:	4604      	mov	r4, r0
 800516a:	460d      	mov	r5, r1
 800516c:	ec45 4b10 	vmov	d0, r4, r5
 8005170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	2d00      	cmp	r5, #0
 8005176:	dc0e      	bgt.n	8005196 <__ieee754_sqrt+0x56>
 8005178:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800517c:	4322      	orrs	r2, r4
 800517e:	d0f5      	beq.n	800516c <__ieee754_sqrt+0x2c>
 8005180:	b19d      	cbz	r5, 80051aa <__ieee754_sqrt+0x6a>
 8005182:	4622      	mov	r2, r4
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb f822 	bl	80001d0 <__aeabi_dsub>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	f7fb fb00 	bl	8000794 <__aeabi_ddiv>
 8005194:	e7e8      	b.n	8005168 <__ieee754_sqrt+0x28>
 8005196:	152a      	asrs	r2, r5, #20
 8005198:	d115      	bne.n	80051c6 <__ieee754_sqrt+0x86>
 800519a:	2000      	movs	r0, #0
 800519c:	e009      	b.n	80051b2 <__ieee754_sqrt+0x72>
 800519e:	0acb      	lsrs	r3, r1, #11
 80051a0:	3a15      	subs	r2, #21
 80051a2:	0549      	lsls	r1, r1, #21
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0fa      	beq.n	800519e <__ieee754_sqrt+0x5e>
 80051a8:	e7f7      	b.n	800519a <__ieee754_sqrt+0x5a>
 80051aa:	462a      	mov	r2, r5
 80051ac:	e7fa      	b.n	80051a4 <__ieee754_sqrt+0x64>
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	3001      	adds	r0, #1
 80051b2:	02dc      	lsls	r4, r3, #11
 80051b4:	d5fb      	bpl.n	80051ae <__ieee754_sqrt+0x6e>
 80051b6:	1e44      	subs	r4, r0, #1
 80051b8:	1b12      	subs	r2, r2, r4
 80051ba:	f1c0 0420 	rsb	r4, r0, #32
 80051be:	fa21 f404 	lsr.w	r4, r1, r4
 80051c2:	4323      	orrs	r3, r4
 80051c4:	4081      	lsls	r1, r0
 80051c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ca:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d2:	07d2      	lsls	r2, r2, #31
 80051d4:	bf5c      	itt	pl
 80051d6:	005b      	lslpl	r3, r3, #1
 80051d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80051dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051e0:	bf58      	it	pl
 80051e2:	0049      	lslpl	r1, r1, #1
 80051e4:	2600      	movs	r6, #0
 80051e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80051ea:	107f      	asrs	r7, r7, #1
 80051ec:	0049      	lsls	r1, r1, #1
 80051ee:	2016      	movs	r0, #22
 80051f0:	4632      	mov	r2, r6
 80051f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80051f6:	1915      	adds	r5, r2, r4
 80051f8:	429d      	cmp	r5, r3
 80051fa:	bfde      	ittt	le
 80051fc:	192a      	addle	r2, r5, r4
 80051fe:	1b5b      	suble	r3, r3, r5
 8005200:	1936      	addle	r6, r6, r4
 8005202:	0fcd      	lsrs	r5, r1, #31
 8005204:	3801      	subs	r0, #1
 8005206:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800520a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800520e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005212:	d1f0      	bne.n	80051f6 <__ieee754_sqrt+0xb6>
 8005214:	4605      	mov	r5, r0
 8005216:	2420      	movs	r4, #32
 8005218:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800521c:	4293      	cmp	r3, r2
 800521e:	eb0c 0e00 	add.w	lr, ip, r0
 8005222:	dc02      	bgt.n	800522a <__ieee754_sqrt+0xea>
 8005224:	d113      	bne.n	800524e <__ieee754_sqrt+0x10e>
 8005226:	458e      	cmp	lr, r1
 8005228:	d811      	bhi.n	800524e <__ieee754_sqrt+0x10e>
 800522a:	f1be 0f00 	cmp.w	lr, #0
 800522e:	eb0e 000c 	add.w	r0, lr, ip
 8005232:	da3f      	bge.n	80052b4 <__ieee754_sqrt+0x174>
 8005234:	2800      	cmp	r0, #0
 8005236:	db3d      	blt.n	80052b4 <__ieee754_sqrt+0x174>
 8005238:	f102 0801 	add.w	r8, r2, #1
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	458e      	cmp	lr, r1
 8005240:	bf88      	it	hi
 8005242:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8005246:	eba1 010e 	sub.w	r1, r1, lr
 800524a:	4465      	add	r5, ip
 800524c:	4642      	mov	r2, r8
 800524e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005252:	3c01      	subs	r4, #1
 8005254:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005258:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800525c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005260:	d1dc      	bne.n	800521c <__ieee754_sqrt+0xdc>
 8005262:	4319      	orrs	r1, r3
 8005264:	d01b      	beq.n	800529e <__ieee754_sqrt+0x15e>
 8005266:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80052e4 <__ieee754_sqrt+0x1a4>
 800526a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80052e8 <__ieee754_sqrt+0x1a8>
 800526e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005272:	e9db 2300 	ldrd	r2, r3, [fp]
 8005276:	f7fa ffab 	bl	80001d0 <__aeabi_dsub>
 800527a:	e9da 8900 	ldrd	r8, r9, [sl]
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fb fbd7 	bl	8000a38 <__aeabi_dcmple>
 800528a:	b140      	cbz	r0, 800529e <__ieee754_sqrt+0x15e>
 800528c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8005290:	e9da 0100 	ldrd	r0, r1, [sl]
 8005294:	e9db 2300 	ldrd	r2, r3, [fp]
 8005298:	d10e      	bne.n	80052b8 <__ieee754_sqrt+0x178>
 800529a:	3601      	adds	r6, #1
 800529c:	4625      	mov	r5, r4
 800529e:	1073      	asrs	r3, r6, #1
 80052a0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80052a4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80052a8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80052ac:	086b      	lsrs	r3, r5, #1
 80052ae:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80052b2:	e759      	b.n	8005168 <__ieee754_sqrt+0x28>
 80052b4:	4690      	mov	r8, r2
 80052b6:	e7c1      	b.n	800523c <__ieee754_sqrt+0xfc>
 80052b8:	f7fa ff8c 	bl	80001d4 <__adddf3>
 80052bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4640      	mov	r0, r8
 80052c6:	4649      	mov	r1, r9
 80052c8:	f7fb fbac 	bl	8000a24 <__aeabi_dcmplt>
 80052cc:	b120      	cbz	r0, 80052d8 <__ieee754_sqrt+0x198>
 80052ce:	1cab      	adds	r3, r5, #2
 80052d0:	bf08      	it	eq
 80052d2:	3601      	addeq	r6, #1
 80052d4:	3502      	adds	r5, #2
 80052d6:	e7e2      	b.n	800529e <__ieee754_sqrt+0x15e>
 80052d8:	1c6b      	adds	r3, r5, #1
 80052da:	f023 0501 	bic.w	r5, r3, #1
 80052de:	e7de      	b.n	800529e <__ieee754_sqrt+0x15e>
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	08005ca8 	.word	0x08005ca8
 80052e8:	08005ca0 	.word	0x08005ca0
 80052ec:	00000000 	.word	0x00000000

080052f0 <__kernel_rem_pio2>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	ed2d 8b02 	vpush	{d8}
 80052f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80052fc:	f112 0f14 	cmn.w	r2, #20
 8005300:	9306      	str	r3, [sp, #24]
 8005302:	9104      	str	r1, [sp, #16]
 8005304:	4bc2      	ldr	r3, [pc, #776]	@ (8005610 <__kernel_rem_pio2+0x320>)
 8005306:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005308:	9008      	str	r0, [sp, #32]
 800530a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	9b06      	ldr	r3, [sp, #24]
 8005312:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005316:	bfa8      	it	ge
 8005318:	1ed4      	subge	r4, r2, #3
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	bfb2      	itee	lt
 800531e:	2400      	movlt	r4, #0
 8005320:	2318      	movge	r3, #24
 8005322:	fb94 f4f3 	sdivge	r4, r4, r3
 8005326:	f06f 0317 	mvn.w	r3, #23
 800532a:	fb04 3303 	mla	r3, r4, r3, r3
 800532e:	eb03 0b02 	add.w	fp, r3, r2
 8005332:	9b00      	ldr	r3, [sp, #0]
 8005334:	9a05      	ldr	r2, [sp, #20]
 8005336:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005600 <__kernel_rem_pio2+0x310>
 800533a:	eb03 0802 	add.w	r8, r3, r2
 800533e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005340:	1aa7      	subs	r7, r4, r2
 8005342:	ae20      	add	r6, sp, #128	@ 0x80
 8005344:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005348:	2500      	movs	r5, #0
 800534a:	4545      	cmp	r5, r8
 800534c:	dd12      	ble.n	8005374 <__kernel_rem_pio2+0x84>
 800534e:	9b06      	ldr	r3, [sp, #24]
 8005350:	aa20      	add	r2, sp, #128	@ 0x80
 8005352:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005356:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800535a:	2700      	movs	r7, #0
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	429f      	cmp	r7, r3
 8005360:	dc2e      	bgt.n	80053c0 <__kernel_rem_pio2+0xd0>
 8005362:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005600 <__kernel_rem_pio2+0x310>
 8005366:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800536a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800536e:	46a8      	mov	r8, r5
 8005370:	2600      	movs	r6, #0
 8005372:	e01b      	b.n	80053ac <__kernel_rem_pio2+0xbc>
 8005374:	42ef      	cmn	r7, r5
 8005376:	d407      	bmi.n	8005388 <__kernel_rem_pio2+0x98>
 8005378:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800537c:	f7fb f876 	bl	800046c <__aeabi_i2d>
 8005380:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005384:	3501      	adds	r5, #1
 8005386:	e7e0      	b.n	800534a <__kernel_rem_pio2+0x5a>
 8005388:	ec51 0b18 	vmov	r0, r1, d8
 800538c:	e7f8      	b.n	8005380 <__kernel_rem_pio2+0x90>
 800538e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8005392:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005396:	f7fb f8d3 	bl	8000540 <__aeabi_dmul>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053a2:	f7fa ff17 	bl	80001d4 <__adddf3>
 80053a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053aa:	3601      	adds	r6, #1
 80053ac:	9b05      	ldr	r3, [sp, #20]
 80053ae:	429e      	cmp	r6, r3
 80053b0:	dded      	ble.n	800538e <__kernel_rem_pio2+0x9e>
 80053b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053b6:	3701      	adds	r7, #1
 80053b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80053bc:	3508      	adds	r5, #8
 80053be:	e7cd      	b.n	800535c <__kernel_rem_pio2+0x6c>
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	f8dd 8000 	ldr.w	r8, [sp]
 80053c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80053c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80053d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80053da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053dc:	ab98      	add	r3, sp, #608	@ 0x260
 80053de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80053e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80053ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80053ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80053f2:	46a1      	mov	r9, r4
 80053f4:	46c2      	mov	sl, r8
 80053f6:	f1ba 0f00 	cmp.w	sl, #0
 80053fa:	dc77      	bgt.n	80054ec <__kernel_rem_pio2+0x1fc>
 80053fc:	4658      	mov	r0, fp
 80053fe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005402:	f7ff fde5 	bl	8004fd0 <scalbn>
 8005406:	ec57 6b10 	vmov	r6, r7, d0
 800540a:	2200      	movs	r2, #0
 800540c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fb f894 	bl	8000540 <__aeabi_dmul>
 8005418:	ec41 0b10 	vmov	d0, r0, r1
 800541c:	f000 fab8 	bl	8005990 <floor>
 8005420:	4b7c      	ldr	r3, [pc, #496]	@ (8005614 <__kernel_rem_pio2+0x324>)
 8005422:	ec51 0b10 	vmov	r0, r1, d0
 8005426:	2200      	movs	r2, #0
 8005428:	f7fb f88a 	bl	8000540 <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fa fecc 	bl	80001d0 <__aeabi_dsub>
 8005438:	460f      	mov	r7, r1
 800543a:	4606      	mov	r6, r0
 800543c:	f7fb fb30 	bl	8000aa0 <__aeabi_d2iz>
 8005440:	9002      	str	r0, [sp, #8]
 8005442:	f7fb f813 	bl	800046c <__aeabi_i2d>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f7fa febf 	bl	80001d0 <__aeabi_dsub>
 8005452:	f1bb 0f00 	cmp.w	fp, #0
 8005456:	4606      	mov	r6, r0
 8005458:	460f      	mov	r7, r1
 800545a:	dd6c      	ble.n	8005536 <__kernel_rem_pio2+0x246>
 800545c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8005460:	ab0c      	add	r3, sp, #48	@ 0x30
 8005462:	9d02      	ldr	r5, [sp, #8]
 8005464:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005468:	f1cb 0018 	rsb	r0, fp, #24
 800546c:	fa43 f200 	asr.w	r2, r3, r0
 8005470:	4415      	add	r5, r2
 8005472:	4082      	lsls	r2, r0
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	aa0c      	add	r2, sp, #48	@ 0x30
 8005478:	9502      	str	r5, [sp, #8]
 800547a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800547e:	f1cb 0217 	rsb	r2, fp, #23
 8005482:	fa43 f902 	asr.w	r9, r3, r2
 8005486:	f1b9 0f00 	cmp.w	r9, #0
 800548a:	dd64      	ble.n	8005556 <__kernel_rem_pio2+0x266>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	3301      	adds	r3, #1
 8005492:	9302      	str	r3, [sp, #8]
 8005494:	4615      	mov	r5, r2
 8005496:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800549a:	4590      	cmp	r8, r2
 800549c:	f300 80a1 	bgt.w	80055e2 <__kernel_rem_pio2+0x2f2>
 80054a0:	f1bb 0f00 	cmp.w	fp, #0
 80054a4:	dd07      	ble.n	80054b6 <__kernel_rem_pio2+0x1c6>
 80054a6:	f1bb 0f01 	cmp.w	fp, #1
 80054aa:	f000 80c1 	beq.w	8005630 <__kernel_rem_pio2+0x340>
 80054ae:	f1bb 0f02 	cmp.w	fp, #2
 80054b2:	f000 80c8 	beq.w	8005646 <__kernel_rem_pio2+0x356>
 80054b6:	f1b9 0f02 	cmp.w	r9, #2
 80054ba:	d14c      	bne.n	8005556 <__kernel_rem_pio2+0x266>
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	4955      	ldr	r1, [pc, #340]	@ (8005618 <__kernel_rem_pio2+0x328>)
 80054c2:	2000      	movs	r0, #0
 80054c4:	f7fa fe84 	bl	80001d0 <__aeabi_dsub>
 80054c8:	4606      	mov	r6, r0
 80054ca:	460f      	mov	r7, r1
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	d042      	beq.n	8005556 <__kernel_rem_pio2+0x266>
 80054d0:	4658      	mov	r0, fp
 80054d2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005608 <__kernel_rem_pio2+0x318>
 80054d6:	f7ff fd7b 	bl	8004fd0 <scalbn>
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	ec53 2b10 	vmov	r2, r3, d0
 80054e2:	f7fa fe75 	bl	80001d0 <__aeabi_dsub>
 80054e6:	4606      	mov	r6, r0
 80054e8:	460f      	mov	r7, r1
 80054ea:	e034      	b.n	8005556 <__kernel_rem_pio2+0x266>
 80054ec:	4b4b      	ldr	r3, [pc, #300]	@ (800561c <__kernel_rem_pio2+0x32c>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f4:	f7fb f824 	bl	8000540 <__aeabi_dmul>
 80054f8:	f7fb fad2 	bl	8000aa0 <__aeabi_d2iz>
 80054fc:	f7fa ffb6 	bl	800046c <__aeabi_i2d>
 8005500:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <__kernel_rem_pio2+0x330>)
 8005502:	2200      	movs	r2, #0
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	f7fb f81a 	bl	8000540 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005514:	f7fa fe5c 	bl	80001d0 <__aeabi_dsub>
 8005518:	f7fb fac2 	bl	8000aa0 <__aeabi_d2iz>
 800551c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005520:	f849 0b04 	str.w	r0, [r9], #4
 8005524:	4639      	mov	r1, r7
 8005526:	4630      	mov	r0, r6
 8005528:	f7fa fe54 	bl	80001d4 <__adddf3>
 800552c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005534:	e75f      	b.n	80053f6 <__kernel_rem_pio2+0x106>
 8005536:	d107      	bne.n	8005548 <__kernel_rem_pio2+0x258>
 8005538:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800553c:	aa0c      	add	r2, sp, #48	@ 0x30
 800553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005542:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005546:	e79e      	b.n	8005486 <__kernel_rem_pio2+0x196>
 8005548:	4b36      	ldr	r3, [pc, #216]	@ (8005624 <__kernel_rem_pio2+0x334>)
 800554a:	2200      	movs	r2, #0
 800554c:	f7fb fa7e 	bl	8000a4c <__aeabi_dcmpge>
 8005550:	2800      	cmp	r0, #0
 8005552:	d143      	bne.n	80055dc <__kernel_rem_pio2+0x2ec>
 8005554:	4681      	mov	r9, r0
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fb fa57 	bl	8000a10 <__aeabi_dcmpeq>
 8005562:	2800      	cmp	r0, #0
 8005564:	f000 80c1 	beq.w	80056ea <__kernel_rem_pio2+0x3fa>
 8005568:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800556c:	2200      	movs	r2, #0
 800556e:	9900      	ldr	r1, [sp, #0]
 8005570:	428b      	cmp	r3, r1
 8005572:	da70      	bge.n	8005656 <__kernel_rem_pio2+0x366>
 8005574:	2a00      	cmp	r2, #0
 8005576:	f000 808b 	beq.w	8005690 <__kernel_rem_pio2+0x3a0>
 800557a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800557e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005580:	f1ab 0b18 	sub.w	fp, fp, #24
 8005584:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f6      	beq.n	800557a <__kernel_rem_pio2+0x28a>
 800558c:	4658      	mov	r0, fp
 800558e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005608 <__kernel_rem_pio2+0x318>
 8005592:	f7ff fd1d 	bl	8004fd0 <scalbn>
 8005596:	f108 0301 	add.w	r3, r8, #1
 800559a:	00da      	lsls	r2, r3, #3
 800559c:	9205      	str	r2, [sp, #20]
 800559e:	ec55 4b10 	vmov	r4, r5, d0
 80055a2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80055a4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800561c <__kernel_rem_pio2+0x32c>
 80055a8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80055ac:	4646      	mov	r6, r8
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	2e00      	cmp	r6, #0
 80055b4:	f280 80d1 	bge.w	800575a <__kernel_rem_pio2+0x46a>
 80055b8:	4644      	mov	r4, r8
 80055ba:	2c00      	cmp	r4, #0
 80055bc:	f2c0 80ff 	blt.w	80057be <__kernel_rem_pio2+0x4ce>
 80055c0:	4b19      	ldr	r3, [pc, #100]	@ (8005628 <__kernel_rem_pio2+0x338>)
 80055c2:	461f      	mov	r7, r3
 80055c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80055c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055ca:	9306      	str	r3, [sp, #24]
 80055cc:	f04f 0a00 	mov.w	sl, #0
 80055d0:	f04f 0b00 	mov.w	fp, #0
 80055d4:	2600      	movs	r6, #0
 80055d6:	eba8 0504 	sub.w	r5, r8, r4
 80055da:	e0e4      	b.n	80057a6 <__kernel_rem_pio2+0x4b6>
 80055dc:	f04f 0902 	mov.w	r9, #2
 80055e0:	e754      	b.n	800548c <__kernel_rem_pio2+0x19c>
 80055e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80055e6:	bb0d      	cbnz	r5, 800562c <__kernel_rem_pio2+0x33c>
 80055e8:	b123      	cbz	r3, 80055f4 <__kernel_rem_pio2+0x304>
 80055ea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80055ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80055f2:	2301      	movs	r3, #1
 80055f4:	3201      	adds	r2, #1
 80055f6:	461d      	mov	r5, r3
 80055f8:	e74f      	b.n	800549a <__kernel_rem_pio2+0x1aa>
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w
	...
 800560c:	3ff00000 	.word	0x3ff00000
 8005610:	08005cf0 	.word	0x08005cf0
 8005614:	40200000 	.word	0x40200000
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	3e700000 	.word	0x3e700000
 8005620:	41700000 	.word	0x41700000
 8005624:	3fe00000 	.word	0x3fe00000
 8005628:	08005cb0 	.word	0x08005cb0
 800562c:	1acb      	subs	r3, r1, r3
 800562e:	e7de      	b.n	80055ee <__kernel_rem_pio2+0x2fe>
 8005630:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8005634:	ab0c      	add	r3, sp, #48	@ 0x30
 8005636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800563e:	a90c      	add	r1, sp, #48	@ 0x30
 8005640:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005644:	e737      	b.n	80054b6 <__kernel_rem_pio2+0x1c6>
 8005646:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800564a:	ab0c      	add	r3, sp, #48	@ 0x30
 800564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005650:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005654:	e7f3      	b.n	800563e <__kernel_rem_pio2+0x34e>
 8005656:	a90c      	add	r1, sp, #48	@ 0x30
 8005658:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800565c:	3b01      	subs	r3, #1
 800565e:	430a      	orrs	r2, r1
 8005660:	e785      	b.n	800556e <__kernel_rem_pio2+0x27e>
 8005662:	3401      	adds	r4, #1
 8005664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005668:	2a00      	cmp	r2, #0
 800566a:	d0fa      	beq.n	8005662 <__kernel_rem_pio2+0x372>
 800566c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800566e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005672:	eb0d 0503 	add.w	r5, sp, r3
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	aa20      	add	r2, sp, #128	@ 0x80
 800567a:	4443      	add	r3, r8
 800567c:	f108 0701 	add.w	r7, r8, #1
 8005680:	3d98      	subs	r5, #152	@ 0x98
 8005682:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005686:	4444      	add	r4, r8
 8005688:	42bc      	cmp	r4, r7
 800568a:	da04      	bge.n	8005696 <__kernel_rem_pio2+0x3a6>
 800568c:	46a0      	mov	r8, r4
 800568e:	e6a2      	b.n	80053d6 <__kernel_rem_pio2+0xe6>
 8005690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005692:	2401      	movs	r4, #1
 8005694:	e7e6      	b.n	8005664 <__kernel_rem_pio2+0x374>
 8005696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005698:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800569c:	f7fa fee6 	bl	800046c <__aeabi_i2d>
 80056a0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005960 <__kernel_rem_pio2+0x670>
 80056a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056b0:	46b2      	mov	sl, r6
 80056b2:	f04f 0800 	mov.w	r8, #0
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	4598      	cmp	r8, r3
 80056ba:	dd05      	ble.n	80056c8 <__kernel_rem_pio2+0x3d8>
 80056bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056c0:	3701      	adds	r7, #1
 80056c2:	eca5 7b02 	vstmia	r5!, {d7}
 80056c6:	e7df      	b.n	8005688 <__kernel_rem_pio2+0x398>
 80056c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80056cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80056d0:	f7fa ff36 	bl	8000540 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056dc:	f7fa fd7a 	bl	80001d4 <__adddf3>
 80056e0:	f108 0801 	add.w	r8, r8, #1
 80056e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e8:	e7e5      	b.n	80056b6 <__kernel_rem_pio2+0x3c6>
 80056ea:	f1cb 0000 	rsb	r0, fp, #0
 80056ee:	ec47 6b10 	vmov	d0, r6, r7
 80056f2:	f7ff fc6d 	bl	8004fd0 <scalbn>
 80056f6:	ec55 4b10 	vmov	r4, r5, d0
 80056fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005968 <__kernel_rem_pio2+0x678>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fb f9a3 	bl	8000a4c <__aeabi_dcmpge>
 8005706:	b300      	cbz	r0, 800574a <__kernel_rem_pio2+0x45a>
 8005708:	4b98      	ldr	r3, [pc, #608]	@ (800596c <__kernel_rem_pio2+0x67c>)
 800570a:	2200      	movs	r2, #0
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa ff16 	bl	8000540 <__aeabi_dmul>
 8005714:	f7fb f9c4 	bl	8000aa0 <__aeabi_d2iz>
 8005718:	4606      	mov	r6, r0
 800571a:	f7fa fea7 	bl	800046c <__aeabi_i2d>
 800571e:	4b92      	ldr	r3, [pc, #584]	@ (8005968 <__kernel_rem_pio2+0x678>)
 8005720:	2200      	movs	r2, #0
 8005722:	f7fa ff0d 	bl	8000540 <__aeabi_dmul>
 8005726:	460b      	mov	r3, r1
 8005728:	4602      	mov	r2, r0
 800572a:	4629      	mov	r1, r5
 800572c:	4620      	mov	r0, r4
 800572e:	f7fa fd4f 	bl	80001d0 <__aeabi_dsub>
 8005732:	f7fb f9b5 	bl	8000aa0 <__aeabi_d2iz>
 8005736:	ab0c      	add	r3, sp, #48	@ 0x30
 8005738:	f10b 0b18 	add.w	fp, fp, #24
 800573c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005740:	f108 0801 	add.w	r8, r8, #1
 8005744:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005748:	e720      	b.n	800558c <__kernel_rem_pio2+0x29c>
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fb f9a7 	bl	8000aa0 <__aeabi_d2iz>
 8005752:	ab0c      	add	r3, sp, #48	@ 0x30
 8005754:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005758:	e718      	b.n	800558c <__kernel_rem_pio2+0x29c>
 800575a:	ab0c      	add	r3, sp, #48	@ 0x30
 800575c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005760:	f7fa fe84 	bl	800046c <__aeabi_i2d>
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	f7fa feea 	bl	8000540 <__aeabi_dmul>
 800576c:	4652      	mov	r2, sl
 800576e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005772:	465b      	mov	r3, fp
 8005774:	4620      	mov	r0, r4
 8005776:	4629      	mov	r1, r5
 8005778:	f7fa fee2 	bl	8000540 <__aeabi_dmul>
 800577c:	3e01      	subs	r6, #1
 800577e:	4604      	mov	r4, r0
 8005780:	460d      	mov	r5, r1
 8005782:	e716      	b.n	80055b2 <__kernel_rem_pio2+0x2c2>
 8005784:	9906      	ldr	r1, [sp, #24]
 8005786:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800578a:	9106      	str	r1, [sp, #24]
 800578c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005790:	f7fa fed6 	bl	8000540 <__aeabi_dmul>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4650      	mov	r0, sl
 800579a:	4659      	mov	r1, fp
 800579c:	f7fa fd1a 	bl	80001d4 <__adddf3>
 80057a0:	3601      	adds	r6, #1
 80057a2:	4682      	mov	sl, r0
 80057a4:	468b      	mov	fp, r1
 80057a6:	9b00      	ldr	r3, [sp, #0]
 80057a8:	429e      	cmp	r6, r3
 80057aa:	dc01      	bgt.n	80057b0 <__kernel_rem_pio2+0x4c0>
 80057ac:	42ae      	cmp	r6, r5
 80057ae:	dde9      	ble.n	8005784 <__kernel_rem_pio2+0x494>
 80057b0:	ab48      	add	r3, sp, #288	@ 0x120
 80057b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80057b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80057ba:	3c01      	subs	r4, #1
 80057bc:	e6fd      	b.n	80055ba <__kernel_rem_pio2+0x2ca>
 80057be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	dc0b      	bgt.n	80057dc <__kernel_rem_pio2+0x4ec>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dc35      	bgt.n	8005834 <__kernel_rem_pio2+0x544>
 80057c8:	d059      	beq.n	800587e <__kernel_rem_pio2+0x58e>
 80057ca:	9b02      	ldr	r3, [sp, #8]
 80057cc:	f003 0007 	and.w	r0, r3, #7
 80057d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80057d4:	ecbd 8b02 	vpop	{d8}
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d1f3      	bne.n	80057ca <__kernel_rem_pio2+0x4da>
 80057e2:	9b05      	ldr	r3, [sp, #20]
 80057e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057e8:	eb0d 0403 	add.w	r4, sp, r3
 80057ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80057f0:	4625      	mov	r5, r4
 80057f2:	46c2      	mov	sl, r8
 80057f4:	f1ba 0f00 	cmp.w	sl, #0
 80057f8:	dc69      	bgt.n	80058ce <__kernel_rem_pio2+0x5de>
 80057fa:	4645      	mov	r5, r8
 80057fc:	2d01      	cmp	r5, #1
 80057fe:	f300 8087 	bgt.w	8005910 <__kernel_rem_pio2+0x620>
 8005802:	9c05      	ldr	r4, [sp, #20]
 8005804:	ab48      	add	r3, sp, #288	@ 0x120
 8005806:	441c      	add	r4, r3
 8005808:	2000      	movs	r0, #0
 800580a:	2100      	movs	r1, #0
 800580c:	f1b8 0f01 	cmp.w	r8, #1
 8005810:	f300 809c 	bgt.w	800594c <__kernel_rem_pio2+0x65c>
 8005814:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8005818:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800581c:	f1b9 0f00 	cmp.w	r9, #0
 8005820:	f040 80a6 	bne.w	8005970 <__kernel_rem_pio2+0x680>
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	e9c3 5600 	strd	r5, r6, [r3]
 800582a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800582e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005832:	e7ca      	b.n	80057ca <__kernel_rem_pio2+0x4da>
 8005834:	9d05      	ldr	r5, [sp, #20]
 8005836:	ab48      	add	r3, sp, #288	@ 0x120
 8005838:	441d      	add	r5, r3
 800583a:	4644      	mov	r4, r8
 800583c:	2000      	movs	r0, #0
 800583e:	2100      	movs	r1, #0
 8005840:	2c00      	cmp	r4, #0
 8005842:	da35      	bge.n	80058b0 <__kernel_rem_pio2+0x5c0>
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	d038      	beq.n	80058bc <__kernel_rem_pio2+0x5cc>
 800584a:	4602      	mov	r2, r0
 800584c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005850:	9c04      	ldr	r4, [sp, #16]
 8005852:	e9c4 2300 	strd	r2, r3, [r4]
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800585e:	f7fa fcb7 	bl	80001d0 <__aeabi_dsub>
 8005862:	ad4a      	add	r5, sp, #296	@ 0x128
 8005864:	2401      	movs	r4, #1
 8005866:	45a0      	cmp	r8, r4
 8005868:	da2b      	bge.n	80058c2 <__kernel_rem_pio2+0x5d2>
 800586a:	f1b9 0f00 	cmp.w	r9, #0
 800586e:	d002      	beq.n	8005876 <__kernel_rem_pio2+0x586>
 8005870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005874:	4619      	mov	r1, r3
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800587c:	e7a5      	b.n	80057ca <__kernel_rem_pio2+0x4da>
 800587e:	9c05      	ldr	r4, [sp, #20]
 8005880:	ab48      	add	r3, sp, #288	@ 0x120
 8005882:	441c      	add	r4, r3
 8005884:	2000      	movs	r0, #0
 8005886:	2100      	movs	r1, #0
 8005888:	f1b8 0f00 	cmp.w	r8, #0
 800588c:	da09      	bge.n	80058a2 <__kernel_rem_pio2+0x5b2>
 800588e:	f1b9 0f00 	cmp.w	r9, #0
 8005892:	d002      	beq.n	800589a <__kernel_rem_pio2+0x5aa>
 8005894:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005898:	4619      	mov	r1, r3
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	e9c3 0100 	strd	r0, r1, [r3]
 80058a0:	e793      	b.n	80057ca <__kernel_rem_pio2+0x4da>
 80058a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058a6:	f7fa fc95 	bl	80001d4 <__adddf3>
 80058aa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80058ae:	e7eb      	b.n	8005888 <__kernel_rem_pio2+0x598>
 80058b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80058b4:	f7fa fc8e 	bl	80001d4 <__adddf3>
 80058b8:	3c01      	subs	r4, #1
 80058ba:	e7c1      	b.n	8005840 <__kernel_rem_pio2+0x550>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e7c6      	b.n	8005850 <__kernel_rem_pio2+0x560>
 80058c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80058c6:	f7fa fc85 	bl	80001d4 <__adddf3>
 80058ca:	3401      	adds	r4, #1
 80058cc:	e7cb      	b.n	8005866 <__kernel_rem_pio2+0x576>
 80058ce:	ed35 7b02 	vldmdb	r5!, {d7}
 80058d2:	ed8d 7b00 	vstr	d7, [sp]
 80058d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80058da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058de:	ec53 2b17 	vmov	r2, r3, d7
 80058e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058e6:	f7fa fc75 	bl	80001d4 <__adddf3>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4606      	mov	r6, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f6:	f7fa fc6b 	bl	80001d0 <__aeabi_dsub>
 80058fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058fe:	f7fa fc69 	bl	80001d4 <__adddf3>
 8005902:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005906:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800590a:	e9c5 6700 	strd	r6, r7, [r5]
 800590e:	e771      	b.n	80057f4 <__kernel_rem_pio2+0x504>
 8005910:	ed34 7b02 	vldmdb	r4!, {d7}
 8005914:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005918:	ec51 0b17 	vmov	r0, r1, d7
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	ed8d 7b00 	vstr	d7, [sp]
 8005924:	f7fa fc56 	bl	80001d4 <__adddf3>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005934:	f7fa fc4c 	bl	80001d0 <__aeabi_dsub>
 8005938:	4652      	mov	r2, sl
 800593a:	465b      	mov	r3, fp
 800593c:	f7fa fc4a 	bl	80001d4 <__adddf3>
 8005940:	3d01      	subs	r5, #1
 8005942:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005946:	e9c4 6700 	strd	r6, r7, [r4]
 800594a:	e757      	b.n	80057fc <__kernel_rem_pio2+0x50c>
 800594c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005950:	f7fa fc40 	bl	80001d4 <__adddf3>
 8005954:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005958:	e758      	b.n	800580c <__kernel_rem_pio2+0x51c>
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w
	...
 8005968:	41700000 	.word	0x41700000
 800596c:	3e700000 	.word	0x3e700000
 8005970:	9b04      	ldr	r3, [sp, #16]
 8005972:	9a04      	ldr	r2, [sp, #16]
 8005974:	601d      	str	r5, [r3, #0]
 8005976:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800597a:	605c      	str	r4, [r3, #4]
 800597c:	609f      	str	r7, [r3, #8]
 800597e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8005982:	60d3      	str	r3, [r2, #12]
 8005984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005988:	6110      	str	r0, [r2, #16]
 800598a:	6153      	str	r3, [r2, #20]
 800598c:	e71d      	b.n	80057ca <__kernel_rem_pio2+0x4da>
 800598e:	bf00      	nop

08005990 <floor>:
 8005990:	ec51 0b10 	vmov	r0, r1, d0
 8005994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80059a0:	2e13      	cmp	r6, #19
 80059a2:	460c      	mov	r4, r1
 80059a4:	4605      	mov	r5, r0
 80059a6:	4680      	mov	r8, r0
 80059a8:	dc34      	bgt.n	8005a14 <floor+0x84>
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da17      	bge.n	80059de <floor+0x4e>
 80059ae:	a332      	add	r3, pc, #200	@ (adr r3, 8005a78 <floor+0xe8>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fa fc0e 	bl	80001d4 <__adddf3>
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7fb f850 	bl	8000a60 <__aeabi_dcmpgt>
 80059c0:	b150      	cbz	r0, 80059d8 <floor+0x48>
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	da55      	bge.n	8005a72 <floor+0xe2>
 80059c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80059ca:	432c      	orrs	r4, r5
 80059cc:	2500      	movs	r5, #0
 80059ce:	42ac      	cmp	r4, r5
 80059d0:	4c2b      	ldr	r4, [pc, #172]	@ (8005a80 <floor+0xf0>)
 80059d2:	bf08      	it	eq
 80059d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80059d8:	4621      	mov	r1, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	e023      	b.n	8005a26 <floor+0x96>
 80059de:	4f29      	ldr	r7, [pc, #164]	@ (8005a84 <floor+0xf4>)
 80059e0:	4137      	asrs	r7, r6
 80059e2:	ea01 0307 	and.w	r3, r1, r7
 80059e6:	4303      	orrs	r3, r0
 80059e8:	d01d      	beq.n	8005a26 <floor+0x96>
 80059ea:	a323      	add	r3, pc, #140	@ (adr r3, 8005a78 <floor+0xe8>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fbf0 	bl	80001d4 <__adddf3>
 80059f4:	2200      	movs	r2, #0
 80059f6:	2300      	movs	r3, #0
 80059f8:	f7fb f832 	bl	8000a60 <__aeabi_dcmpgt>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d0eb      	beq.n	80059d8 <floor+0x48>
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	bfbe      	ittt	lt
 8005a04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005a08:	4133      	asrlt	r3, r6
 8005a0a:	18e4      	addlt	r4, r4, r3
 8005a0c:	ea24 0407 	bic.w	r4, r4, r7
 8005a10:	2500      	movs	r5, #0
 8005a12:	e7e1      	b.n	80059d8 <floor+0x48>
 8005a14:	2e33      	cmp	r6, #51	@ 0x33
 8005a16:	dd0a      	ble.n	8005a2e <floor+0x9e>
 8005a18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005a1c:	d103      	bne.n	8005a26 <floor+0x96>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	f7fa fbd7 	bl	80001d4 <__adddf3>
 8005a26:	ec41 0b10 	vmov	d0, r0, r1
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005a32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a36:	40df      	lsrs	r7, r3
 8005a38:	4207      	tst	r7, r0
 8005a3a:	d0f4      	beq.n	8005a26 <floor+0x96>
 8005a3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005a78 <floor+0xe8>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f7fb f809 	bl	8000a60 <__aeabi_dcmpgt>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d0c2      	beq.n	80059d8 <floor+0x48>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	da0a      	bge.n	8005a6c <floor+0xdc>
 8005a56:	2e14      	cmp	r6, #20
 8005a58:	d101      	bne.n	8005a5e <floor+0xce>
 8005a5a:	3401      	adds	r4, #1
 8005a5c:	e006      	b.n	8005a6c <floor+0xdc>
 8005a5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005a62:	2301      	movs	r3, #1
 8005a64:	40b3      	lsls	r3, r6
 8005a66:	441d      	add	r5, r3
 8005a68:	4545      	cmp	r5, r8
 8005a6a:	d3f6      	bcc.n	8005a5a <floor+0xca>
 8005a6c:	ea25 0507 	bic.w	r5, r5, r7
 8005a70:	e7b2      	b.n	80059d8 <floor+0x48>
 8005a72:	2500      	movs	r5, #0
 8005a74:	462c      	mov	r4, r5
 8005a76:	e7af      	b.n	80059d8 <floor+0x48>
 8005a78:	8800759c 	.word	0x8800759c
 8005a7c:	7e37e43c 	.word	0x7e37e43c
 8005a80:	bff00000 	.word	0xbff00000
 8005a84:	000fffff 	.word	0x000fffff

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
