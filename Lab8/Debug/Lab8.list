
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013834  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cb4  08017cb4  0001905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017cb4  08017cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cbc  08017cbc  0001905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017cbc  08017cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017cc0  08017cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08017cc4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061f8  2000005c  08017d20  0001905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006254  08017d20  00019254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b8e  00000000  00000000  0001908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3a  00000000  00000000  0002dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a2  00000000  00000000  00031060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259f9  00000000  00000000  00031702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da6b  00000000  00000000  000570fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e930e  00000000  00000000  00064b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0014de74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  0014df2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00150750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  001507ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00154148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004468 	.word	0x08004468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004468 	.word	0x08004468

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fa43 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f867 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8e7 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8b5 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_init_f32(&fft_handler, FFT_LENGTH);
 800050a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800050e:	4828      	ldr	r0, [pc, #160]	@ (80005b0 <main+0xbc>)
 8000510:	f002 fe66 	bl	80031e0 <arm_rfft_fast_init_f32>

  for (int i = 0; i < FFT_LENGTH; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	e01b      	b.n	8000552 <main+0x5e>
    input_signal[i] = arm_cos_f32(2*PI*400*i/SAMPLING_RATE);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000524:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80005b4 <main+0xc0>
 8000528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800052c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80005b8 <main+0xc4>
 8000530:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000534:	eeb0 0a47 	vmov.f32	s0, s14
 8000538:	f003 fc38 	bl	8003dac <arm_cos_f32>
 800053c:	eef0 7a40 	vmov.f32	s15, s0
 8000540:	4a1e      	ldr	r2, [pc, #120]	@ (80005bc <main+0xc8>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_LENGTH; i++) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000558:	dbdf      	blt.n	800051a <main+0x26>
  }
  
  for (int i = 0; i < FFT_LENGTH; i++) {
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	e015      	b.n	800058c <main+0x98>
    output_freq[i] = (float32_t)(i) / FFT_LENGTH * SAMPLING_RATE;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	ee07 3a90 	vmov	s15, r3
 8000566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80005c0 <main+0xcc>
 800056e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000572:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80005b8 <main+0xc4>
 8000576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057a:	4a12      	ldr	r2, [pc, #72]	@ (80005c4 <main+0xd0>)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_LENGTH; i++) {
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000592:	dbe5      	blt.n	8000560 <main+0x6c>
  }

  arm_rfft_fast_f32(&fft_handler, input_signal, output_fft,0);
 8000594:	2300      	movs	r3, #0
 8000596:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <main+0xd4>)
 8000598:	4908      	ldr	r1, [pc, #32]	@ (80005bc <main+0xc8>)
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <main+0xbc>)
 800059c:	f002 ff04 	bl	80033a8 <arm_rfft_fast_f32>

  arm_cmplx_mag_f32(output_fft, output_fft_mag, FFT_LENGTH/2);
 80005a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005a4:	4909      	ldr	r1, [pc, #36]	@ (80005cc <main+0xd8>)
 80005a6:	4808      	ldr	r0, [pc, #32]	@ (80005c8 <main+0xd4>)
 80005a8:	f003 fadc 	bl	8003b64 <arm_cmplx_mag_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0xb8>
 80005b0:	20006100 	.word	0x20006100
 80005b4:	451d1463 	.word	0x451d1463
 80005b8:	46800000 	.word	0x46800000
 80005bc:	20000100 	.word	0x20000100
 80005c0:	45000000 	.word	0x45000000
 80005c4:	20005100 	.word	0x20005100
 80005c8:	20002100 	.word	0x20002100
 80005cc:	20004100 	.word	0x20004100

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 feee 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f000 fcf7 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f8ce 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fd2e 	bl	8001094 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f8af 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f8f6 	bl	800184c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 f89b 	bl	80007a0 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	@ 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	f001 ffa8 	bl	800260c <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f86d 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000078 	.word	0x20000078
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000752:	f000 fc23 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0xc8>)
 800076e:	f000 fa6b 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000772:	2320      	movs	r3, #32
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f000 fa5c 	bl	8000c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0ac      	sub	sp, #176	@ 0xb0
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2288      	movs	r2, #136	@ 0x88
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fdd3 	bl	80043c0 <memset>
  if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <HAL_UART_MspInit+0xb0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d13b      	bne.n	800089c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000824:	2302      	movs	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000828:	2300      	movs	r3, #0
 800082a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fa2f 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800083c:	f7ff ffb0 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000844:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084a:	6593      	str	r3, [r2, #88]	@ 0x58
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000870:	230c      	movs	r3, #12
 8000872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000888:	2307      	movs	r3, #7
 800088a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f000 f9d6 	bl	8000c48 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800089c:	bf00      	nop
 800089e:	37b0      	adds	r7, #176	@ 0xb0
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <MemManage_Handler+0x4>

080008c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 f89b 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f003 fd3d 	bl	80043dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fdc7 	bl	80004f4 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000974:	08017cc4 	.word	0x08017cc4
  ldr r2, =_sbss
 8000978:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800097c:	20006254 	.word	0x20006254

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_Init+0x3c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <HAL_Init+0x3c>)
 8000994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000998:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f920 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f80f 	bl	80009c4 <HAL_InitTick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	e001      	b.n	80009b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b2:	f7ff fefb 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b6:	79fb      	ldrb	r3, [r7, #7]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d023      	beq.n	8000a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_InitTick+0x70>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f91d 	bl	8000c2e <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10f      	bne.n	8000a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d809      	bhi.n	8000a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f000 f8f5 	bl	8000bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_InitTick+0x74>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e004      	b.n	8000a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e001      	b.n	8000a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20006118 	.word	0x20006118

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20006118 	.word	0x20006118

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5c 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e17f      	b.n	8000f58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8171 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x40>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d118      	bne.n	8000d28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f003 0201 	and.w	r2, r3, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d017      	beq.n	8000d64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80ac 	beq.w	8000f52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8000f78 <HAL_GPIO_Init+0x330>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8000f78 <HAL_GPIO_Init+0x330>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b5c      	ldr	r3, [pc, #368]	@ (8000f78 <HAL_GPIO_Init+0x330>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e12:	4a5a      	ldr	r2, [pc, #360]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x242>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	@ (8000f80 <HAL_GPIO_Init+0x338>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x23e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	@ (8000f84 <HAL_GPIO_Init+0x33c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x23a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	@ (8000f88 <HAL_GPIO_Init+0x340>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x236>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	@ (8000f8c <HAL_GPIO_Init+0x344>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x232>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	@ (8000f90 <HAL_GPIO_Init+0x348>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	@ (8000f94 <HAL_GPIO_Init+0x34c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x22a>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00c      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x244>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9c:	4937      	ldr	r1, [pc, #220]	@ (8000f7c <HAL_GPIO_Init+0x334>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ece:	4a32      	ldr	r2, [pc, #200]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f22:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f4c:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <HAL_GPIO_Init+0x350>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae78 	bne.w	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	48001400 	.word	0x48001400
 8000f94:	48001800 	.word	0x48001800
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff6:	d130      	bne.n	800105a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001004:	d038      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2232      	movs	r2, #50	@ 0x32
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102c:	e002      	b.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001040:	d102      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f2      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001054:	d110      	bne.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e00f      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001066:	d007      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83

08001094 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e3ca      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a6:	4b97      	ldr	r3, [pc, #604]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b0:	4b94      	ldr	r3, [pc, #592]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80e4 	beq.w	8001290 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_RCC_OscConfig+0x4a>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	f040 808b 	bne.w	80011ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	f040 8087 	bne.w	80011ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_RCC_OscConfig+0x62>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e3a2      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_RCC_OscConfig+0x7c>
 8001106:	4b7f      	ldr	r3, [pc, #508]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800110e:	e005      	b.n	800111c <HAL_RCC_OscConfig+0x88>
 8001110:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800111c:	4293      	cmp	r3, r2
 800111e:	d223      	bcs.n	8001168 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fd55 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e383      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001134:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a72      	ldr	r2, [pc, #456]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	496d      	ldr	r1, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001152:	4b6c      	ldr	r3, [pc, #432]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	4968      	ldr	r1, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]
 8001166:	e025      	b.n	80011b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001168:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4960      	ldr	r1, [pc, #384]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001186:	4b5f      	ldr	r3, [pc, #380]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	495b      	ldr	r1, [pc, #364]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd15 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e343      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b4:	f000 fc4a 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b52      	ldr	r3, [pc, #328]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4950      	ldr	r1, [pc, #320]	@ (8001308 <HAL_RCC_OscConfig+0x274>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <HAL_RCC_OscConfig+0x27c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fbf3 	bl	80009c4 <HAL_InitTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d052      	beq.n	800128e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	e327      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d032      	beq.n	800125a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f4:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a42      	ldr	r2, [pc, #264]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc30 	bl	8000a64 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001208:	f7ff fc2c 	bl	8000a64 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e310      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121a:	4b3a      	ldr	r3, [pc, #232]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001226:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a36      	ldr	r2, [pc, #216]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4931      	ldr	r1, [pc, #196]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001244:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	492c      	ldr	r1, [pc, #176]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
 8001258:	e01a      	b.n	8001290 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a29      	ldr	r2, [pc, #164]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001266:	f7ff fbfd 	bl	8000a64 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126e:	f7ff fbf9 	bl	8000a64 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e2dd      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001280:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x1da>
 800128c:	e000      	b.n	8001290 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d074      	beq.n	8001386 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x21a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d10e      	bne.n	80012c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d10b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d064      	beq.n	8001384 <HAL_RCC_OscConfig+0x2f0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d160      	bne.n	8001384 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e2ba      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x24a>
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e026      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e6:	d115      	bne.n	8001314 <HAL_RCC_OscConfig+0x280>
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a02      	ldr	r2, [pc, #8]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e014      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	08004480 	.word	0x08004480
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	4ba0      	ldr	r3, [pc, #640]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a9f      	ldr	r2, [pc, #636]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b9d      	ldr	r3, [pc, #628]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9c      	ldr	r2, [pc, #624]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fb96 	bl	8000a64 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fb92 	bl	8000a64 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e276      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	4b92      	ldr	r3, [pc, #584]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x2a8>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fb82 	bl	8000a64 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fb7e 	bl	8000a64 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e262      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x2d0>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d060      	beq.n	8001454 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x310>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d119      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d116      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x328>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e23f      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b76      	ldr	r3, [pc, #472]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4973      	ldr	r1, [pc, #460]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	e040      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d023      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013da:	4b6f      	ldr	r3, [pc, #444]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6e      	ldr	r2, [pc, #440]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb3d 	bl	8000a64 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb39 	bl	8000a64 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e21d      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	495f      	ldr	r1, [pc, #380]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fb19 	bl	8000a64 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fb15 	bl	8000a64 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1f9      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03c      	beq.n	80014da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff faf4 	bl	8000a64 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff faf0 	bl	8000a64 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1d4      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ef      	beq.n	8001480 <HAL_RCC_OscConfig+0x3ec>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fad7 	bl	8000a64 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fad3 	bl	8000a64 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1b7      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ef      	bne.n	80014ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a6 	beq.w	8001634 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001510:	2301      	movs	r3, #1
 8001512:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152c:	f7ff fa9a 	bl	8000a64 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fa96 	bl	8000a64 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e17a      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x4d8>
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156a:	e029      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d115      	bne.n	80015a0 <HAL_RCC_OscConfig+0x50c>
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a9b      	ldr	r2, [pc, #620]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b0:	4b98      	ldr	r3, [pc, #608]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a97      	ldr	r2, [pc, #604]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fa4c 	bl	8000a64 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fa48 	bl	8000a64 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e12a      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ed      	beq.n	80015d0 <HAL_RCC_OscConfig+0x53c>
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa35 	bl	8000a64 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fa31 	bl	8000a64 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e113      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001614:	4b7f      	ldr	r3, [pc, #508]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	4a79      	ldr	r2, [pc, #484]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001632:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80fe 	beq.w	800183a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	2b02      	cmp	r3, #2
 8001644:	f040 80d0 	bne.w	80017e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001648:	4b72      	ldr	r3, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	429a      	cmp	r2, r3
 800165a:	d130      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	3b01      	subs	r3, #1
 8001668:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d127      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001678:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11f      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001688:	2a07      	cmp	r2, #7
 800168a:	bf14      	ite	ne
 800168c:	2201      	movne	r2, #1
 800168e:	2200      	moveq	r2, #0
 8001690:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d109      	bne.n	80016be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d06e      	beq.n	800179c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d069      	beq.n	8001798 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016d0:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0ad      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80016e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ec:	f7ff f9ba 	bl	8000a64 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f9b6 	bl	8000a64 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e09a      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001712:	4b40      	ldr	r3, [pc, #256]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001722:	3a01      	subs	r2, #1
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800172c:	0212      	lsls	r2, r2, #8
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001734:	0852      	lsrs	r2, r2, #1
 8001736:	3a01      	subs	r2, #1
 8001738:	0552      	lsls	r2, r2, #21
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001740:	0852      	lsrs	r2, r2, #1
 8001742:	3a01      	subs	r2, #1
 8001744:	0652      	lsls	r2, r2, #25
 8001746:	4311      	orrs	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800174c:	0912      	lsrs	r2, r2, #4
 800174e:	0452      	lsls	r2, r2, #17
 8001750:	430a      	orrs	r2, r1
 8001752:	4930      	ldr	r1, [pc, #192]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001758:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001764:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a2a      	ldr	r2, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001770:	f7ff f978 	bl	8000a64 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f974 	bl	8000a64 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e058      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001796:	e050      	b.n	800183a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e04f      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d148      	bne.n	800183a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017c0:	f7ff f950 	bl	8000a64 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f94c 	bl	8000a64 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e030      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x734>
 80017e6:	e028      	b.n	800183a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d023      	beq.n	8001836 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x780>)
 80017f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff f933 	bl	8000a64 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001800:	e00c      	b.n	800181c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f92f 	bl	8000a64 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d905      	bls.n	800181c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
 8001814:	40021000 	.word	0x40021000
 8001818:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_RCC_OscConfig+0x7b0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ec      	bne.n	8001802 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_RCC_OscConfig+0x7b0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4905      	ldr	r1, [pc, #20]	@ (8001844 <HAL_RCC_OscConfig+0x7b0>)
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_RCC_OscConfig+0x7b4>)
 8001830:	4013      	ands	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e001      	b.n	800183a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	feeefffc 	.word	0xfeeefffc

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0e7      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b75      	ldr	r3, [pc, #468]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d910      	bls.n	8001890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b72      	ldr	r3, [pc, #456]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4970      	ldr	r1, [pc, #448]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cf      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d010      	beq.n	80018be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d908      	bls.n	80018be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b63      	ldr	r3, [pc, #396]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4960      	ldr	r1, [pc, #384]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d04c      	beq.n	8001964 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d121      	bne.n	8001922 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0a6      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ea:	4b54      	ldr	r3, [pc, #336]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e09a      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001902:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e08e      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001912:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e086      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4943      	ldr	r1, [pc, #268]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001934:	f7ff f896 	bl	8000a64 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f892 	bl	8000a64 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e06e      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800197c:	429a      	cmp	r2, r3
 800197e:	d208      	bcs.n	8001992 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	492b      	ldr	r1, [pc, #172]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4b29      	ldr	r3, [pc, #164]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d210      	bcs.n	80019c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 0207 	bic.w	r2, r3, #7
 80019a8:	4923      	ldr	r1, [pc, #140]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_RCC_ClockConfig+0x1ec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e036      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	4918      	ldr	r1, [pc, #96]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4910      	ldr	r1, [pc, #64]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a00:	f000 f824 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	490b      	ldr	r1, [pc, #44]	@ (8001a40 <HAL_RCC_ClockConfig+0x1f4>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_RCC_ClockConfig+0x1fc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe ffcd 	bl	80009c4 <HAL_InitTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08004480 	.word	0x08004480
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a64:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x34>
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d121      	bne.n	8001abe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d11e      	bne.n	8001abe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e005      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	e004      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ad2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d134      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d003      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0xac>
 8001af0:	e005      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001af4:	617b      	str	r3, [r7, #20]
      break;
 8001af6:	e005      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001afa:	617b      	str	r3, [r7, #20]
      break;
 8001afc:	e002      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	617b      	str	r3, [r7, #20]
      break;
 8001b02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	3301      	adds	r3, #1
 8001b10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	fb03 f202 	mul.w	r2, r3, r2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	0e5b      	lsrs	r3, r3, #25
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	3301      	adds	r3, #1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b44:	69bb      	ldr	r3, [r7, #24]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	@ 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08004498 	.word	0x08004498
 8001b5c:	00f42400 	.word	0x00f42400
 8001b60:	007a1200 	.word	0x007a1200

08001b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b80:	f7ff fff0 	bl	8001b64 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4904      	ldr	r1, [pc, #16]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08004490 	.word	0x08004490

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bac:	f7ff ffda 	bl	8001b64 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0adb      	lsrs	r3, r3, #11
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4904      	ldr	r1, [pc, #16]	@ (8001bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004490 	.word	0x08004490

08001bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bec:	f7ff f9ee 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001bf0:	6178      	str	r0, [r7, #20]
 8001bf2:	e014      	b.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	4a24      	ldr	r2, [pc, #144]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c0c:	f7ff f9de 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c16:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c24:	d10b      	bne.n	8001c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b80      	cmp	r3, #128	@ 0x80
 8001c2a:	d919      	bls.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c30:	d902      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c32:	2302      	movs	r3, #2
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e013      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	e010      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b80      	cmp	r3, #128	@ 0x80
 8001c42:	d902      	bls.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c44:	2303      	movs	r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e00a      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	@ 0x80
 8001c4e:	d102      	bne.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e004      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b70      	cmp	r3, #112	@ 0x70
 8001c5a:	d101      	bne.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 0207 	bic.w	r2, r3, #7
 8001c68:	4909      	ldr	r1, [pc, #36]	@ (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d041      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cb8:	d02a      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cbe:	d824      	bhi.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cc4:	d008      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cca:	d81e      	bhi.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cd6:	e018      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cd8:	4b86      	ldr	r3, [pc, #536]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a85      	ldr	r2, [pc, #532]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce4:	e015      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fabb 	bl	8002268 <RCCEx_PLLSAI1_Config>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf6:	e00c      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fba6 	bl	8002450 <RCCEx_PLLSAI2_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d08:	e003      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d0e:	e000      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d18:	4b76      	ldr	r3, [pc, #472]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d26:	4973      	ldr	r1, [pc, #460]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d2e:	e001      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d041      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d48:	d02a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d4e:	d824      	bhi.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d54:	d008      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d5a:	d81e      	bhi.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d010      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d66:	e018      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d68:	4b62      	ldr	r3, [pc, #392]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a61      	ldr	r2, [pc, #388]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d74:	e015      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa73 	bl	8002268 <RCCEx_PLLSAI1_Config>
 8001d82:	4603      	mov	r3, r0
 8001d84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d86:	e00c      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fb5e 	bl	8002450 <RCCEx_PLLSAI2_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d98:	e003      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d9e:	e000      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001da2:	7cfb      	ldrb	r3, [r7, #19]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001da8:	4b52      	ldr	r3, [pc, #328]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001db6:	494f      	ldr	r1, [pc, #316]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dbe:	e001      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc0:	7cfb      	ldrb	r3, [r7, #19]
 8001dc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a0 	beq.w	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b41      	ldr	r3, [pc, #260]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	4a40      	ldr	r2, [pc, #256]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e14:	f7fe fe26 	bl	8000a64 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe fe22 	bl	8000a64 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d902      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e2e:	e005      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ef      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d15c      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01f      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d019      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	4a20      	ldr	r2, [pc, #128]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d016      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fde1 	bl	8000a64 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea4:	e00b      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fddd 	bl	8000a64 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d902      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	74fb      	strb	r3, [r7, #19]
            break;
 8001ebc:	e006      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ec      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ee2:	4904      	ldr	r1, [pc, #16]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001eea:	e009      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
 8001ef0:	e006      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f00:	7c7b      	ldrb	r3, [r7, #17]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b9e      	ldr	r3, [pc, #632]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4a9d      	ldr	r2, [pc, #628]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f1e:	4b98      	ldr	r3, [pc, #608]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f24:	f023 0203 	bic.w	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2c:	4994      	ldr	r1, [pc, #592]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f40:	4b8f      	ldr	r3, [pc, #572]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f46:	f023 020c 	bic.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f4e:	498c      	ldr	r1, [pc, #560]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f62:	4b87      	ldr	r3, [pc, #540]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	4983      	ldr	r1, [pc, #524]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f84:	4b7e      	ldr	r3, [pc, #504]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	497b      	ldr	r1, [pc, #492]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fa6:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb4:	4972      	ldr	r1, [pc, #456]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	496a      	ldr	r1, [pc, #424]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fea:	4b65      	ldr	r3, [pc, #404]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	4961      	ldr	r1, [pc, #388]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800200c:	4b5c      	ldr	r3, [pc, #368]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4959      	ldr	r1, [pc, #356]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202e:	4b54      	ldr	r3, [pc, #336]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002034:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203c:	4950      	ldr	r1, [pc, #320]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002050:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	4948      	ldr	r1, [pc, #288]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002078:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	493f      	ldr	r1, [pc, #252]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d028      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002094:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a31      	ldr	r2, [pc, #196]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020be:	60d3      	str	r3, [r2, #12]
 80020c0:	e011      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f8c8 	bl	8002268 <RCCEx_PLLSAI1_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d028      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	491f      	ldr	r1, [pc, #124]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002110:	d106      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a1a      	ldr	r2, [pc, #104]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211c:	60d3      	str	r3, [r2, #12]
 800211e:	e011      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002128:	d10c      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f899 	bl	8002268 <RCCEx_PLLSAI1_Config>
 8002136:	4603      	mov	r3, r0
 8002138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02b      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800216e:	d109      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a02      	ldr	r2, [pc, #8]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800217a:	60d3      	str	r3, [r2, #12]
 800217c:	e014      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f867 	bl	8002268 <RCCEx_PLLSAI1_Config>
 800219a:	4603      	mov	r3, r0
 800219c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02f      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021c2:	4928      	ldr	r1, [pc, #160]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f844 	bl	8002268 <RCCEx_PLLSAI1_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d014      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	74bb      	strb	r3, [r7, #18]
 80021ee:	e011      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3320      	adds	r3, #32
 80021fe:	2102      	movs	r1, #2
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f925 	bl	8002450 <RCCEx_PLLSAI2_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002220:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800222e:	490d      	ldr	r1, [pc, #52]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002252:	4904      	ldr	r1, [pc, #16]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800225a:	7cbb      	ldrb	r3, [r7, #18]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000

08002268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002276:	4b75      	ldr	r3, [pc, #468]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d018      	beq.n	80022b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002282:	4b72      	ldr	r3, [pc, #456]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0203 	and.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d10d      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
       ||
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800229a:	4b6c      	ldr	r3, [pc, #432]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
       ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d047      	beq.n	800233e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e044      	b.n	800233e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d018      	beq.n	80022ee <RCCEx_PLLSAI1_Config+0x86>
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d825      	bhi.n	800230c <RCCEx_PLLSAI1_Config+0xa4>
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d002      	beq.n	80022ca <RCCEx_PLLSAI1_Config+0x62>
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d009      	beq.n	80022dc <RCCEx_PLLSAI1_Config+0x74>
 80022c8:	e020      	b.n	800230c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ca:	4b60      	ldr	r3, [pc, #384]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11d      	bne.n	8002312 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022da:	e01a      	b.n	8002312 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022dc:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ec:	e013      	b.n	8002316 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ee:	4b57      	ldr	r3, [pc, #348]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800230a:	e006      	b.n	800231a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      break;
 8002310:	e004      	b.n	800231c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800231a:	bf00      	nop
    }

    if(status == HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	430b      	orrs	r3, r1
 8002338:	4944      	ldr	r1, [pc, #272]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d17d      	bne.n	8002440 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002344:	4b41      	ldr	r3, [pc, #260]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a40      	ldr	r2, [pc, #256]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 800234a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800234e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002350:	f7fe fb88 	bl	8000a64 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002356:	e009      	b.n	800236c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002358:	f7fe fb84 	bl	8000a64 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d902      	bls.n	800236c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	73fb      	strb	r3, [r7, #15]
        break;
 800236a:	e005      	b.n	8002378 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800236c:	4b37      	ldr	r3, [pc, #220]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ef      	bne.n	8002358 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d160      	bne.n	8002440 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002384:	4b31      	ldr	r3, [pc, #196]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800238c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6892      	ldr	r2, [r2, #8]
 8002394:	0211      	lsls	r1, r2, #8
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	0912      	lsrs	r2, r2, #4
 800239c:	0452      	lsls	r2, r2, #17
 800239e:	430a      	orrs	r2, r1
 80023a0:	492a      	ldr	r1, [pc, #168]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	610b      	str	r3, [r1, #16]
 80023a6:	e027      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d112      	bne.n	80023d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ae:	4b27      	ldr	r3, [pc, #156]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6892      	ldr	r2, [r2, #8]
 80023be:	0211      	lsls	r1, r2, #8
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6912      	ldr	r2, [r2, #16]
 80023c4:	0852      	lsrs	r2, r2, #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0552      	lsls	r2, r2, #21
 80023ca:	430a      	orrs	r2, r1
 80023cc:	491f      	ldr	r1, [pc, #124]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	610b      	str	r3, [r1, #16]
 80023d2:	e011      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6892      	ldr	r2, [r2, #8]
 80023e4:	0211      	lsls	r1, r2, #8
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6952      	ldr	r2, [r2, #20]
 80023ea:	0852      	lsrs	r2, r2, #1
 80023ec:	3a01      	subs	r2, #1
 80023ee:	0652      	lsls	r2, r2, #25
 80023f0:	430a      	orrs	r2, r1
 80023f2:	4916      	ldr	r1, [pc, #88]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a13      	ldr	r2, [pc, #76]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002402:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fe fb2e 	bl	8000a64 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800240a:	e009      	b.n	8002420 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800240c:	f7fe fb2a 	bl	8000a64 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d902      	bls.n	8002420 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	73fb      	strb	r3, [r7, #15]
          break;
 800241e:	e005      	b.n	800242c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4904      	ldr	r1, [pc, #16]	@ (800244c <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800245e:	4b6a      	ldr	r3, [pc, #424]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d018      	beq.n	800249c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800246a:	4b67      	ldr	r3, [pc, #412]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
       ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002482:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
       ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d047      	beq.n	8002526 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d018      	beq.n	80024d6 <RCCEx_PLLSAI2_Config+0x86>
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d825      	bhi.n	80024f4 <RCCEx_PLLSAI2_Config+0xa4>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <RCCEx_PLLSAI2_Config+0x62>
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d009      	beq.n	80024c4 <RCCEx_PLLSAI2_Config+0x74>
 80024b0:	e020      	b.n	80024f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024b2:	4b55      	ldr	r3, [pc, #340]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c2:	e01a      	b.n	80024fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024c4:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e013      	b.n	80024fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024f2:	e006      	b.n	8002502 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e004      	b.n	8002504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002502:	bf00      	nop
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800250a:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	430b      	orrs	r3, r1
 8002520:	4939      	ldr	r1, [pc, #228]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d167      	bne.n	80025fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800252c:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a35      	ldr	r2, [pc, #212]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe fa94 	bl	8000a64 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002540:	f7fe fa90 	bl	8000a64 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
        break;
 8002552:	e005      	b.n	8002560 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ef      	bne.n	8002540 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d14a      	bne.n	80025fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0912      	lsrs	r2, r2, #4
 8002584:	0452      	lsls	r2, r2, #17
 8002586:	430a      	orrs	r2, r1
 8002588:	491f      	ldr	r1, [pc, #124]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	614b      	str	r3, [r1, #20]
 800258e:	e011      	b.n	80025b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002598:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6892      	ldr	r2, [r2, #8]
 80025a0:	0211      	lsls	r1, r2, #8
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6912      	ldr	r2, [r2, #16]
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0652      	lsls	r2, r2, #25
 80025ac:	430a      	orrs	r2, r1
 80025ae:	4916      	ldr	r1, [pc, #88]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a13      	ldr	r2, [pc, #76]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fa50 	bl	8000a64 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025c6:	e009      	b.n	80025dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025c8:	f7fe fa4c 	bl	8000a64 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d902      	bls.n	80025dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	73fb      	strb	r3, [r7, #15]
          break;
 80025da:	e005      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4904      	ldr	r1, [pc, #16]	@ (8002608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e040      	b.n	80026a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f8e0 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	@ 0x24
 8002638:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fae0 	bl	8002c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f825 	bl	80026a8 <UART_SetConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01b      	b.n	80026a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fb5f 	bl	8002d5c <UART_CheckIdleState>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ac:	b08a      	sub	sp, #40	@ 0x28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4ba4      	ldr	r3, [pc, #656]	@ (8002968 <UART_SetConfig+0x2c0>)
 80026d8:	4013      	ands	r3, r2
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a99      	ldr	r2, [pc, #612]	@ (800296c <UART_SetConfig+0x2c4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002710:	4313      	orrs	r3, r2
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a90      	ldr	r2, [pc, #576]	@ (8002970 <UART_SetConfig+0x2c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d126      	bne.n	8002780 <UART_SetConfig+0xd8>
 8002732:	4b90      	ldr	r3, [pc, #576]	@ (8002974 <UART_SetConfig+0x2cc>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b03      	cmp	r3, #3
 800273e:	d81b      	bhi.n	8002778 <UART_SetConfig+0xd0>
 8002740:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <UART_SetConfig+0xa0>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	08002769 	.word	0x08002769
 8002750:	08002761 	.word	0x08002761
 8002754:	08002771 	.word	0x08002771
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800275e:	e116      	b.n	800298e <UART_SetConfig+0x2e6>
 8002760:	2302      	movs	r3, #2
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002766:	e112      	b.n	800298e <UART_SetConfig+0x2e6>
 8002768:	2304      	movs	r3, #4
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800276e:	e10e      	b.n	800298e <UART_SetConfig+0x2e6>
 8002770:	2308      	movs	r3, #8
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002776:	e10a      	b.n	800298e <UART_SetConfig+0x2e6>
 8002778:	2310      	movs	r3, #16
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800277e:	e106      	b.n	800298e <UART_SetConfig+0x2e6>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a7c      	ldr	r2, [pc, #496]	@ (8002978 <UART_SetConfig+0x2d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d138      	bne.n	80027fc <UART_SetConfig+0x154>
 800278a:	4b7a      	ldr	r3, [pc, #488]	@ (8002974 <UART_SetConfig+0x2cc>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d82d      	bhi.n	80027f4 <UART_SetConfig+0x14c>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <UART_SetConfig+0xf8>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027d5 	.word	0x080027d5
 80027a4:	080027f5 	.word	0x080027f5
 80027a8:	080027f5 	.word	0x080027f5
 80027ac:	080027f5 	.word	0x080027f5
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	080027f5 	.word	0x080027f5
 80027b8:	080027f5 	.word	0x080027f5
 80027bc:	080027f5 	.word	0x080027f5
 80027c0:	080027dd 	.word	0x080027dd
 80027c4:	080027f5 	.word	0x080027f5
 80027c8:	080027f5 	.word	0x080027f5
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	080027ed 	.word	0x080027ed
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027da:	e0d8      	b.n	800298e <UART_SetConfig+0x2e6>
 80027dc:	2302      	movs	r3, #2
 80027de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027e2:	e0d4      	b.n	800298e <UART_SetConfig+0x2e6>
 80027e4:	2304      	movs	r3, #4
 80027e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ea:	e0d0      	b.n	800298e <UART_SetConfig+0x2e6>
 80027ec:	2308      	movs	r3, #8
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027f2:	e0cc      	b.n	800298e <UART_SetConfig+0x2e6>
 80027f4:	2310      	movs	r3, #16
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027fa:	e0c8      	b.n	800298e <UART_SetConfig+0x2e6>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <UART_SetConfig+0x2d4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d125      	bne.n	8002852 <UART_SetConfig+0x1aa>
 8002806:	4b5b      	ldr	r3, [pc, #364]	@ (8002974 <UART_SetConfig+0x2cc>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002810:	2b30      	cmp	r3, #48	@ 0x30
 8002812:	d016      	beq.n	8002842 <UART_SetConfig+0x19a>
 8002814:	2b30      	cmp	r3, #48	@ 0x30
 8002816:	d818      	bhi.n	800284a <UART_SetConfig+0x1a2>
 8002818:	2b20      	cmp	r3, #32
 800281a:	d00a      	beq.n	8002832 <UART_SetConfig+0x18a>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d814      	bhi.n	800284a <UART_SetConfig+0x1a2>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <UART_SetConfig+0x182>
 8002824:	2b10      	cmp	r3, #16
 8002826:	d008      	beq.n	800283a <UART_SetConfig+0x192>
 8002828:	e00f      	b.n	800284a <UART_SetConfig+0x1a2>
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002830:	e0ad      	b.n	800298e <UART_SetConfig+0x2e6>
 8002832:	2302      	movs	r3, #2
 8002834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002838:	e0a9      	b.n	800298e <UART_SetConfig+0x2e6>
 800283a:	2304      	movs	r3, #4
 800283c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002840:	e0a5      	b.n	800298e <UART_SetConfig+0x2e6>
 8002842:	2308      	movs	r3, #8
 8002844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002848:	e0a1      	b.n	800298e <UART_SetConfig+0x2e6>
 800284a:	2310      	movs	r3, #16
 800284c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002850:	e09d      	b.n	800298e <UART_SetConfig+0x2e6>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <UART_SetConfig+0x2d8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d125      	bne.n	80028a8 <UART_SetConfig+0x200>
 800285c:	4b45      	ldr	r3, [pc, #276]	@ (8002974 <UART_SetConfig+0x2cc>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002866:	2bc0      	cmp	r3, #192	@ 0xc0
 8002868:	d016      	beq.n	8002898 <UART_SetConfig+0x1f0>
 800286a:	2bc0      	cmp	r3, #192	@ 0xc0
 800286c:	d818      	bhi.n	80028a0 <UART_SetConfig+0x1f8>
 800286e:	2b80      	cmp	r3, #128	@ 0x80
 8002870:	d00a      	beq.n	8002888 <UART_SetConfig+0x1e0>
 8002872:	2b80      	cmp	r3, #128	@ 0x80
 8002874:	d814      	bhi.n	80028a0 <UART_SetConfig+0x1f8>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <UART_SetConfig+0x1d8>
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d008      	beq.n	8002890 <UART_SetConfig+0x1e8>
 800287e:	e00f      	b.n	80028a0 <UART_SetConfig+0x1f8>
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002886:	e082      	b.n	800298e <UART_SetConfig+0x2e6>
 8002888:	2302      	movs	r3, #2
 800288a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288e:	e07e      	b.n	800298e <UART_SetConfig+0x2e6>
 8002890:	2304      	movs	r3, #4
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002896:	e07a      	b.n	800298e <UART_SetConfig+0x2e6>
 8002898:	2308      	movs	r3, #8
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289e:	e076      	b.n	800298e <UART_SetConfig+0x2e6>
 80028a0:	2310      	movs	r3, #16
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a6:	e072      	b.n	800298e <UART_SetConfig+0x2e6>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a35      	ldr	r2, [pc, #212]	@ (8002984 <UART_SetConfig+0x2dc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12a      	bne.n	8002908 <UART_SetConfig+0x260>
 80028b2:	4b30      	ldr	r3, [pc, #192]	@ (8002974 <UART_SetConfig+0x2cc>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028c0:	d01a      	beq.n	80028f8 <UART_SetConfig+0x250>
 80028c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028c6:	d81b      	bhi.n	8002900 <UART_SetConfig+0x258>
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028cc:	d00c      	beq.n	80028e8 <UART_SetConfig+0x240>
 80028ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028d2:	d815      	bhi.n	8002900 <UART_SetConfig+0x258>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <UART_SetConfig+0x238>
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028dc:	d008      	beq.n	80028f0 <UART_SetConfig+0x248>
 80028de:	e00f      	b.n	8002900 <UART_SetConfig+0x258>
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e6:	e052      	b.n	800298e <UART_SetConfig+0x2e6>
 80028e8:	2302      	movs	r3, #2
 80028ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ee:	e04e      	b.n	800298e <UART_SetConfig+0x2e6>
 80028f0:	2304      	movs	r3, #4
 80028f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f6:	e04a      	b.n	800298e <UART_SetConfig+0x2e6>
 80028f8:	2308      	movs	r3, #8
 80028fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fe:	e046      	b.n	800298e <UART_SetConfig+0x2e6>
 8002900:	2310      	movs	r3, #16
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002906:	e042      	b.n	800298e <UART_SetConfig+0x2e6>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <UART_SetConfig+0x2c4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d13a      	bne.n	8002988 <UART_SetConfig+0x2e0>
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <UART_SetConfig+0x2cc>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002918:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800291c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002920:	d01a      	beq.n	8002958 <UART_SetConfig+0x2b0>
 8002922:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002926:	d81b      	bhi.n	8002960 <UART_SetConfig+0x2b8>
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800292c:	d00c      	beq.n	8002948 <UART_SetConfig+0x2a0>
 800292e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002932:	d815      	bhi.n	8002960 <UART_SetConfig+0x2b8>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <UART_SetConfig+0x298>
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293c:	d008      	beq.n	8002950 <UART_SetConfig+0x2a8>
 800293e:	e00f      	b.n	8002960 <UART_SetConfig+0x2b8>
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002946:	e022      	b.n	800298e <UART_SetConfig+0x2e6>
 8002948:	2302      	movs	r3, #2
 800294a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294e:	e01e      	b.n	800298e <UART_SetConfig+0x2e6>
 8002950:	2304      	movs	r3, #4
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002956:	e01a      	b.n	800298e <UART_SetConfig+0x2e6>
 8002958:	2308      	movs	r3, #8
 800295a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295e:	e016      	b.n	800298e <UART_SetConfig+0x2e6>
 8002960:	2310      	movs	r3, #16
 8002962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002966:	e012      	b.n	800298e <UART_SetConfig+0x2e6>
 8002968:	efff69f3 	.word	0xefff69f3
 800296c:	40008000 	.word	0x40008000
 8002970:	40013800 	.word	0x40013800
 8002974:	40021000 	.word	0x40021000
 8002978:	40004400 	.word	0x40004400
 800297c:	40004800 	.word	0x40004800
 8002980:	40004c00 	.word	0x40004c00
 8002984:	40005000 	.word	0x40005000
 8002988:	2310      	movs	r3, #16
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a9f      	ldr	r2, [pc, #636]	@ (8002c10 <UART_SetConfig+0x568>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d17a      	bne.n	8002a8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002998:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800299c:	2b08      	cmp	r3, #8
 800299e:	d824      	bhi.n	80029ea <UART_SetConfig+0x342>
 80029a0:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <UART_SetConfig+0x300>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	080029eb 	.word	0x080029eb
 80029b0:	080029d5 	.word	0x080029d5
 80029b4:	080029eb 	.word	0x080029eb
 80029b8:	080029db 	.word	0x080029db
 80029bc:	080029eb 	.word	0x080029eb
 80029c0:	080029eb 	.word	0x080029eb
 80029c4:	080029eb 	.word	0x080029eb
 80029c8:	080029e3 	.word	0x080029e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029cc:	f7ff f8d6 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 80029d0:	61f8      	str	r0, [r7, #28]
        break;
 80029d2:	e010      	b.n	80029f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c14 <UART_SetConfig+0x56c>)
 80029d6:	61fb      	str	r3, [r7, #28]
        break;
 80029d8:	e00d      	b.n	80029f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029da:	f7ff f837 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 80029de:	61f8      	str	r0, [r7, #28]
        break;
 80029e0:	e009      	b.n	80029f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029e6:	61fb      	str	r3, [r7, #28]
        break;
 80029e8:	e005      	b.n	80029f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80029f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80fb 	beq.w	8002bf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d305      	bcc.n	8002a1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d903      	bls.n	8002a22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a20:	e0e8      	b.n	8002bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2200      	movs	r2, #0
 8002a26:	461c      	mov	r4, r3
 8002a28:	4615      	mov	r5, r2
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	022b      	lsls	r3, r5, #8
 8002a34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a38:	0222      	lsls	r2, r4, #8
 8002a3a:	68f9      	ldr	r1, [r7, #12]
 8002a3c:	6849      	ldr	r1, [r1, #4]
 8002a3e:	0849      	lsrs	r1, r1, #1
 8002a40:	2000      	movs	r0, #0
 8002a42:	4688      	mov	r8, r1
 8002a44:	4681      	mov	r9, r0
 8002a46:	eb12 0a08 	adds.w	sl, r2, r8
 8002a4a:	eb43 0b09 	adc.w	fp, r3, r9
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5c:	4650      	mov	r0, sl
 8002a5e:	4659      	mov	r1, fp
 8002a60:	f7fd fbb2 	bl	80001c8 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a72:	d308      	bcc.n	8002a86 <UART_SetConfig+0x3de>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a7a:	d204      	bcs.n	8002a86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	e0b6      	b.n	8002bf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a8c:	e0b2      	b.n	8002bf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a96:	d15e      	bne.n	8002b56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d828      	bhi.n	8002af2 <UART_SetConfig+0x44a>
 8002aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <UART_SetConfig+0x400>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002acd 	.word	0x08002acd
 8002aac:	08002ad5 	.word	0x08002ad5
 8002ab0:	08002add 	.word	0x08002add
 8002ab4:	08002af3 	.word	0x08002af3
 8002ab8:	08002ae3 	.word	0x08002ae3
 8002abc:	08002af3 	.word	0x08002af3
 8002ac0:	08002af3 	.word	0x08002af3
 8002ac4:	08002af3 	.word	0x08002af3
 8002ac8:	08002aeb 	.word	0x08002aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7ff f856 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002ad0:	61f8      	str	r0, [r7, #28]
        break;
 8002ad2:	e014      	b.n	8002afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad4:	f7ff f868 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002ad8:	61f8      	str	r0, [r7, #28]
        break;
 8002ada:	e010      	b.n	8002afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002adc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <UART_SetConfig+0x56c>)
 8002ade:	61fb      	str	r3, [r7, #28]
        break;
 8002ae0:	e00d      	b.n	8002afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae2:	f7fe ffb3 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8002ae6:	61f8      	str	r0, [r7, #28]
        break;
 8002ae8:	e009      	b.n	8002afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aee:	61fb      	str	r3, [r7, #28]
        break;
 8002af0:	e005      	b.n	8002afe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d077      	beq.n	8002bf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005a      	lsls	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	441a      	add	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	d916      	bls.n	8002b4e <UART_SetConfig+0x4a6>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b26:	d212      	bcs.n	8002b4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f023 030f 	bic.w	r3, r3, #15
 8002b30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	8afa      	ldrh	r2, [r7, #22]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e052      	b.n	8002bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b54:	e04e      	b.n	8002bf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d827      	bhi.n	8002bae <UART_SetConfig+0x506>
 8002b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <UART_SetConfig+0x4bc>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b99 	.word	0x08002b99
 8002b70:	08002baf 	.word	0x08002baf
 8002b74:	08002b9f 	.word	0x08002b9f
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002baf 	.word	0x08002baf
 8002b80:	08002baf 	.word	0x08002baf
 8002b84:	08002ba7 	.word	0x08002ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7fe fff8 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002b8c:	61f8      	str	r0, [r7, #28]
        break;
 8002b8e:	e014      	b.n	8002bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7ff f80a 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002b94:	61f8      	str	r0, [r7, #28]
        break;
 8002b96:	e010      	b.n	8002bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <UART_SetConfig+0x56c>)
 8002b9a:	61fb      	str	r3, [r7, #28]
        break;
 8002b9c:	e00d      	b.n	8002bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7fe ff55 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8002ba2:	61f8      	str	r0, [r7, #28]
        break;
 8002ba4:	e009      	b.n	8002bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002baa:	61fb      	str	r3, [r7, #28]
        break;
 8002bac:	e005      	b.n	8002bba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bb8:	bf00      	nop
    }

    if (pclk != 0U)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	085a      	lsrs	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	441a      	add	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	d909      	bls.n	8002bee <UART_SetConfig+0x546>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d205      	bcs.n	8002bee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	e002      	b.n	8002bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	@ 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40008000 	.word	0x40008000
 8002c14:	00f42400 	.word	0x00f42400

08002c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d10a      	bne.n	8002d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b098      	sub	sp, #96	@ 0x60
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d6c:	f7fd fe7a 	bl	8000a64 <HAL_GetTick>
 8002d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d12e      	bne.n	8002dde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f88c 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e6      	bne.n	8002d9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e062      	b.n	8002ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d149      	bne.n	8002e80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f856 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	623b      	str	r3, [r7, #32]
   return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e6      	bne.n	8002e06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3308      	adds	r3, #8
 8002e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e58:	61fa      	str	r2, [r7, #28]
 8002e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	617b      	str	r3, [r7, #20]
   return(result);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e011      	b.n	8002ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3758      	adds	r7, #88	@ 0x58
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	e04f      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec4:	d04b      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fd fdcd 	bl	8000a64 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e04e      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d037      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b80      	cmp	r3, #128	@ 0x80
 8002ef2:	d034      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d031      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d110      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f838 	bl	8002f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e029      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d111      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f81e 	bl	8002f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e00f      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d0a0      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b095      	sub	sp, #84	@ 0x54
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e6      	bne.n	8002f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e5      	bne.n	8002fc0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d118      	bne.n	800302e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	60bb      	str	r3, [r7, #8]
   return(result);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f023 0310 	bic.w	r3, r3, #16
 8003010:	647b      	str	r3, [r7, #68]	@ 0x44
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	613b      	str	r3, [r7, #16]
   return(result);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e6      	bne.n	8002ffc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003042:	bf00      	nop
 8003044:	3754      	adds	r7, #84	@ 0x54
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <arm_rfft_32_fast_init_f32>:
 8003050:	b178      	cbz	r0, 8003072 <arm_rfft_32_fast_init_f32+0x22>
 8003052:	b430      	push	{r4, r5}
 8003054:	4908      	ldr	r1, [pc, #32]	@ (8003078 <arm_rfft_32_fast_init_f32+0x28>)
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <arm_rfft_32_fast_init_f32+0x2c>)
 8003058:	2310      	movs	r3, #16
 800305a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800305e:	8003      	strh	r3, [r0, #0]
 8003060:	2520      	movs	r5, #32
 8003062:	2414      	movs	r4, #20
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <arm_rfft_32_fast_init_f32+0x30>)
 8003066:	8205      	strh	r5, [r0, #16]
 8003068:	8184      	strh	r4, [r0, #12]
 800306a:	6143      	str	r3, [r0, #20]
 800306c:	bc30      	pop	{r4, r5}
 800306e:	2000      	movs	r0, #0
 8003070:	4770      	bx	lr
 8003072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003076:	4770      	bx	lr
 8003078:	08005478 	.word	0x08005478
 800307c:	0800a5b4 	.word	0x0800a5b4
 8003080:	08013334 	.word	0x08013334

08003084 <arm_rfft_64_fast_init_f32>:
 8003084:	b178      	cbz	r0, 80030a6 <arm_rfft_64_fast_init_f32+0x22>
 8003086:	b430      	push	{r4, r5}
 8003088:	4908      	ldr	r1, [pc, #32]	@ (80030ac <arm_rfft_64_fast_init_f32+0x28>)
 800308a:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <arm_rfft_64_fast_init_f32+0x2c>)
 800308c:	2320      	movs	r3, #32
 800308e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003092:	8003      	strh	r3, [r0, #0]
 8003094:	2540      	movs	r5, #64	@ 0x40
 8003096:	2430      	movs	r4, #48	@ 0x30
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <arm_rfft_64_fast_init_f32+0x30>)
 800309a:	8205      	strh	r5, [r0, #16]
 800309c:	8184      	strh	r4, [r0, #12]
 800309e:	6143      	str	r3, [r0, #20]
 80030a0:	bc30      	pop	{r4, r5}
 80030a2:	2000      	movs	r0, #0
 80030a4:	4770      	bx	lr
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030aa:	4770      	bx	lr
 80030ac:	080075d0 	.word	0x080075d0
 80030b0:	0800ee34 	.word	0x0800ee34
 80030b4:	08017bb4 	.word	0x08017bb4

080030b8 <arm_rfft_256_fast_init_f32>:
 80030b8:	b180      	cbz	r0, 80030dc <arm_rfft_256_fast_init_f32+0x24>
 80030ba:	b430      	push	{r4, r5}
 80030bc:	4909      	ldr	r1, [pc, #36]	@ (80030e4 <arm_rfft_256_fast_init_f32+0x2c>)
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <arm_rfft_256_fast_init_f32+0x30>)
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80030c6:	8003      	strh	r3, [r0, #0]
 80030c8:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80030cc:	24d0      	movs	r4, #208	@ 0xd0
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <arm_rfft_256_fast_init_f32+0x34>)
 80030d0:	8205      	strh	r5, [r0, #16]
 80030d2:	8184      	strh	r4, [r0, #12]
 80030d4:	6143      	str	r3, [r0, #20]
 80030d6:	bc30      	pop	{r4, r5}
 80030d8:	2000      	movs	r0, #0
 80030da:	4770      	bx	lr
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	080052d8 	.word	0x080052d8
 80030e8:	0800a1b4 	.word	0x0800a1b4
 80030ec:	08012f34 	.word	0x08012f34

080030f0 <arm_rfft_512_fast_init_f32>:
 80030f0:	b190      	cbz	r0, 8003118 <arm_rfft_512_fast_init_f32+0x28>
 80030f2:	b430      	push	{r4, r5}
 80030f4:	490a      	ldr	r1, [pc, #40]	@ (8003120 <arm_rfft_512_fast_init_f32+0x30>)
 80030f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003124 <arm_rfft_512_fast_init_f32+0x34>)
 80030f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030fc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003100:	8003      	strh	r3, [r0, #0]
 8003102:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8003106:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <arm_rfft_512_fast_init_f32+0x38>)
 800310c:	8205      	strh	r5, [r0, #16]
 800310e:	8184      	strh	r4, [r0, #12]
 8003110:	6143      	str	r3, [r0, #20]
 8003112:	bc30      	pop	{r4, r5}
 8003114:	2000      	movs	r0, #0
 8003116:	4770      	bx	lr
 8003118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	08007260 	.word	0x08007260
 8003124:	0800e634 	.word	0x0800e634
 8003128:	080173b4 	.word	0x080173b4

0800312c <arm_rfft_1024_fast_init_f32>:
 800312c:	b190      	cbz	r0, 8003154 <arm_rfft_1024_fast_init_f32+0x28>
 800312e:	b430      	push	{r4, r5}
 8003130:	490a      	ldr	r1, [pc, #40]	@ (800315c <arm_rfft_1024_fast_init_f32+0x30>)
 8003132:	4a0b      	ldr	r2, [pc, #44]	@ (8003160 <arm_rfft_1024_fast_init_f32+0x34>)
 8003134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003138:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800313c:	8003      	strh	r3, [r0, #0]
 800313e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8003142:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <arm_rfft_1024_fast_init_f32+0x38>)
 8003148:	8205      	strh	r5, [r0, #16]
 800314a:	8184      	strh	r4, [r0, #12]
 800314c:	6143      	str	r3, [r0, #20]
 800314e:	bc30      	pop	{r4, r5}
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr
 8003154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	08007630 	.word	0x08007630
 8003160:	0800ef34 	.word	0x0800ef34
 8003164:	0800ff34 	.word	0x0800ff34

08003168 <arm_rfft_2048_fast_init_f32>:
 8003168:	b190      	cbz	r0, 8003190 <arm_rfft_2048_fast_init_f32+0x28>
 800316a:	b430      	push	{r4, r5}
 800316c:	490a      	ldr	r1, [pc, #40]	@ (8003198 <arm_rfft_2048_fast_init_f32+0x30>)
 800316e:	4a0b      	ldr	r2, [pc, #44]	@ (800319c <arm_rfft_2048_fast_init_f32+0x34>)
 8003170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003174:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003178:	8003      	strh	r3, [r0, #0]
 800317a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800317e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <arm_rfft_2048_fast_init_f32+0x38>)
 8003184:	8205      	strh	r5, [r0, #16]
 8003186:	8184      	strh	r4, [r0, #12]
 8003188:	6143      	str	r3, [r0, #20]
 800318a:	bc30      	pop	{r4, r5}
 800318c:	2000      	movs	r0, #0
 800318e:	4770      	bx	lr
 8003190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	080044c8 	.word	0x080044c8
 800319c:	080081b4 	.word	0x080081b4
 80031a0:	08010f34 	.word	0x08010f34

080031a4 <arm_rfft_4096_fast_init_f32>:
 80031a4:	b190      	cbz	r0, 80031cc <arm_rfft_4096_fast_init_f32+0x28>
 80031a6:	b430      	push	{r4, r5}
 80031a8:	490a      	ldr	r1, [pc, #40]	@ (80031d4 <arm_rfft_4096_fast_init_f32+0x30>)
 80031aa:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <arm_rfft_4096_fast_init_f32+0x34>)
 80031ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80031b4:	8003      	strh	r3, [r0, #0]
 80031b6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80031ba:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <arm_rfft_4096_fast_init_f32+0x38>)
 80031c0:	8205      	strh	r5, [r0, #16]
 80031c2:	8184      	strh	r4, [r0, #12]
 80031c4:	6143      	str	r3, [r0, #20]
 80031c6:	bc30      	pop	{r4, r5}
 80031c8:	2000      	movs	r0, #0
 80031ca:	4770      	bx	lr
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	080054a0 	.word	0x080054a0
 80031d8:	0800a634 	.word	0x0800a634
 80031dc:	080133b4 	.word	0x080133b4

080031e0 <arm_rfft_fast_init_f32>:
 80031e0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80031e4:	d01f      	beq.n	8003226 <arm_rfft_fast_init_f32+0x46>
 80031e6:	d90b      	bls.n	8003200 <arm_rfft_fast_init_f32+0x20>
 80031e8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80031ec:	d019      	beq.n	8003222 <arm_rfft_fast_init_f32+0x42>
 80031ee:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80031f2:	d012      	beq.n	800321a <arm_rfft_fast_init_f32+0x3a>
 80031f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80031f8:	d00d      	beq.n	8003216 <arm_rfft_fast_init_f32+0x36>
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031fe:	4770      	bx	lr
 8003200:	2940      	cmp	r1, #64	@ 0x40
 8003202:	d00c      	beq.n	800321e <arm_rfft_fast_init_f32+0x3e>
 8003204:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003208:	d003      	beq.n	8003212 <arm_rfft_fast_init_f32+0x32>
 800320a:	2920      	cmp	r1, #32
 800320c:	d1f5      	bne.n	80031fa <arm_rfft_fast_init_f32+0x1a>
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <arm_rfft_fast_init_f32+0x4c>)
 8003210:	4718      	bx	r3
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <arm_rfft_fast_init_f32+0x50>)
 8003214:	4718      	bx	r3
 8003216:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <arm_rfft_fast_init_f32+0x54>)
 8003218:	4718      	bx	r3
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <arm_rfft_fast_init_f32+0x58>)
 800321c:	4718      	bx	r3
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <arm_rfft_fast_init_f32+0x5c>)
 8003220:	e7f6      	b.n	8003210 <arm_rfft_fast_init_f32+0x30>
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <arm_rfft_fast_init_f32+0x60>)
 8003224:	e7f4      	b.n	8003210 <arm_rfft_fast_init_f32+0x30>
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <arm_rfft_fast_init_f32+0x64>)
 8003228:	e7f2      	b.n	8003210 <arm_rfft_fast_init_f32+0x30>
 800322a:	bf00      	nop
 800322c:	08003051 	.word	0x08003051
 8003230:	080030b9 	.word	0x080030b9
 8003234:	0800312d 	.word	0x0800312d
 8003238:	080031a5 	.word	0x080031a5
 800323c:	08003085 	.word	0x08003085
 8003240:	08003169 	.word	0x08003169
 8003244:	080030f1 	.word	0x080030f1

08003248 <stage_rfft_f32>:
 8003248:	b410      	push	{r4}
 800324a:	edd1 7a00 	vldr	s15, [r1]
 800324e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003252:	8804      	ldrh	r4, [r0, #0]
 8003254:	6940      	ldr	r0, [r0, #20]
 8003256:	ee37 7a07 	vadd.f32	s14, s14, s14
 800325a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800325e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8003262:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800326a:	3c01      	subs	r4, #1
 800326c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8003270:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003274:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8003278:	ed82 7a00 	vstr	s14, [r2]
 800327c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003280:	3010      	adds	r0, #16
 8003282:	3210      	adds	r2, #16
 8003284:	3b08      	subs	r3, #8
 8003286:	3110      	adds	r1, #16
 8003288:	ed11 5a02 	vldr	s10, [r1, #-8]
 800328c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003290:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003294:	edd3 4a03 	vldr	s9, [r3, #12]
 8003298:	ed51 7a01 	vldr	s15, [r1, #-4]
 800329c:	ed10 6a01 	vldr	s12, [r0, #-4]
 80032a0:	ee77 5a45 	vsub.f32	s11, s14, s10
 80032a4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80032a8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80032ac:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80032b0:	ee66 5a25 	vmul.f32	s11, s12, s11
 80032b4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80032b8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80032bc:	ee66 6a85 	vmul.f32	s13, s13, s10
 80032c0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80032c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80032c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80032cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80032d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80032d8:	3c01      	subs	r4, #1
 80032da:	ed02 7a02 	vstr	s14, [r2, #-8]
 80032de:	ed42 7a01 	vstr	s15, [r2, #-4]
 80032e2:	f1a3 0308 	sub.w	r3, r3, #8
 80032e6:	f101 0108 	add.w	r1, r1, #8
 80032ea:	f100 0008 	add.w	r0, r0, #8
 80032ee:	f102 0208 	add.w	r2, r2, #8
 80032f2:	d1c9      	bne.n	8003288 <stage_rfft_f32+0x40>
 80032f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <merge_rfft_f32>:
 80032fc:	b410      	push	{r4}
 80032fe:	edd1 7a00 	vldr	s15, [r1]
 8003302:	edd1 6a01 	vldr	s13, [r1, #4]
 8003306:	8804      	ldrh	r4, [r0, #0]
 8003308:	6940      	ldr	r0, [r0, #20]
 800330a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800330e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003312:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8003316:	ee27 7a04 	vmul.f32	s14, s14, s8
 800331a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800331e:	3c01      	subs	r4, #1
 8003320:	ed82 7a00 	vstr	s14, [r2]
 8003324:	edc2 7a01 	vstr	s15, [r2, #4]
 8003328:	b3dc      	cbz	r4, 80033a2 <merge_rfft_f32+0xa6>
 800332a:	00e3      	lsls	r3, r4, #3
 800332c:	3b08      	subs	r3, #8
 800332e:	440b      	add	r3, r1
 8003330:	3010      	adds	r0, #16
 8003332:	3210      	adds	r2, #16
 8003334:	3110      	adds	r1, #16
 8003336:	ed11 5a02 	vldr	s10, [r1, #-8]
 800333a:	ed93 7a02 	vldr	s14, [r3, #8]
 800333e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003342:	edd3 4a03 	vldr	s9, [r3, #12]
 8003346:	ed51 7a01 	vldr	s15, [r1, #-4]
 800334a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800334e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003352:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003356:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800335a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800335e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003362:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003366:	ee37 7a63 	vsub.f32	s14, s14, s7
 800336a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800336e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003372:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003376:	ee37 7a46 	vsub.f32	s14, s14, s12
 800337a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800337e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003382:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003386:	3c01      	subs	r4, #1
 8003388:	ed02 7a02 	vstr	s14, [r2, #-8]
 800338c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003390:	f1a3 0308 	sub.w	r3, r3, #8
 8003394:	f101 0108 	add.w	r1, r1, #8
 8003398:	f100 0008 	add.w	r0, r0, #8
 800339c:	f102 0208 	add.w	r2, r2, #8
 80033a0:	d1c9      	bne.n	8003336 <merge_rfft_f32+0x3a>
 80033a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <arm_rfft_fast_f32>:
 80033a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ac:	8a05      	ldrh	r5, [r0, #16]
 80033ae:	086d      	lsrs	r5, r5, #1
 80033b0:	8005      	strh	r5, [r0, #0]
 80033b2:	4604      	mov	r4, r0
 80033b4:	4616      	mov	r6, r2
 80033b6:	461d      	mov	r5, r3
 80033b8:	b14b      	cbz	r3, 80033ce <arm_rfft_fast_f32+0x26>
 80033ba:	f7ff ff9f 	bl	80032fc <merge_rfft_f32>
 80033be:	462a      	mov	r2, r5
 80033c0:	4631      	mov	r1, r6
 80033c2:	4620      	mov	r0, r4
 80033c4:	2301      	movs	r3, #1
 80033c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	f000 bb33 	b.w	8003a34 <arm_cfft_f32>
 80033ce:	460f      	mov	r7, r1
 80033d0:	461a      	mov	r2, r3
 80033d2:	2301      	movs	r3, #1
 80033d4:	f000 fb2e 	bl	8003a34 <arm_cfft_f32>
 80033d8:	4632      	mov	r2, r6
 80033da:	4639      	mov	r1, r7
 80033dc:	4620      	mov	r0, r4
 80033de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033e2:	f7ff bf31 	b.w	8003248 <stage_rfft_f32>
 80033e6:	bf00      	nop

080033e8 <arm_cfft_radix8by2_f32>:
 80033e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ec:	ed2d 8b08 	vpush	{d8-d11}
 80033f0:	4607      	mov	r7, r0
 80033f2:	4608      	mov	r0, r1
 80033f4:	f8b7 c000 	ldrh.w	ip, [r7]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80033fe:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003406:	f000 80b0 	beq.w	800356a <arm_cfft_radix8by2_f32+0x182>
 800340a:	008c      	lsls	r4, r1, #2
 800340c:	3410      	adds	r4, #16
 800340e:	f100 0310 	add.w	r3, r0, #16
 8003412:	1906      	adds	r6, r0, r4
 8003414:	3210      	adds	r2, #16
 8003416:	4444      	add	r4, r8
 8003418:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800341c:	f108 0510 	add.w	r5, r8, #16
 8003420:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003424:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003428:	ed54 4a04 	vldr	s9, [r4, #-16]
 800342c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003430:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003434:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003438:	ed53 3a04 	vldr	s7, [r3, #-16]
 800343c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003440:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003444:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003448:	ed16 3a03 	vldr	s6, [r6, #-12]
 800344c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003450:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003454:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003458:	ed16 1a02 	vldr	s2, [r6, #-8]
 800345c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003460:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003464:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003468:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800346c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003470:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003474:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003478:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800347c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003480:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003484:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003488:	ed43 aa02 	vstr	s21, [r3, #-8]
 800348c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003490:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003494:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003498:	ed06 9a03 	vstr	s18, [r6, #-12]
 800349c:	ed46 8a02 	vstr	s17, [r6, #-8]
 80034a0:	ee37 7a62 	vsub.f32	s14, s14, s5
 80034a4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80034a8:	ee34 4a43 	vsub.f32	s8, s8, s6
 80034ac:	ed52 6a03 	vldr	s13, [r2, #-12]
 80034b0:	ed12 3a04 	vldr	s6, [r2, #-16]
 80034b4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80034b8:	ee27 8a26 	vmul.f32	s16, s14, s13
 80034bc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80034c0:	ee23 2a83 	vmul.f32	s4, s7, s6
 80034c4:	ee64 4a83 	vmul.f32	s9, s9, s6
 80034c8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80034cc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80034d0:	ee64 6a26 	vmul.f32	s13, s8, s13
 80034d4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80034d8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80034dc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80034e0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80034e4:	ee32 3a08 	vadd.f32	s6, s4, s16
 80034e8:	ed05 7a03 	vstr	s14, [r5, #-12]
 80034ec:	ed05 3a04 	vstr	s6, [r5, #-16]
 80034f0:	ed04 4a04 	vstr	s8, [r4, #-16]
 80034f4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80034f8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80034fc:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003500:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003504:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003508:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800350c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003510:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003514:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003518:	ee25 4a25 	vmul.f32	s8, s10, s11
 800351c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003520:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003524:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003528:	ee26 7a07 	vmul.f32	s14, s12, s14
 800352c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003530:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003534:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003538:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800353c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003540:	3310      	adds	r3, #16
 8003542:	4563      	cmp	r3, ip
 8003544:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003548:	f106 0610 	add.w	r6, r6, #16
 800354c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003550:	f102 0210 	add.w	r2, r2, #16
 8003554:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003558:	ed04 7a01 	vstr	s14, [r4, #-4]
 800355c:	f105 0510 	add.w	r5, r5, #16
 8003560:	f104 0410 	add.w	r4, r4, #16
 8003564:	f47f af5c 	bne.w	8003420 <arm_cfft_radix8by2_f32+0x38>
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	b28c      	uxth	r4, r1
 800356c:	4621      	mov	r1, r4
 800356e:	2302      	movs	r3, #2
 8003570:	f000 fc66 	bl	8003e40 <arm_radix8_butterfly_f32>
 8003574:	ecbd 8b08 	vpop	{d8-d11}
 8003578:	4621      	mov	r1, r4
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4640      	mov	r0, r8
 800357e:	2302      	movs	r3, #2
 8003580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003584:	f000 bc5c 	b.w	8003e40 <arm_radix8_butterfly_f32>

08003588 <arm_cfft_radix8by4_f32>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	ed2d 8b0a 	vpush	{d8-d12}
 8003590:	b08d      	sub	sp, #52	@ 0x34
 8003592:	460d      	mov	r5, r1
 8003594:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003596:	8801      	ldrh	r1, [r0, #0]
 8003598:	6842      	ldr	r2, [r0, #4]
 800359a:	900a      	str	r0, [sp, #40]	@ 0x28
 800359c:	0849      	lsrs	r1, r1, #1
 800359e:	008b      	lsls	r3, r1, #2
 80035a0:	18ee      	adds	r6, r5, r3
 80035a2:	18f0      	adds	r0, r6, r3
 80035a4:	edd0 5a00 	vldr	s11, [r0]
 80035a8:	edd5 7a00 	vldr	s15, [r5]
 80035ac:	ed96 7a00 	vldr	s14, [r6]
 80035b0:	edd0 3a01 	vldr	s7, [r0, #4]
 80035b4:	ed96 4a01 	vldr	s8, [r6, #4]
 80035b8:	ed95 5a01 	vldr	s10, [r5, #4]
 80035bc:	9008      	str	r0, [sp, #32]
 80035be:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80035c2:	18c7      	adds	r7, r0, r3
 80035c4:	edd7 4a00 	vldr	s9, [r7]
 80035c8:	ed97 3a01 	vldr	s6, [r7, #4]
 80035cc:	9701      	str	r7, [sp, #4]
 80035ce:	ee77 6a06 	vadd.f32	s13, s14, s12
 80035d2:	462c      	mov	r4, r5
 80035d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80035d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80035dc:	ee16 ca90 	vmov	ip, s13
 80035e0:	f844 cb08 	str.w	ip, [r4], #8
 80035e4:	ee75 6a23 	vadd.f32	s13, s10, s7
 80035e8:	edd6 5a01 	vldr	s11, [r6, #4]
 80035ec:	edd7 2a01 	vldr	s5, [r7, #4]
 80035f0:	9404      	str	r4, [sp, #16]
 80035f2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80035f6:	ee74 3a27 	vadd.f32	s7, s8, s15
 80035fa:	ee36 6a47 	vsub.f32	s12, s12, s14
 80035fe:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003602:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003606:	0849      	lsrs	r1, r1, #1
 8003608:	f102 0e08 	add.w	lr, r2, #8
 800360c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003610:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003614:	9109      	str	r1, [sp, #36]	@ 0x24
 8003616:	ee35 4a47 	vsub.f32	s8, s10, s14
 800361a:	f1a1 0902 	sub.w	r9, r1, #2
 800361e:	f8cd e00c 	str.w	lr, [sp, #12]
 8003622:	4631      	mov	r1, r6
 8003624:	ee13 ea90 	vmov	lr, s7
 8003628:	ee36 6a64 	vsub.f32	s12, s12, s9
 800362c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003630:	4604      	mov	r4, r0
 8003632:	edc5 5a01 	vstr	s11, [r5, #4]
 8003636:	ee37 7a05 	vadd.f32	s14, s14, s10
 800363a:	f841 eb08 	str.w	lr, [r1], #8
 800363e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003642:	ee16 ea10 	vmov	lr, s12
 8003646:	ed86 5a01 	vstr	s10, [r6, #4]
 800364a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800364e:	f844 eb08 	str.w	lr, [r4], #8
 8003652:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003656:	edc0 6a01 	vstr	s13, [r0, #4]
 800365a:	9405      	str	r4, [sp, #20]
 800365c:	4604      	mov	r4, r0
 800365e:	ee17 0a90 	vmov	r0, s15
 8003662:	9106      	str	r1, [sp, #24]
 8003664:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003668:	f102 0110 	add.w	r1, r2, #16
 800366c:	46bc      	mov	ip, r7
 800366e:	9100      	str	r1, [sp, #0]
 8003670:	f847 0b08 	str.w	r0, [r7], #8
 8003674:	f102 0118 	add.w	r1, r2, #24
 8003678:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800367c:	9102      	str	r1, [sp, #8]
 800367e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003682:	9007      	str	r0, [sp, #28]
 8003684:	f000 8134 	beq.w	80038f0 <arm_cfft_radix8by4_f32+0x368>
 8003688:	f102 0920 	add.w	r9, r2, #32
 800368c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8003690:	9a01      	ldr	r2, [sp, #4]
 8003692:	f8dd a000 	ldr.w	sl, [sp]
 8003696:	3b0c      	subs	r3, #12
 8003698:	4683      	mov	fp, r0
 800369a:	4463      	add	r3, ip
 800369c:	f105 0e10 	add.w	lr, r5, #16
 80036a0:	f1a4 010c 	sub.w	r1, r4, #12
 80036a4:	f104 0510 	add.w	r5, r4, #16
 80036a8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80036ac:	f1a2 040c 	sub.w	r4, r2, #12
 80036b0:	f106 0010 	add.w	r0, r6, #16
 80036b4:	3210      	adds	r2, #16
 80036b6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80036ba:	ed55 5a02 	vldr	s11, [r5, #-8]
 80036be:	ed50 7a02 	vldr	s15, [r0, #-8]
 80036c2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80036c6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80036ca:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80036ce:	ed12 1a01 	vldr	s2, [r2, #-4]
 80036d2:	ed10 8a01 	vldr	s16, [r0, #-4]
 80036d6:	ee35 4a25 	vadd.f32	s8, s10, s11
 80036da:	ee30 6a26 	vadd.f32	s12, s0, s13
 80036de:	ee37 7a84 	vadd.f32	s14, s15, s8
 80036e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80036e6:	ee37 7a21 	vadd.f32	s14, s14, s3
 80036ea:	ee75 5a65 	vsub.f32	s11, s10, s11
 80036ee:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80036f2:	ed10 7a01 	vldr	s14, [r0, #-4]
 80036f6:	ed52 6a01 	vldr	s13, [r2, #-4]
 80036fa:	ee36 7a07 	vadd.f32	s14, s12, s14
 80036fe:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003702:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003706:	ee70 3a67 	vsub.f32	s7, s0, s15
 800370a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800370e:	ed94 7a02 	vldr	s14, [r4, #8]
 8003712:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003716:	ed91 ba02 	vldr	s22, [r1, #8]
 800371a:	edd3 9a02 	vldr	s19, [r3, #8]
 800371e:	edd4 2a01 	vldr	s5, [r4, #4]
 8003722:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003726:	ed93 5a01 	vldr	s10, [r3, #4]
 800372a:	edd1 0a01 	vldr	s1, [r1, #4]
 800372e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003732:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003736:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800373a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800373e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003742:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003746:	ed8c 7a02 	vstr	s14, [ip, #8]
 800374a:	ed91 7a01 	vldr	s14, [r1, #4]
 800374e:	edd3 8a01 	vldr	s17, [r3, #4]
 8003752:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003756:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800375a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800375e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003762:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003766:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800376a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800376e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003772:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003776:	ee7a aac1 	vsub.f32	s21, s21, s2
 800377a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800377e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003782:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003786:	ee6a aa87 	vmul.f32	s21, s21, s14
 800378a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800378e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003792:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003796:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800379a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800379e:	ee73 3aea 	vsub.f32	s7, s7, s21
 80037a2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80037a6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80037aa:	ee3b aaca 	vsub.f32	s20, s23, s20
 80037ae:	ee34 4a67 	vsub.f32	s8, s8, s15
 80037b2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80037b6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80037ba:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80037be:	ed00 7a02 	vstr	s14, [r0, #-8]
 80037c2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80037c6:	edc1 8a01 	vstr	s17, [r1, #4]
 80037ca:	ed81 aa02 	vstr	s20, [r1, #8]
 80037ce:	ed59 3a04 	vldr	s7, [r9, #-16]
 80037d2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80037d6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80037da:	ed59 6a03 	vldr	s13, [r9, #-12]
 80037de:	ee34 4a61 	vsub.f32	s8, s8, s3
 80037e2:	ee36 6a41 	vsub.f32	s12, s12, s2
 80037e6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80037ea:	ee66 9a26 	vmul.f32	s19, s12, s13
 80037ee:	ee24 9a23 	vmul.f32	s18, s8, s7
 80037f2:	ee26 6a23 	vmul.f32	s12, s12, s7
 80037f6:	ee24 4a26 	vmul.f32	s8, s8, s13
 80037fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037fe:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003802:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003806:	ee36 6a44 	vsub.f32	s12, s12, s8
 800380a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800380e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003812:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003816:	ee75 6a60 	vsub.f32	s13, s10, s1
 800381a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800381e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003822:	ed45 3a02 	vstr	s7, [r5, #-8]
 8003826:	ed05 6a01 	vstr	s12, [r5, #-4]
 800382a:	ed84 7a01 	vstr	s14, [r4, #4]
 800382e:	ed84 4a02 	vstr	s8, [r4, #8]
 8003832:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003836:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800383a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800383e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8003842:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003846:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800384a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800384e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003852:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003856:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800385a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800385e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003862:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003866:	ee23 3a25 	vmul.f32	s6, s6, s11
 800386a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800386e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003872:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003876:	ee36 7a87 	vadd.f32	s14, s13, s14
 800387a:	f1bb 0b01 	subs.w	fp, fp, #1
 800387e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8003882:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003886:	f10e 0e08 	add.w	lr, lr, #8
 800388a:	ed83 3a02 	vstr	s6, [r3, #8]
 800388e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003892:	f1ac 0c08 	sub.w	ip, ip, #8
 8003896:	f10a 0a08 	add.w	sl, sl, #8
 800389a:	f100 0008 	add.w	r0, r0, #8
 800389e:	f1a1 0108 	sub.w	r1, r1, #8
 80038a2:	f109 0910 	add.w	r9, r9, #16
 80038a6:	f105 0508 	add.w	r5, r5, #8
 80038aa:	f1a4 0408 	sub.w	r4, r4, #8
 80038ae:	f108 0818 	add.w	r8, r8, #24
 80038b2:	f102 0208 	add.w	r2, r2, #8
 80038b6:	f1a3 0308 	sub.w	r3, r3, #8
 80038ba:	f47f aefc 	bne.w	80036b6 <arm_cfft_radix8by4_f32+0x12e>
 80038be:	9907      	ldr	r1, [sp, #28]
 80038c0:	9800      	ldr	r0, [sp, #0]
 80038c2:	00cb      	lsls	r3, r1, #3
 80038c4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80038c8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80038cc:	9100      	str	r1, [sp, #0]
 80038ce:	9904      	ldr	r1, [sp, #16]
 80038d0:	4419      	add	r1, r3
 80038d2:	9104      	str	r1, [sp, #16]
 80038d4:	9903      	ldr	r1, [sp, #12]
 80038d6:	4419      	add	r1, r3
 80038d8:	9103      	str	r1, [sp, #12]
 80038da:	9906      	ldr	r1, [sp, #24]
 80038dc:	4419      	add	r1, r3
 80038de:	9106      	str	r1, [sp, #24]
 80038e0:	9905      	ldr	r1, [sp, #20]
 80038e2:	441f      	add	r7, r3
 80038e4:	4419      	add	r1, r3
 80038e6:	9b02      	ldr	r3, [sp, #8]
 80038e8:	9105      	str	r1, [sp, #20]
 80038ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	9904      	ldr	r1, [sp, #16]
 80038f2:	9805      	ldr	r0, [sp, #20]
 80038f4:	ed91 4a00 	vldr	s8, [r1]
 80038f8:	edd0 6a00 	vldr	s13, [r0]
 80038fc:	9b06      	ldr	r3, [sp, #24]
 80038fe:	ed97 3a00 	vldr	s6, [r7]
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	edd0 4a01 	vldr	s9, [r0, #4]
 800390a:	edd1 3a01 	vldr	s7, [r1, #4]
 800390e:	ed97 2a01 	vldr	s4, [r7, #4]
 8003912:	ed93 7a01 	vldr	s14, [r3, #4]
 8003916:	9a03      	ldr	r2, [sp, #12]
 8003918:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800391c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003920:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8003924:	ee37 5a86 	vadd.f32	s10, s15, s12
 8003928:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800392c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003930:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003934:	ed81 5a00 	vstr	s10, [r1]
 8003938:	ed93 5a01 	vldr	s10, [r3, #4]
 800393c:	edd7 4a01 	vldr	s9, [r7, #4]
 8003940:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003944:	ee37 4a26 	vadd.f32	s8, s14, s13
 8003948:	ee35 5a24 	vadd.f32	s10, s10, s9
 800394c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003950:	ed81 5a01 	vstr	s10, [r1, #4]
 8003954:	edd2 1a00 	vldr	s3, [r2]
 8003958:	edd2 2a01 	vldr	s5, [r2, #4]
 800395c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003960:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003964:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003968:	ee64 4a21 	vmul.f32	s9, s8, s3
 800396c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003970:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003974:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003978:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800397c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003980:	edc3 2a00 	vstr	s5, [r3]
 8003984:	ed83 5a01 	vstr	s10, [r3, #4]
 8003988:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800398c:	9b00      	ldr	r3, [sp, #0]
 800398e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003992:	ed93 4a01 	vldr	s8, [r3, #4]
 8003996:	ed93 5a00 	vldr	s10, [r3]
 800399a:	9b02      	ldr	r3, [sp, #8]
 800399c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80039a0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80039a4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80039a8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80039ac:	ee65 5a84 	vmul.f32	s11, s11, s8
 80039b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80039b4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80039b8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80039bc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80039c0:	ed80 6a01 	vstr	s12, [r0, #4]
 80039c4:	edc0 5a00 	vstr	s11, [r0]
 80039c8:	edd3 5a01 	vldr	s11, [r3, #4]
 80039cc:	edd3 6a00 	vldr	s13, [r3]
 80039d0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80039d4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80039d8:	ee27 6a26 	vmul.f32	s12, s14, s13
 80039dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039e0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80039e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80039e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80039ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 80039f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80039f4:	edc7 7a00 	vstr	s15, [r7]
 80039f8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80039fc:	4621      	mov	r1, r4
 80039fe:	686a      	ldr	r2, [r5, #4]
 8003a00:	2304      	movs	r3, #4
 8003a02:	f000 fa1d 	bl	8003e40 <arm_radix8_butterfly_f32>
 8003a06:	4630      	mov	r0, r6
 8003a08:	4621      	mov	r1, r4
 8003a0a:	686a      	ldr	r2, [r5, #4]
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f000 fa17 	bl	8003e40 <arm_radix8_butterfly_f32>
 8003a12:	9808      	ldr	r0, [sp, #32]
 8003a14:	686a      	ldr	r2, [r5, #4]
 8003a16:	4621      	mov	r1, r4
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f000 fa11 	bl	8003e40 <arm_radix8_butterfly_f32>
 8003a1e:	686a      	ldr	r2, [r5, #4]
 8003a20:	9801      	ldr	r0, [sp, #4]
 8003a22:	4621      	mov	r1, r4
 8003a24:	2304      	movs	r3, #4
 8003a26:	b00d      	add	sp, #52	@ 0x34
 8003a28:	ecbd 8b0a 	vpop	{d8-d12}
 8003a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	f000 ba06 	b.w	8003e40 <arm_radix8_butterfly_f32>

08003a34 <arm_cfft_f32>:
 8003a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	2a01      	cmp	r2, #1
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	4617      	mov	r7, r2
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4698      	mov	r8, r3
 8003a42:	8805      	ldrh	r5, [r0, #0]
 8003a44:	d056      	beq.n	8003af4 <arm_cfft_f32+0xc0>
 8003a46:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003a4a:	d063      	beq.n	8003b14 <arm_cfft_f32+0xe0>
 8003a4c:	d916      	bls.n	8003a7c <arm_cfft_f32+0x48>
 8003a4e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8003a52:	d01a      	beq.n	8003a8a <arm_cfft_f32+0x56>
 8003a54:	d947      	bls.n	8003ae6 <arm_cfft_f32+0xb2>
 8003a56:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8003a5a:	d05b      	beq.n	8003b14 <arm_cfft_f32+0xe0>
 8003a5c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8003a60:	d105      	bne.n	8003a6e <arm_cfft_f32+0x3a>
 8003a62:	2301      	movs	r3, #1
 8003a64:	6872      	ldr	r2, [r6, #4]
 8003a66:	4629      	mov	r1, r5
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 f9e9 	bl	8003e40 <arm_radix8_butterfly_f32>
 8003a6e:	f1b8 0f00 	cmp.w	r8, #0
 8003a72:	d111      	bne.n	8003a98 <arm_cfft_f32+0x64>
 8003a74:	2f01      	cmp	r7, #1
 8003a76:	d016      	beq.n	8003aa6 <arm_cfft_f32+0x72>
 8003a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a7c:	2d20      	cmp	r5, #32
 8003a7e:	d049      	beq.n	8003b14 <arm_cfft_f32+0xe0>
 8003a80:	d935      	bls.n	8003aee <arm_cfft_f32+0xba>
 8003a82:	2d40      	cmp	r5, #64	@ 0x40
 8003a84:	d0ed      	beq.n	8003a62 <arm_cfft_f32+0x2e>
 8003a86:	2d80      	cmp	r5, #128	@ 0x80
 8003a88:	d1f1      	bne.n	8003a6e <arm_cfft_f32+0x3a>
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f7ff fcab 	bl	80033e8 <arm_cfft_radix8by2_f32>
 8003a92:	f1b8 0f00 	cmp.w	r8, #0
 8003a96:	d0ed      	beq.n	8003a74 <arm_cfft_f32+0x40>
 8003a98:	68b2      	ldr	r2, [r6, #8]
 8003a9a:	89b1      	ldrh	r1, [r6, #12]
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f000 f841 	bl	8003b24 <arm_bitreversal_32>
 8003aa2:	2f01      	cmp	r7, #1
 8003aa4:	d1e8      	bne.n	8003a78 <arm_cfft_f32+0x44>
 8003aa6:	ee07 5a90 	vmov	s15, r5
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ab2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	d0de      	beq.n	8003a78 <arm_cfft_f32+0x44>
 8003aba:	f104 0108 	add.w	r1, r4, #8
 8003abe:	2300      	movs	r3, #0
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	429d      	cmp	r5, r3
 8003ac4:	f101 0108 	add.w	r1, r1, #8
 8003ac8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003acc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003ad0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003ad4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003ad8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003adc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003ae0:	d1ee      	bne.n	8003ac0 <arm_cfft_f32+0x8c>
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8003aea:	d0ba      	beq.n	8003a62 <arm_cfft_f32+0x2e>
 8003aec:	e7bf      	b.n	8003a6e <arm_cfft_f32+0x3a>
 8003aee:	2d10      	cmp	r5, #16
 8003af0:	d0cb      	beq.n	8003a8a <arm_cfft_f32+0x56>
 8003af2:	e7bc      	b.n	8003a6e <arm_cfft_f32+0x3a>
 8003af4:	b19d      	cbz	r5, 8003b1e <arm_cfft_f32+0xea>
 8003af6:	f101 030c 	add.w	r3, r1, #12
 8003afa:	2200      	movs	r2, #0
 8003afc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003b00:	3201      	adds	r2, #1
 8003b02:	eef1 7a67 	vneg.f32	s15, s15
 8003b06:	4295      	cmp	r5, r2
 8003b08:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003b0c:	f103 0308 	add.w	r3, r3, #8
 8003b10:	d1f4      	bne.n	8003afc <arm_cfft_f32+0xc8>
 8003b12:	e798      	b.n	8003a46 <arm_cfft_f32+0x12>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff fd36 	bl	8003588 <arm_cfft_radix8by4_f32>
 8003b1c:	e7a7      	b.n	8003a6e <arm_cfft_f32+0x3a>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0aa      	beq.n	8003a78 <arm_cfft_f32+0x44>
 8003b22:	e7b9      	b.n	8003a98 <arm_cfft_f32+0x64>

08003b24 <arm_bitreversal_32>:
 8003b24:	b1e9      	cbz	r1, 8003b62 <arm_bitreversal_32+0x3e>
 8003b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b28:	2500      	movs	r5, #0
 8003b2a:	f102 0e02 	add.w	lr, r2, #2
 8003b2e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8003b32:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8003b36:	08a4      	lsrs	r4, r4, #2
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8003b3e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8003b42:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8003b46:	00a6      	lsls	r6, r4, #2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	1d34      	adds	r4, r6, #4
 8003b52:	3502      	adds	r5, #2
 8003b54:	58c6      	ldr	r6, [r0, r3]
 8003b56:	5907      	ldr	r7, [r0, r4]
 8003b58:	50c7      	str	r7, [r0, r3]
 8003b5a:	428d      	cmp	r5, r1
 8003b5c:	5106      	str	r6, [r0, r4]
 8003b5e:	d3e6      	bcc.n	8003b2e <arm_bitreversal_32+0xa>
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	4770      	bx	lr

08003b64 <arm_cmplx_mag_f32>:
 8003b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b68:	ed2d 8b02 	vpush	{d8}
 8003b6c:	0897      	lsrs	r7, r2, #2
 8003b6e:	b084      	sub	sp, #16
 8003b70:	d077      	beq.n	8003c62 <arm_cmplx_mag_f32+0xfe>
 8003b72:	f04f 0800 	mov.w	r8, #0
 8003b76:	f100 0420 	add.w	r4, r0, #32
 8003b7a:	f101 0510 	add.w	r5, r1, #16
 8003b7e:	463e      	mov	r6, r7
 8003b80:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8003b84:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8003b88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	f2c0 80c5 	blt.w	8003d2a <arm_cmplx_mag_f32+0x1c6>
 8003ba0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003bac:	f100 80cb 	bmi.w	8003d46 <arm_cmplx_mag_f32+0x1e2>
 8003bb0:	ed05 8a04 	vstr	s16, [r5, #-16]
 8003bb4:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8003bb8:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8003bbc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003bc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	f2c0 80a8 	blt.w	8003d24 <arm_cmplx_mag_f32+0x1c0>
 8003bd4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003be0:	f100 80a8 	bmi.w	8003d34 <arm_cmplx_mag_f32+0x1d0>
 8003be4:	ed05 8a03 	vstr	s16, [r5, #-12]
 8003be8:	ed14 0a04 	vldr	s0, [r4, #-16]
 8003bec:	ed54 7a03 	vldr	s15, [r4, #-12]
 8003bf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bf8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c04:	f2c0 808b 	blt.w	8003d1e <arm_cmplx_mag_f32+0x1ba>
 8003c08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003c14:	f100 80a9 	bmi.w	8003d6a <arm_cmplx_mag_f32+0x206>
 8003c18:	ed05 8a02 	vstr	s16, [r5, #-8]
 8003c1c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003c20:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003c24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003c28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	db6e      	blt.n	8003d18 <arm_cmplx_mag_f32+0x1b4>
 8003c3a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c42:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003c46:	f100 8087 	bmi.w	8003d58 <arm_cmplx_mag_f32+0x1f4>
 8003c4a:	ed05 8a01 	vstr	s16, [r5, #-4]
 8003c4e:	3e01      	subs	r6, #1
 8003c50:	f104 0420 	add.w	r4, r4, #32
 8003c54:	f105 0510 	add.w	r5, r5, #16
 8003c58:	d192      	bne.n	8003b80 <arm_cmplx_mag_f32+0x1c>
 8003c5a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8003c5e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8003c62:	f012 0203 	ands.w	r2, r2, #3
 8003c66:	d052      	beq.n	8003d0e <arm_cmplx_mag_f32+0x1aa>
 8003c68:	ed90 0a00 	vldr	s0, [r0]
 8003c6c:	edd0 7a01 	vldr	s15, [r0, #4]
 8003c70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003c74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c78:	2300      	movs	r3, #0
 8003c7a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003c7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	bfb8      	it	lt
 8003c88:	600b      	strlt	r3, [r1, #0]
 8003c8a:	db08      	blt.n	8003c9e <arm_cmplx_mag_f32+0x13a>
 8003c8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003c98:	d479      	bmi.n	8003d8e <arm_cmplx_mag_f32+0x22a>
 8003c9a:	ed81 8a00 	vstr	s16, [r1]
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	d035      	beq.n	8003d0e <arm_cmplx_mag_f32+0x1aa>
 8003ca2:	ed90 0a02 	vldr	s0, [r0, #8]
 8003ca6:	edd0 7a03 	vldr	s15, [r0, #12]
 8003caa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003cae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003cb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	bfb8      	it	lt
 8003cc2:	604b      	strlt	r3, [r1, #4]
 8003cc4:	db08      	blt.n	8003cd8 <arm_cmplx_mag_f32+0x174>
 8003cc6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003cd2:	d453      	bmi.n	8003d7c <arm_cmplx_mag_f32+0x218>
 8003cd4:	ed81 8a01 	vstr	s16, [r1, #4]
 8003cd8:	2a01      	cmp	r2, #1
 8003cda:	d018      	beq.n	8003d0e <arm_cmplx_mag_f32+0x1aa>
 8003cdc:	ed90 0a04 	vldr	s0, [r0, #16]
 8003ce0:	edd0 7a05 	vldr	s15, [r0, #20]
 8003ce4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003ce8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cec:	2300      	movs	r3, #0
 8003cee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003cf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	db19      	blt.n	8003d30 <arm_cmplx_mag_f32+0x1cc>
 8003cfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003d08:	d44a      	bmi.n	8003da0 <arm_cmplx_mag_f32+0x23c>
 8003d0a:	ed81 8a02 	vstr	s16, [r1, #8]
 8003d0e:	b004      	add	sp, #16
 8003d10:	ecbd 8b02 	vpop	{d8}
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d18:	f845 8c04 	str.w	r8, [r5, #-4]
 8003d1c:	e797      	b.n	8003c4e <arm_cmplx_mag_f32+0xea>
 8003d1e:	f845 8c08 	str.w	r8, [r5, #-8]
 8003d22:	e77b      	b.n	8003c1c <arm_cmplx_mag_f32+0xb8>
 8003d24:	f845 8c0c 	str.w	r8, [r5, #-12]
 8003d28:	e75e      	b.n	8003be8 <arm_cmplx_mag_f32+0x84>
 8003d2a:	f845 8c10 	str.w	r8, [r5, #-16]
 8003d2e:	e741      	b.n	8003bb4 <arm_cmplx_mag_f32+0x50>
 8003d30:	608b      	str	r3, [r1, #8]
 8003d32:	e7ec      	b.n	8003d0e <arm_cmplx_mag_f32+0x1aa>
 8003d34:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d38:	9001      	str	r0, [sp, #4]
 8003d3a:	f000 fb73 	bl	8004424 <sqrtf>
 8003d3e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d42:	9801      	ldr	r0, [sp, #4]
 8003d44:	e74e      	b.n	8003be4 <arm_cmplx_mag_f32+0x80>
 8003d46:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d4a:	9001      	str	r0, [sp, #4]
 8003d4c:	f000 fb6a 	bl	8004424 <sqrtf>
 8003d50:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	e72b      	b.n	8003bb0 <arm_cmplx_mag_f32+0x4c>
 8003d58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d5c:	9001      	str	r0, [sp, #4]
 8003d5e:	f000 fb61 	bl	8004424 <sqrtf>
 8003d62:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d66:	9801      	ldr	r0, [sp, #4]
 8003d68:	e76f      	b.n	8003c4a <arm_cmplx_mag_f32+0xe6>
 8003d6a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d6e:	9001      	str	r0, [sp, #4]
 8003d70:	f000 fb58 	bl	8004424 <sqrtf>
 8003d74:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d78:	9801      	ldr	r0, [sp, #4]
 8003d7a:	e74d      	b.n	8003c18 <arm_cmplx_mag_f32+0xb4>
 8003d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d80:	9201      	str	r2, [sp, #4]
 8003d82:	f000 fb4f 	bl	8004424 <sqrtf>
 8003d86:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003d8a:	9903      	ldr	r1, [sp, #12]
 8003d8c:	e7a2      	b.n	8003cd4 <arm_cmplx_mag_f32+0x170>
 8003d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d92:	9201      	str	r2, [sp, #4]
 8003d94:	f000 fb46 	bl	8004424 <sqrtf>
 8003d98:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003d9c:	9903      	ldr	r1, [sp, #12]
 8003d9e:	e77c      	b.n	8003c9a <arm_cmplx_mag_f32+0x136>
 8003da0:	9101      	str	r1, [sp, #4]
 8003da2:	f000 fb3f 	bl	8004424 <sqrtf>
 8003da6:	9901      	ldr	r1, [sp, #4]
 8003da8:	e7af      	b.n	8003d0a <arm_cmplx_mag_f32+0x1a6>
 8003daa:	bf00      	nop

08003dac <arm_cos_f32>:
 8003dac:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003e34 <arm_cos_f32+0x88>
 8003db0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003db4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8003db8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003dbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003dc8:	d504      	bpl.n	8003dd4 <arm_cos_f32+0x28>
 8003dca:	ee17 3a90 	vmov	r3, s15
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003e38 <arm_cos_f32+0x8c>
 8003ddc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003de0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003de4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003de8:	ee17 3a90 	vmov	r3, s15
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df2:	d21a      	bcs.n	8003e2a <arm_cos_f32+0x7e>
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfc:	1c59      	adds	r1, r3, #1
 8003dfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e02:	4a0e      	ldr	r2, [pc, #56]	@ (8003e3c <arm_cos_f32+0x90>)
 8003e04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003e10:	ed93 7a00 	vldr	s14, [r3]
 8003e14:	edd2 6a00 	vldr	s13, [r2]
 8003e18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e1c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e24:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003e28:	4770      	bx	lr
 8003e2a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2300      	movs	r3, #0
 8003e32:	e7e6      	b.n	8003e02 <arm_cos_f32+0x56>
 8003e34:	3e22f983 	.word	0x3e22f983
 8003e38:	44000000 	.word	0x44000000
 8003e3c:	080079b0 	.word	0x080079b0

08003e40 <arm_radix8_butterfly_f32>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	ed2d 8b10 	vpush	{d8-d15}
 8003e48:	b095      	sub	sp, #84	@ 0x54
 8003e4a:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8003e4e:	4603      	mov	r3, r0
 8003e50:	3304      	adds	r3, #4
 8003e52:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8004138 <arm_radix8_butterfly_f32+0x2f8>
 8003e56:	9012      	str	r0, [sp, #72]	@ 0x48
 8003e58:	468b      	mov	fp, r1
 8003e5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8003e62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003e64:	960f      	str	r6, [sp, #60]	@ 0x3c
 8003e66:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8003e6a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8003e6e:	eb03 0508 	add.w	r5, r3, r8
 8003e72:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8003e76:	eb05 040e 	add.w	r4, r5, lr
 8003e7a:	0137      	lsls	r7, r6, #4
 8003e7c:	eba6 030a 	sub.w	r3, r6, sl
 8003e80:	eb04 000e 	add.w	r0, r4, lr
 8003e84:	44b2      	add	sl, r6
 8003e86:	1d3a      	adds	r2, r7, #4
 8003e88:	9702      	str	r7, [sp, #8]
 8003e8a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003e8e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8003e92:	ebae 0c06 	sub.w	ip, lr, r6
 8003e96:	9703      	str	r7, [sp, #12]
 8003e98:	eb03 0708 	add.w	r7, r3, r8
 8003e9c:	9701      	str	r7, [sp, #4]
 8003e9e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8003ea2:	9706      	str	r7, [sp, #24]
 8003ea4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8003ea6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8003eaa:	f10e 0104 	add.w	r1, lr, #4
 8003eae:	4439      	add	r1, r7
 8003eb0:	443a      	add	r2, r7
 8003eb2:	0137      	lsls	r7, r6, #4
 8003eb4:	00f6      	lsls	r6, r6, #3
 8003eb6:	9704      	str	r7, [sp, #16]
 8003eb8:	9605      	str	r6, [sp, #20]
 8003eba:	9f01      	ldr	r7, [sp, #4]
 8003ebc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003ebe:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8003ec2:	f04f 0c00 	mov.w	ip, #0
 8003ec6:	edd4 6a00 	vldr	s13, [r4]
 8003eca:	edd7 1a00 	vldr	s3, [r7]
 8003ece:	ed16 aa01 	vldr	s20, [r6, #-4]
 8003ed2:	edd5 5a00 	vldr	s11, [r5]
 8003ed6:	ed52 9a01 	vldr	s19, [r2, #-4]
 8003eda:	ed90 6a00 	vldr	s12, [r0]
 8003ede:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003ee2:	ed93 3a00 	vldr	s6, [r3]
 8003ee6:	ee39 0a86 	vadd.f32	s0, s19, s12
 8003eea:	ee33 2a21 	vadd.f32	s4, s6, s3
 8003eee:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003ef2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8003ef6:	ee35 7a02 	vadd.f32	s14, s10, s4
 8003efa:	ee34 4a80 	vadd.f32	s8, s9, s0
 8003efe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f02:	ee74 6a07 	vadd.f32	s13, s8, s14
 8003f06:	ee34 4a47 	vsub.f32	s8, s8, s14
 8003f0a:	ed46 6a01 	vstr	s13, [r6, #-4]
 8003f0e:	ed85 4a00 	vstr	s8, [r5]
 8003f12:	edd1 6a00 	vldr	s13, [r1]
 8003f16:	ed94 9a01 	vldr	s18, [r4, #4]
 8003f1a:	edd3 2a01 	vldr	s5, [r3, #4]
 8003f1e:	edd7 8a01 	vldr	s17, [r7, #4]
 8003f22:	edd6 0a00 	vldr	s1, [r6]
 8003f26:	edd5 3a01 	vldr	s7, [r5, #4]
 8003f2a:	ed90 8a01 	vldr	s16, [r0, #4]
 8003f2e:	ed92 7a00 	vldr	s14, [r2]
 8003f32:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003f36:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8003f3a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8003f3e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003f42:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8003f46:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003f4a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8003f4e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003f52:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8003f56:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8003f5a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8003f5e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003f62:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8003f66:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003f6a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8003f6e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8003f72:	ee76 6a89 	vadd.f32	s13, s13, s18
 8003f76:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8003f7a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003f7e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003f82:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003f86:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8003f8a:	ee33 2a20 	vadd.f32	s4, s6, s1
 8003f8e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003f92:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003f96:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8003f9a:	ee77 0a01 	vadd.f32	s1, s14, s2
 8003f9e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8003fa2:	ee37 7a41 	vsub.f32	s14, s14, s2
 8003fa6:	ee73 1a84 	vadd.f32	s3, s7, s8
 8003faa:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003fae:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003fb2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fb6:	ee32 8a00 	vadd.f32	s16, s4, s0
 8003fba:	ee33 1a45 	vsub.f32	s2, s6, s10
 8003fbe:	ee32 2a40 	vsub.f32	s4, s4, s0
 8003fc2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003fc6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8003fca:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8003fce:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003fd2:	ee34 6a67 	vsub.f32	s12, s8, s15
 8003fd6:	ee75 4a87 	vadd.f32	s9, s11, s14
 8003fda:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8003fde:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003fe2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003fe6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8003fea:	44dc      	add	ip, fp
 8003fec:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003ff0:	45e1      	cmp	r9, ip
 8003ff2:	ed86 8a00 	vstr	s16, [r6]
 8003ff6:	ed85 2a01 	vstr	s4, [r5, #4]
 8003ffa:	4456      	add	r6, sl
 8003ffc:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004000:	4455      	add	r5, sl
 8004002:	edc0 6a00 	vstr	s13, [r0]
 8004006:	ed82 1a00 	vstr	s2, [r2]
 800400a:	ed80 5a01 	vstr	s10, [r0, #4]
 800400e:	4452      	add	r2, sl
 8004010:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004014:	4450      	add	r0, sl
 8004016:	edc7 2a00 	vstr	s5, [r7]
 800401a:	edc4 4a00 	vstr	s9, [r4]
 800401e:	ed83 7a00 	vstr	s14, [r3]
 8004022:	edc1 5a00 	vstr	s11, [r1]
 8004026:	edc7 3a01 	vstr	s7, [r7, #4]
 800402a:	4451      	add	r1, sl
 800402c:	ed84 6a01 	vstr	s12, [r4, #4]
 8004030:	4457      	add	r7, sl
 8004032:	edc3 7a01 	vstr	s15, [r3, #4]
 8004036:	4454      	add	r4, sl
 8004038:	4453      	add	r3, sl
 800403a:	f63f af44 	bhi.w	8003ec6 <arm_radix8_butterfly_f32+0x86>
 800403e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004040:	2b07      	cmp	r3, #7
 8004042:	f240 81b7 	bls.w	80043b4 <arm_radix8_butterfly_f32+0x574>
 8004046:	9b06      	ldr	r3, [sp, #24]
 8004048:	9903      	ldr	r1, [sp, #12]
 800404a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800404c:	9e05      	ldr	r6, [sp, #20]
 800404e:	9a04      	ldr	r2, [sp, #16]
 8004050:	f103 0c08 	add.w	ip, r3, #8
 8004054:	9b02      	ldr	r3, [sp, #8]
 8004056:	3108      	adds	r1, #8
 8004058:	f108 0808 	add.w	r8, r8, #8
 800405c:	1841      	adds	r1, r0, r1
 800405e:	3608      	adds	r6, #8
 8004060:	330c      	adds	r3, #12
 8004062:	4604      	mov	r4, r0
 8004064:	4444      	add	r4, r8
 8004066:	18c3      	adds	r3, r0, r3
 8004068:	9109      	str	r1, [sp, #36]	@ 0x24
 800406a:	1981      	adds	r1, r0, r6
 800406c:	f10e 0e08 	add.w	lr, lr, #8
 8004070:	3208      	adds	r2, #8
 8004072:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004074:	9107      	str	r1, [sp, #28]
 8004076:	4604      	mov	r4, r0
 8004078:	4601      	mov	r1, r0
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	f100 030c 	add.w	r3, r0, #12
 8004080:	4474      	add	r4, lr
 8004082:	f04f 0801 	mov.w	r8, #1
 8004086:	1882      	adds	r2, r0, r2
 8004088:	4461      	add	r1, ip
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	464b      	mov	r3, r9
 800408e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004090:	46c1      	mov	r9, r8
 8004092:	9208      	str	r2, [sp, #32]
 8004094:	46d8      	mov	r8, fp
 8004096:	9106      	str	r1, [sp, #24]
 8004098:	f04f 0e00 	mov.w	lr, #0
 800409c:	469b      	mov	fp, r3
 800409e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80040a2:	449e      	add	lr, r3
 80040a4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80040a8:	441a      	add	r2, r3
 80040aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80040ac:	441a      	add	r2, r3
 80040ae:	18d4      	adds	r4, r2, r3
 80040b0:	18e5      	adds	r5, r4, r3
 80040b2:	18ee      	adds	r6, r5, r3
 80040b4:	18f7      	adds	r7, r6, r3
 80040b6:	eb07 0c03 	add.w	ip, r7, r3
 80040ba:	920d      	str	r2, [sp, #52]	@ 0x34
 80040bc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80040c0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80040c4:	910c      	str	r1, [sp, #48]	@ 0x30
 80040c6:	4419      	add	r1, r3
 80040c8:	9103      	str	r1, [sp, #12]
 80040ca:	4419      	add	r1, r3
 80040cc:	18ca      	adds	r2, r1, r3
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	441a      	add	r2, r3
 80040d2:	18d0      	adds	r0, r2, r3
 80040d4:	ed92 ea01 	vldr	s28, [r2, #4]
 80040d8:	9a02      	ldr	r2, [sp, #8]
 80040da:	edd4 7a00 	vldr	s15, [r4]
 80040de:	edd2 da01 	vldr	s27, [r2, #4]
 80040e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80040e4:	ed91 da01 	vldr	s26, [r1, #4]
 80040e8:	ed92 ca01 	vldr	s24, [r2, #4]
 80040ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80040ee:	9903      	ldr	r1, [sp, #12]
 80040f0:	edcd 7a03 	vstr	s15, [sp, #12]
 80040f4:	edd2 7a00 	vldr	s15, [r2]
 80040f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040fa:	edcd 7a02 	vstr	s15, [sp, #8]
 80040fe:	edd2 7a00 	vldr	s15, [r2]
 8004102:	edd0 ea01 	vldr	s29, [r0, #4]
 8004106:	edd1 ca01 	vldr	s25, [r1, #4]
 800410a:	eddc ba00 	vldr	s23, [ip]
 800410e:	edd7 aa00 	vldr	s21, [r7]
 8004112:	ed96 aa00 	vldr	s20, [r6]
 8004116:	edd5 9a00 	vldr	s19, [r5]
 800411a:	edcd 7a01 	vstr	s15, [sp, #4]
 800411e:	4403      	add	r3, r0
 8004120:	ed93 fa01 	vldr	s30, [r3, #4]
 8004124:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004128:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800412c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8004134:	46cc      	mov	ip, r9
 8004136:	e001      	b.n	800413c <arm_radix8_butterfly_f32+0x2fc>
 8004138:	3f3504f3 	.word	0x3f3504f3
 800413c:	ed91 6a00 	vldr	s12, [r1]
 8004140:	ed93 5a00 	vldr	s10, [r3]
 8004144:	edd0 fa00 	vldr	s31, [r0]
 8004148:	edd4 7a00 	vldr	s15, [r4]
 800414c:	ed95 7a00 	vldr	s14, [r5]
 8004150:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004154:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004158:	ed92 2a00 	vldr	s4, [r2]
 800415c:	ed96 0a00 	vldr	s0, [r6]
 8004160:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004164:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004168:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800416c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004170:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004174:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004178:	ee32 2a46 	vsub.f32	s4, s4, s12
 800417c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004184:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004188:	edd4 8a01 	vldr	s17, [r4, #4]
 800418c:	ed92 9a01 	vldr	s18, [r2, #4]
 8004190:	edd7 0a00 	vldr	s1, [r7]
 8004194:	edd1 2a01 	vldr	s5, [r1, #4]
 8004198:	ed95 7a01 	vldr	s14, [r5, #4]
 800419c:	ed93 6a01 	vldr	s12, [r3, #4]
 80041a0:	edd0 5a01 	vldr	s11, [r0, #4]
 80041a4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80041a8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80041ac:	ee39 5a62 	vsub.f32	s10, s18, s5
 80041b0:	ee78 fac7 	vsub.f32	s31, s17, s14
 80041b4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80041b8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80041bc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80041c0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80041c4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80041c8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80041cc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80041d0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80041d4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80041d8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80041dc:	ee32 1a08 	vadd.f32	s2, s4, s16
 80041e0:	ee72 fa87 	vadd.f32	s31, s5, s14
 80041e4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80041e8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80041ec:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80041f0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80041f4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80041f8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80041fc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004200:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004204:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004208:	ee30 6a46 	vsub.f32	s12, s0, s12
 800420c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004210:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004214:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004218:	ee36 6a68 	vsub.f32	s12, s12, s17
 800421c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004220:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004224:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004228:	ee33 9a49 	vsub.f32	s18, s6, s18
 800422c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004230:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004234:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004238:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800423c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004240:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004244:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004248:	ee35 8a03 	vadd.f32	s16, s10, s6
 800424c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004250:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004254:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004258:	ed9d 2a01 	vldr	s4, [sp, #4]
 800425c:	eddd 1a02 	vldr	s3, [sp, #8]
 8004260:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004264:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004268:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800426c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004270:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004274:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004278:	ee76 5a49 	vsub.f32	s11, s12, s18
 800427c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004280:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004284:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004288:	ee21 4a84 	vmul.f32	s8, s3, s8
 800428c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004290:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004294:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004298:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800429c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80042a0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80042a4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80042a8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80042ac:	ee74 0a60 	vsub.f32	s1, s8, s1
 80042b0:	ee37 7a48 	vsub.f32	s14, s14, s16
 80042b4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80042b8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80042bc:	ee72 1a21 	vadd.f32	s3, s4, s3
 80042c0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80042c4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80042c8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80042cc:	ee38 8a04 	vadd.f32	s16, s16, s8
 80042d0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80042d4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80042d8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80042dc:	eddd 5a03 	vldr	s11, [sp, #12]
 80042e0:	edc6 fa00 	vstr	s31, [r6]
 80042e4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80042e8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80042ec:	ee30 0a45 	vsub.f32	s0, s0, s10
 80042f0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80042f4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80042f8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80042fc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004300:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004304:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004308:	ee74 4a89 	vadd.f32	s9, s9, s18
 800430c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004310:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004314:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004318:	44c4      	add	ip, r8
 800431a:	45e3      	cmp	fp, ip
 800431c:	edc3 3a00 	vstr	s7, [r3]
 8004320:	edc3 6a01 	vstr	s13, [r3, #4]
 8004324:	4456      	add	r6, sl
 8004326:	ed07 1a01 	vstr	s2, [r7, #-4]
 800432a:	edc7 0a00 	vstr	s1, [r7]
 800432e:	4453      	add	r3, sl
 8004330:	ed80 2a00 	vstr	s4, [r0]
 8004334:	edc0 2a01 	vstr	s5, [r0, #4]
 8004338:	4457      	add	r7, sl
 800433a:	edc2 1a00 	vstr	s3, [r2]
 800433e:	ed82 7a01 	vstr	s14, [r2, #4]
 8004342:	4450      	add	r0, sl
 8004344:	ed85 8a00 	vstr	s16, [r5]
 8004348:	ed85 0a01 	vstr	s0, [r5, #4]
 800434c:	4452      	add	r2, sl
 800434e:	edc1 4a00 	vstr	s9, [r1]
 8004352:	4455      	add	r5, sl
 8004354:	ed81 3a01 	vstr	s6, [r1, #4]
 8004358:	edc4 8a00 	vstr	s17, [r4]
 800435c:	ed84 6a01 	vstr	s12, [r4, #4]
 8004360:	4451      	add	r1, sl
 8004362:	4454      	add	r4, sl
 8004364:	f63f aeea 	bhi.w	800413c <arm_radix8_butterfly_f32+0x2fc>
 8004368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800436a:	3308      	adds	r3, #8
 800436c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800436e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004370:	3308      	adds	r3, #8
 8004372:	930a      	str	r3, [sp, #40]	@ 0x28
 8004374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004376:	3308      	adds	r3, #8
 8004378:	9309      	str	r3, [sp, #36]	@ 0x24
 800437a:	9b08      	ldr	r3, [sp, #32]
 800437c:	3308      	adds	r3, #8
 800437e:	9308      	str	r3, [sp, #32]
 8004380:	9b07      	ldr	r3, [sp, #28]
 8004382:	3308      	adds	r3, #8
 8004384:	9307      	str	r3, [sp, #28]
 8004386:	9b06      	ldr	r3, [sp, #24]
 8004388:	3308      	adds	r3, #8
 800438a:	9306      	str	r3, [sp, #24]
 800438c:	9b05      	ldr	r3, [sp, #20]
 800438e:	3308      	adds	r3, #8
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	9b04      	ldr	r3, [sp, #16]
 8004394:	3308      	adds	r3, #8
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800439a:	f109 0901 	add.w	r9, r9, #1
 800439e:	454b      	cmp	r3, r9
 80043a0:	f47f ae7d 	bne.w	800409e <arm_radix8_butterfly_f32+0x25e>
 80043a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	46d9      	mov	r9, fp
 80043ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80043ae:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80043b2:	e554      	b.n	8003e5e <arm_radix8_butterfly_f32+0x1e>
 80043b4:	b015      	add	sp, #84	@ 0x54
 80043b6:	ecbd 8b10 	vpop	{d8-d15}
 80043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043be:	bf00      	nop

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <__errno>:
 80043d0:	4b01      	ldr	r3, [pc, #4]	@ (80043d8 <__errno+0x8>)
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c

080043dc <__libc_init_array>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	4d0d      	ldr	r5, [pc, #52]	@ (8004414 <__libc_init_array+0x38>)
 80043e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004418 <__libc_init_array+0x3c>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	2600      	movs	r6, #0
 80043e8:	42a6      	cmp	r6, r4
 80043ea:	d109      	bne.n	8004400 <__libc_init_array+0x24>
 80043ec:	4d0b      	ldr	r5, [pc, #44]	@ (800441c <__libc_init_array+0x40>)
 80043ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004420 <__libc_init_array+0x44>)
 80043f0:	f000 f83a 	bl	8004468 <_init>
 80043f4:	1b64      	subs	r4, r4, r5
 80043f6:	10a4      	asrs	r4, r4, #2
 80043f8:	2600      	movs	r6, #0
 80043fa:	42a6      	cmp	r6, r4
 80043fc:	d105      	bne.n	800440a <__libc_init_array+0x2e>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	f855 3b04 	ldr.w	r3, [r5], #4
 8004404:	4798      	blx	r3
 8004406:	3601      	adds	r6, #1
 8004408:	e7ee      	b.n	80043e8 <__libc_init_array+0xc>
 800440a:	f855 3b04 	ldr.w	r3, [r5], #4
 800440e:	4798      	blx	r3
 8004410:	3601      	adds	r6, #1
 8004412:	e7f2      	b.n	80043fa <__libc_init_array+0x1e>
 8004414:	08017cbc 	.word	0x08017cbc
 8004418:	08017cbc 	.word	0x08017cbc
 800441c:	08017cbc 	.word	0x08017cbc
 8004420:	08017cc0 	.word	0x08017cc0

08004424 <sqrtf>:
 8004424:	b508      	push	{r3, lr}
 8004426:	ed2d 8b02 	vpush	{d8}
 800442a:	eeb0 8a40 	vmov.f32	s16, s0
 800442e:	f000 f817 	bl	8004460 <__ieee754_sqrtf>
 8004432:	eeb4 8a48 	vcmp.f32	s16, s16
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d60c      	bvs.n	8004456 <sqrtf+0x32>
 800443c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800445c <sqrtf+0x38>
 8004440:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	d505      	bpl.n	8004456 <sqrtf+0x32>
 800444a:	f7ff ffc1 	bl	80043d0 <__errno>
 800444e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004452:	2321      	movs	r3, #33	@ 0x21
 8004454:	6003      	str	r3, [r0, #0]
 8004456:	ecbd 8b02 	vpop	{d8}
 800445a:	bd08      	pop	{r3, pc}
 800445c:	00000000 	.word	0x00000000

08004460 <__ieee754_sqrtf>:
 8004460:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004464:	4770      	bx	lr
	...

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
